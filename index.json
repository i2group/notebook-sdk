{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference",
    "keywords": "Home API Reference Packages Package Description @i2analyze/notebook-sdk The i2 Notebook Web SDK package, which contains all the functionality you need to create plug-ins for the i2 Notebook web client."
  },
  "api/notebook-sdk.app.analyzerecordgroupid.html": {
    "href": "api/notebook-sdk.app.analyzerecordgroupid.html",
    "title": "app.AnalyzeRecordGroupId type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > AnalyzeRecordGroupId app.AnalyzeRecordGroupId type The identifier of a record group. Signature: type AnalyzeRecordGroupId = string; Introduced: version 1.1"
  },
  "api/notebook-sdk.app.applicationeventmap.html": {
    "href": "api/notebook-sdk.app.applicationeventmap.html",
    "title": "app.ApplicationEventMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ApplicationEventMap app.ApplicationEventMap interface A mapping of application event types to their listener types. Signature: interface ApplicationEventMap extends chart.ChartEventMap Extends: chart.ChartEventMap Introduced: version 1.0 Properties Property Modifiers Type Description chartchange readonly ChangeListener Gets the type of the callback method that listens for \"chartchange\" events. (Inherited from ChartEventMap <!-- --> ) chartschemachange readonly ChartSchemaChangeListener Gets the type of the callback method that listens for \"chartschemachange\" events. (Inherited from ChartEventMap <!-- --> ) chartselectionchange readonly SelectionListener Gets the type of the callback method that listens for \"chartselectionchange\" events. (Inherited from ChartEventMap <!-- --> ) chartviewchange readonly ViewListener Gets the type of the callback method that listens for \"chartviewchange\" events. (Inherited from ChartEventMap <!-- --> )"
  },
  "api/notebook-sdk.app.applicationeventoptionsmap.html": {
    "href": "api/notebook-sdk.app.applicationeventoptionsmap.html",
    "title": "app.ApplicationEventOptionsMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ApplicationEventOptionsMap app.ApplicationEventOptionsMap interface A mapping of application event types to their listener options types. Signature: interface ApplicationEventOptionsMap extends chart.ChartEventOptionsMap Extends: chart.ChartEventOptionsMap Introduced: version 1.0 Properties Property Modifiers Type Description chartchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartschemachange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartschemachange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartselectionchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartselectionchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartviewchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartviewchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> )"
  },
  "api/notebook-sdk.app.edgespecifier.html": {
    "href": "api/notebook-sdk.app.edgespecifier.html",
    "title": "app.EdgeSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > EdgeSpecifier app.EdgeSpecifier type A common specifier for an edge, for use in mutation APIs. Signature: type EdgeSpecifier = visual.ElementId | visual.IEdge; References: visual.ElementId <!-- --> , visual.IEdge Introduced: version 1.2"
  },
  "api/notebook-sdk.app.edgesummaryspecifier.html": {
    "href": "api/notebook-sdk.app.edgesummaryspecifier.html",
    "title": "app.EdgeSummarySpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > EdgeSummarySpecifier app.EdgeSummarySpecifier type A common specifier for an edge summary, for use in mutation APIs. Signature: type EdgeSummarySpecifier = visual.ElementId | visual.IEdgeSummary; References: visual.ElementId <!-- --> , visual.IEdgeSummary Introduced: version 1.6"
  },
  "api/notebook-sdk.app.editrecordpropertiesspecifier.html": {
    "href": "api/notebook-sdk.app.editrecordpropertiesspecifier.html",
    "title": "app.EditRecordPropertiesSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > EditRecordPropertiesSpecifier app.EditRecordPropertiesSpecifier type A common specifier for record properties that are to be edited, for use in mutation APIs. Signature: type EditRecordPropertiesSpecifier = Record<schema.ChartPropertyTypeId, data.PropertyValue | null> | Iterable<[schema.PropertyTypeSpecifier, data.PropertyValue | null]>; References: schema.ChartPropertyTypeId <!-- --> , data.PropertyValue <!-- --> , schema.PropertyTypeSpecifier Introduced: version 1.1"
  },
  "api/notebook-sdk.app.elementspecifier.html": {
    "href": "api/notebook-sdk.app.elementspecifier.html",
    "title": "app.ElementSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ElementSpecifier app.ElementSpecifier type A common specifier for an element, for use in mutation APIs. Signature: type ElementSpecifier = visual.ElementId | visual.IElement; References: visual.ElementId <!-- --> , visual.IElement Introduced: version 1.1"
  },
  "api/notebook-sdk.app.html": {
    "href": "api/notebook-sdk.app.html",
    "title": "app namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > app app namespace The members of the app namespace enable handling for events that take place during the lifetime of the i2 Notebook application, and provide access to top-level data such as user and locale information. Signature: export declare namespace app Introduced: version 1.0 Interfaces Interface Description ApplicationEventMap A mapping of application event types to their listener types. ApplicationEventOptionsMap A mapping of application event types to their listener options types. IApplication The top-level i2 Notebook application. IApplicationContents The contents of the i2 Notebook application. IApplicationEvents A collection of methods that set up listeners to run in response to events. ICancelation A collection of methods and properties for handling the situation when a user cancels an operation. IChangeSource The source of a change that takes place in the i2 Notebook application. IChartEntityRecordData A set of data for creating an entity record. IChartLinkRecordData A set of data for creating a link record. IChartRecordBaseData A set of data that is common to creating records of all types. IDetailedReport A report on the result of a set of mutations that were not entirely successful. The report is typically displayed through a 'dialog'-style notification. IEdgeEditor A set of methods for modifying the appearance of an edge. IEdgeSummaryEditor A set of methods for modifying the appearance of an edge summary. IElementEditorBase A set of methods for modifying the appearance of an element. IElementsAndRecords A collection of elements and records that together represent a selection on the chart surface. ILocale A set of locale information. IMutationCommitBase A set of information that is common to requests to commit mutations of all types. IMutationResult A result from a mutation. IMutationRollback A set of information that accompanies a request to roll back a set of mutations. IMutationsBase A set of methods for performing tracked or untracked mutations, organized by what they affect. INodeEditor A set of methods for modifying the appearance of a node. INodeGroupEditor A set of methods for modifying the contents and position of a node group. IPendingNodeGroup A node group that has been created in a mutation handler, but has not yet been added to a chart. IPendingRecord A record that has been created in a mutation handler, but has not yet been added to a chart. IRecordEditor A set of methods for modifying the contents of a record. ISelectionEditor A set of methods that can change the chart selection. IServerComponents A collection of properties that describe how the application server is configured. IStatus A set of methods for changing a status display while an asynchronous mutation is running. ISubscriptionOptions A set of options that can influence the execution of an event listener. ISuccessReport A report on the result of an entirely successful set of mutations. The report is typically displayed through a transient, 'toast'-style notification. ITheme A theme for the i2 Notebook user interface. ITrackedMutationCommit A set of information that accompanies a request to commit a set of tracked mutations. ITrackedMutations A set of methods for performing tracked mutations, which require an entry in the undo stack. ITransactionOptions A set of options that enable control over a callback function during execution. IUntrackedMutationCommit A set of information that accompanies a request to commit a set of untracked mutations. IUntrackedMutations A set of methods for performing untracked mutations, which do not require an entry in the undo stack. IUserAndPermissions An i2 Notebook user. IValueFactory A set of utility functions for creating property and other values that can be reused across records. IViewEditor A set of methods that change the chart view. Type Aliases Type Alias Description AnalyzeRecordGroupId The identifier of a record group. EdgeSpecifier A common specifier for an edge, for use in mutation APIs. EdgeSummarySpecifier A common specifier for an edge summary, for use in mutation APIs. EditRecordPropertiesSpecifier A common specifier for record properties that are to be edited, for use in mutation APIs. ElementSpecifier A common specifier for an element, for use in mutation APIs. IMutationReport A report on the result of one or more mutations. ITrackedMutationInfo A response from a tracked mutation handler, which indicates whether the mutation should be committed or rolled back. IUntrackedMutationInfo A response from an untracked mutation handler, which indicates whether the mutation should be committed or rolled back. MutationResponseHandler A function that receives the results of a mutation. NodeGroupSpecifier A common specifier for a node group, for use in mutation APIs. NodeSpecifier A common specifier for a node, for use in mutation APIs. NoteSpecifier A common specifier for a note, for use in mutation APIs. RecordPropertiesSpecifier A common specifier for the properties of new records, for use in mutation APIs. RecordSpecifier A common specifier for a record, for use in mutation APIs. SelectionOption The effect on chart selection of adding a record group to the chart. SourceReferenceSpecifier A common specifier for a source reference, for use in mutation APIs. ThemeName The names of themes for the i2 Notebook user interface. TrackedMutationHandler A function that performs tracked mutations. TransactionHandler A callback function that performs read-only work on the application or its contents. UntrackedMutationHandler A function that performs untracked mutations."
  },
  "api/notebook-sdk.app.iapplication.alltimezones.html": {
    "href": "api/notebook-sdk.app.iapplication.alltimezones.html",
    "title": "app.IApplication.allTimeZones property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > allTimeZones app.IApplication.allTimeZones property Gets a list of all the valid time zones, in the same order as they appear in the application. Signature: readonly allTimeZones: data.IKeyedReadOnlyCollection<data.TimeZoneId, data.ITimeZone>; Returns: data.IKeyedReadOnlyCollection < data.TimeZoneId , data.ITimeZone > Introduced: version 1.0 Remarks The list is sorted in ascending order of data.ITimeZone.rawUtcOffset <!-- --> , and then alphabetically by data.ITimeZone.fullDisplayName if UTC offsets are equal. For example: (GMT-08:00) ‪Los Angeles Time ‪‪(GMT-01:00) Azores Time [Atlantic/Azores] ‪‪(GMT) ‪United Kingdom Time [Europe/London] ‪‪(GMT+01:00)Austria Time (GMT+01:00) Belgium Time"
  },
  "api/notebook-sdk.app.iapplication.html": {
    "href": "api/notebook-sdk.app.iapplication.html",
    "title": "app.IApplication interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication app.IApplication interface The top-level i2 Notebook application. Signature: interface IApplication extends IApplicationEvents Extends: IApplicationEvents Introduced: version 1.0 Properties Property Modifiers Type Description allTimeZones readonly data.IKeyedReadOnlyCollection <!-- --> < data.TimeZoneId <!-- --> , data.ITimeZone <!-- --> > Gets a list of all the valid time zones, in the same order as they appear in the application. locale readonly ILocale Gets the locale in which the application is operating. metadataTimeZone readonly data.ITimeZone Gets the time zone that the application assumes date and time values in metadata to have. serverComponents readonly IServerComponents Gets information about the i2 Analyze components that are deployed on the application server. systemActions readonly dialog.ISystemDialogActions Gets the identifiers of the system dialog actions. theme readonly ITheme Gets the current theme of the application. user readonly IUserAndPermissions Gets the logged-in user of the application. Methods Method Description addEventListener(type, listener, options) Adds an event listener. See app.ApplicationEventMap for the available events. (Inherited from IApplicationEvents <!-- --> ) removeEventListener(type, listener) Removes an event listener. See app.ApplicationEventMap for the available events. (Inherited from IApplicationEvents <!-- --> ) runTrackedMutations(mutationHandler, responseHandler, options) Queues a function that performs tracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. runTrackedMutations(mutationHandler, options) Queues a function that performs tracked mutations on the application contents at the next available opportunity. runTransaction(handler, options) Queues a function that performs read-only work on the application contents at the next available opportunity. runUntrackedMutations(mutationHandler, responseHandler, options) Queues a function that performs untracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. runUntrackedMutations(mutationHandler, options) Queues a function that performs untracked mutations on the application contents at the next available opportunity."
  },
  "api/notebook-sdk.app.iapplication.locale.html": {
    "href": "api/notebook-sdk.app.iapplication.locale.html",
    "title": "app.IApplication.locale property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > locale app.IApplication.locale property Gets the locale in which the application is operating. Signature: readonly locale: ILocale; Returns: ILocale Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iapplication.metadatatimezone.html": {
    "href": "api/notebook-sdk.app.iapplication.metadatatimezone.html",
    "title": "app.IApplication.metadataTimeZone property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > metadataTimeZone app.IApplication.metadataTimeZone property Gets the time zone that the application assumes date and time values in metadata to have. Signature: readonly metadataTimeZone: data.ITimeZone; Returns: data.ITimeZone Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iapplication.runtrackedmutations.html": {
    "href": "api/notebook-sdk.app.iapplication.runtrackedmutations.html",
    "title": "app.IApplication.runTrackedMutations() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > runTrackedMutations app.IApplication.runTrackedMutations() method Queues a function that performs tracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. Signature: runTrackedMutations(mutationHandler: TrackedMutationHandler, responseHandler?: MutationResponseHandler, options?: ITransactionOptions): void; Introduced: version 1.1 Parameters Parameter Type Description mutationHandler TrackedMutationHandler A function that performs one or more tracked mutations and reports on their success as a whole. responseHandler MutationResponseHandler (Optional) A callback that receives the changes caused by the mutations. options ITransactionOptions (Optional) An object that can control the transaction. Returns: void Remarks A mutation is an operation that can read or modify the contents of the application. A successful set of tracked mutations is added as a single entry to the undo stack."
  },
  "api/notebook-sdk.app.iapplication.runtrackedmutations_1.html": {
    "href": "api/notebook-sdk.app.iapplication.runtrackedmutations_1.html",
    "title": "app.IApplication.runTrackedMutations() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > runTrackedMutations app.IApplication.runTrackedMutations() method Queues a function that performs tracked mutations on the application contents at the next available opportunity. Signature: runTrackedMutations(mutationHandler: TrackedMutationHandler, options?: ITransactionOptions): void; Introduced: version 1.1 Parameters Parameter Type Description mutationHandler TrackedMutationHandler A function that performs one or more tracked mutations and reports on their success as a whole. options ITransactionOptions (Optional) An object that can control the transaction. Returns: void Remarks A mutation is an operation that can read or modify the contents of the application. A successful set of tracked mutations is added as a single entry to the undo stack."
  },
  "api/notebook-sdk.app.iapplication.runtransaction.html": {
    "href": "api/notebook-sdk.app.iapplication.runtransaction.html",
    "title": "app.IApplication.runTransaction() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > runTransaction app.IApplication.runTransaction() method Queues a function that performs read-only work on the application contents at the next available opportunity. Signature: runTransaction(handler: TransactionHandler, options?: ITransactionOptions): Promise<void>; Introduced: version 1.0 Parameters Parameter Type Description handler TransactionHandler The function to perform the work. options ITransactionOptions (Optional) An object that can control the transaction. Returns: Promise<void> A promise that is fulfilled if the work completes successfully, or rejected if there is a problem performing it."
  },
  "api/notebook-sdk.app.iapplication.rununtrackedmutations.html": {
    "href": "api/notebook-sdk.app.iapplication.rununtrackedmutations.html",
    "title": "app.IApplication.runUntrackedMutations() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > runUntrackedMutations app.IApplication.runUntrackedMutations() method Queues a function that performs untracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. Signature: runUntrackedMutations(mutationHandler: UntrackedMutationHandler, responseHandler?: MutationResponseHandler, options?: ITransactionOptions): void; Introduced: version 1.1 Parameters Parameter Type Description mutationHandler UntrackedMutationHandler A function that performs one or more untracked mutations and reports on their success as a whole. responseHandler MutationResponseHandler (Optional) A callback that receives the changes produced by the mutations. options ITransactionOptions (Optional) An object that can control the transaction. Returns: void Remarks A mutation is an operation that can read or modify the contents of the application. Untracked mutations are not added to the undo stack, and therefore cannot be undone."
  },
  "api/notebook-sdk.app.iapplication.rununtrackedmutations_1.html": {
    "href": "api/notebook-sdk.app.iapplication.rununtrackedmutations_1.html",
    "title": "app.IApplication.runUntrackedMutations() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > runUntrackedMutations app.IApplication.runUntrackedMutations() method Queues a function that performs untracked mutations on the application contents at the next available opportunity. Signature: runUntrackedMutations(mutationHandler: UntrackedMutationHandler, options?: ITransactionOptions): void; Introduced: version 1.1 Parameters Parameter Type Description mutationHandler UntrackedMutationHandler A function that performs one or more untracked mutations and reports on their success as a whole. options ITransactionOptions (Optional) An object that can control the transaction. Returns: void Remarks A mutation is an operation that can read or modify the contents of the application. Untracked mutations are not added to the undo stack, and therefore cannot be undone."
  },
  "api/notebook-sdk.app.iapplication.servercomponents.html": {
    "href": "api/notebook-sdk.app.iapplication.servercomponents.html",
    "title": "app.IApplication.serverComponents property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > serverComponents app.IApplication.serverComponents property Gets information about the i2 Analyze components that are deployed on the application server. Signature: readonly serverComponents: IServerComponents; Returns: IServerComponents Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iapplication.systemactions.html": {
    "href": "api/notebook-sdk.app.iapplication.systemactions.html",
    "title": "app.IApplication.systemActions property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > systemActions app.IApplication.systemActions property Gets the identifiers of the system dialog actions. Signature: readonly systemActions: dialog.ISystemDialogActions; Returns: dialog.ISystemDialogActions Introduced: version 1.4"
  },
  "api/notebook-sdk.app.iapplication.theme.html": {
    "href": "api/notebook-sdk.app.iapplication.theme.html",
    "title": "app.IApplication.theme property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > theme app.IApplication.theme property Gets the current theme of the application. Signature: readonly theme: ITheme; Returns: ITheme Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iapplication.user.html": {
    "href": "api/notebook-sdk.app.iapplication.user.html",
    "title": "app.IApplication.user property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplication > user app.IApplication.user property Gets the logged-in user of the application. Signature: readonly user: IUserAndPermissions; Returns: IUserAndPermissions Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iapplicationcontents.chart.html": {
    "href": "api/notebook-sdk.app.iapplicationcontents.chart.html",
    "title": "app.IApplicationContents.chart property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplicationContents > chart app.IApplicationContents.chart property Gets the currently open chart. Signature: readonly chart: chart.IChart; Returns: chart.IChart Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iapplicationcontents.html": {
    "href": "api/notebook-sdk.app.iapplicationcontents.html",
    "title": "app.IApplicationContents interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplicationContents app.IApplicationContents interface The contents of the i2 Notebook application. Signature: interface IApplicationContents Introduced: version 1.0 Properties Property Modifiers Type Description chart readonly chart.IChart Gets the currently open chart. view readonly chart.IChartView Gets the view of the currently open chart."
  },
  "api/notebook-sdk.app.iapplicationcontents.view.html": {
    "href": "api/notebook-sdk.app.iapplicationcontents.view.html",
    "title": "app.IApplicationContents.view property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplicationContents > view app.IApplicationContents.view property Gets the view of the currently open chart. Signature: readonly view: chart.IChartView; Returns: chart.IChartView Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iapplicationevents.addeventlistener.html": {
    "href": "api/notebook-sdk.app.iapplicationevents.addeventlistener.html",
    "title": "app.IApplicationEvents.addEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplicationEvents > addEventListener app.IApplicationEvents.addEventListener() method Adds an event listener. See app.ApplicationEventMap for the available events. Signature: addEventListener<K extends keyof ApplicationEventMap>(type: K, listener: ApplicationEventMap[K], options?: ApplicationEventOptionsMap[K]): () => void; Introduced: version 1.0 Type Parameters Parameter Type Description K extends keyof ApplicationEventMap The type of event to subscribe to. Parameters Parameter Type Description type K The type of event to subscribe to. listener ApplicationEventMap <!-- --> [K] A function to handle the event. options ApplicationEventOptionsMap <!-- --> [K] (Optional) An object that controls the behavior of the listener. Returns: () => void A function that can be called to remove the listener."
  },
  "api/notebook-sdk.app.iapplicationevents.html": {
    "href": "api/notebook-sdk.app.iapplicationevents.html",
    "title": "app.IApplicationEvents interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplicationEvents app.IApplicationEvents interface A collection of methods that set up listeners to run in response to events. Signature: interface IApplicationEvents Introduced: version 1.0 Methods Method Description addEventListener(type, listener, options) Adds an event listener. See app.ApplicationEventMap for the available events. removeEventListener(type, listener) Removes an event listener. See app.ApplicationEventMap for the available events."
  },
  "api/notebook-sdk.app.iapplicationevents.removeeventlistener.html": {
    "href": "api/notebook-sdk.app.iapplicationevents.removeeventlistener.html",
    "title": "app.IApplicationEvents.removeEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IApplicationEvents > removeEventListener app.IApplicationEvents.removeEventListener() method Removes an event listener. See app.ApplicationEventMap for the available events. Signature: removeEventListener<K extends keyof ApplicationEventMap>(type: K, listener: ApplicationEventMap[K]): void; Introduced: version 1.0 Type Parameters Parameter Type Description K extends keyof ApplicationEventMap The type of event to unsubscribe from. Parameters Parameter Type Description type K The type of event to unsubscribe from. listener ApplicationEventMap <!-- --> [K] A function that was previously added as a listener. Returns: void"
  },
  "api/notebook-sdk.app.icancelation.html": {
    "href": "api/notebook-sdk.app.icancelation.html",
    "title": "app.ICancelation interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ICancelation app.ICancelation interface A collection of methods and properties for handling the situation when a user cancels an operation. Signature: interface ICancelation Introduced: version 1.1 Remarks The i2 Notebook SDK provides two cancelation APIs: An AbortSignal <!-- --> -based API and a Promise <!-- --> -based API, which you can use depending on your scenario: To launch an asynchronous operation (for example, a fetch call) that can itself be canceled by an AbortSignal <!-- --> , you can pass signal directly to that operation. To launch an asynchronous operation that cannot itself be canceled but is to be abandoned if the user requests cancelation, call waitForPromiseOrCancel() with the Promise from your operation. The returned Promise resolves or rejects just as your operation's Promise does, and it rejects immediately with an AbortError if the user cancels the operation. To check synchronously if the operation has been canceled, you can inspect the signal.aborted property. Properties Property Modifiers Type Description signal AbortSignal Gets an AbortSignal that indicates whether a user has requested that an operation be canceled. Methods Method Description waitForPromiseOrCancel(promise) Launches an asynchronous operation through the specified promise."
  },
  "api/notebook-sdk.app.icancelation.signal.html": {
    "href": "api/notebook-sdk.app.icancelation.signal.html",
    "title": "app.ICancelation.signal property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ICancelation > signal app.ICancelation.signal property Gets an AbortSignal that indicates whether a user has requested that an operation be canceled. Signature: signal: AbortSignal; Returns: AbortSignal Introduced: version 1.1"
  },
  "api/notebook-sdk.app.icancelation.waitforpromiseorcancel.html": {
    "href": "api/notebook-sdk.app.icancelation.waitforpromiseorcancel.html",
    "title": "app.ICancelation.waitForPromiseOrCancel() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ICancelation > waitForPromiseOrCancel app.ICancelation.waitForPromiseOrCancel() method Launches an asynchronous operation through the specified promise. Signature: waitForPromiseOrCancel<T>(promise: Promise<T>): Promise<T>; Introduced: version 1.1 Type Parameters Parameter Type Description T any The type of the output from the operation. Parameters Parameter Type Description promise Promise<T> A promise that resolves to the output from the operation. Returns: Promise<T> A promise that also resolves to the output from the operation."
  },
  "api/notebook-sdk.app.ichangesource.html": {
    "href": "api/notebook-sdk.app.ichangesource.html",
    "title": "app.IChangeSource interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChangeSource app.IChangeSource interface The source of a change that takes place in the i2 Notebook application. Signature: interface IChangeSource Introduced: version 1.2 Properties Property Modifiers Type Description pluginId? readonly string (Optional) Gets the identifier of the plug-in that is responsible for the change, or null if the change is the result of a user action outside a plug-in."
  },
  "api/notebook-sdk.app.ichangesource.pluginid.html": {
    "href": "api/notebook-sdk.app.ichangesource.pluginid.html",
    "title": "app.IChangeSource.pluginId property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChangeSource > pluginId app.IChangeSource.pluginId property Gets the identifier of the plug-in that is responsible for the change, or null if the change is the result of a user action outside a plug-in. Signature: readonly pluginId?: string; Returns: string Introduced: version 1.2"
  },
  "api/notebook-sdk.app.ichartentityrecorddata.html": {
    "href": "api/notebook-sdk.app.ichartentityrecorddata.html",
    "title": "app.IChartEntityRecordData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartEntityRecordData app.IChartEntityRecordData interface A set of data for creating an entity record. Signature: interface IChartEntityRecordData extends IChartRecordBaseData Extends: IChartRecordBaseData Introduced: version 1.1 Properties Property Modifiers Type Description itemType schema.ChartItemTypeId | schema.IChartItemType Gets or sets the item type of the new record. (Inherited from IChartRecordBaseData <!-- --> ) notes? readonly records.INoteData <!-- --> [] (Optional) Gets or sets the notes for the new record. (Inherited from IChartRecordBaseData <!-- --> ) properties? RecordPropertiesSpecifier (Optional) Gets or sets the properties of the new record. (Inherited from IChartRecordBaseData <!-- --> ) security? readonly records.ISecuritySetting <!-- --> [] | data.IKeyedReadOnlyCollection <!-- --> < schema.SecurityDimensionId <!-- --> , records.ISecuritySetting <!-- --> > (Optional) Gets or sets the security settings of the new record. (Inherited from IChartRecordBaseData <!-- --> ) sourceIdentifiers? readonly records.ISourceIdentifier <!-- --> [] (Optional) Gets or sets the source identifiers of the new record. (Inherited from IChartRecordBaseData <!-- --> ) sourceReferences? readonly records.ISourceReferenceData <!-- --> [] (Optional) Gets or sets the source references of the new record. (Inherited from IChartRecordBaseData <!-- --> )"
  },
  "api/notebook-sdk.app.ichartlinkrecorddata.fromend.html": {
    "href": "api/notebook-sdk.app.ichartlinkrecorddata.fromend.html",
    "title": "app.IChartLinkRecordData.fromEnd property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartLinkRecordData > fromEnd app.IChartLinkRecordData.fromEnd property Gets the record at the 'from' end of the link. Signature: readonly fromEnd: RecordSpecifier; Returns: RecordSpecifier Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ichartlinkrecorddata.html": {
    "href": "api/notebook-sdk.app.ichartlinkrecorddata.html",
    "title": "app.IChartLinkRecordData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartLinkRecordData app.IChartLinkRecordData interface A set of data for creating a link record. Signature: interface IChartLinkRecordData extends IChartRecordBaseData Extends: IChartRecordBaseData Introduced: version 1.1 Properties Property Modifiers Type Description fromEnd readonly RecordSpecifier Gets the record at the 'from' end of the link. itemType schema.ChartItemTypeId | schema.IChartItemType Gets or sets the item type of the new record. (Inherited from IChartRecordBaseData <!-- --> ) linkDirection readonly data.LinkDirection Gets the direction of the link. notes? readonly records.INoteData <!-- --> [] (Optional) Gets or sets the notes for the new record. (Inherited from IChartRecordBaseData <!-- --> ) properties? RecordPropertiesSpecifier (Optional) Gets or sets the properties of the new record. (Inherited from IChartRecordBaseData <!-- --> ) security? readonly records.ISecuritySetting <!-- --> [] | data.IKeyedReadOnlyCollection <!-- --> < schema.SecurityDimensionId <!-- --> , records.ISecuritySetting <!-- --> > (Optional) Gets or sets the security settings of the new record. (Inherited from IChartRecordBaseData <!-- --> ) sourceIdentifiers? readonly records.ISourceIdentifier <!-- --> [] (Optional) Gets or sets the source identifiers of the new record. (Inherited from IChartRecordBaseData <!-- --> ) sourceReferences? readonly records.ISourceReferenceData <!-- --> [] (Optional) Gets or sets the source references of the new record. (Inherited from IChartRecordBaseData <!-- --> ) toEnd readonly RecordSpecifier Gets the record at the 'to' end of the link."
  },
  "api/notebook-sdk.app.ichartlinkrecorddata.linkdirection.html": {
    "href": "api/notebook-sdk.app.ichartlinkrecorddata.linkdirection.html",
    "title": "app.IChartLinkRecordData.linkDirection property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartLinkRecordData > linkDirection app.IChartLinkRecordData.linkDirection property Gets the direction of the link. Signature: readonly linkDirection: data.LinkDirection; Returns: data.LinkDirection Introduced: version 1.1 Remarks The value is expressed relative to the natural direction implied by the 'from' and 'to' ends."
  },
  "api/notebook-sdk.app.ichartlinkrecorddata.toend.html": {
    "href": "api/notebook-sdk.app.ichartlinkrecorddata.toend.html",
    "title": "app.IChartLinkRecordData.toEnd property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartLinkRecordData > toEnd app.IChartLinkRecordData.toEnd property Gets the record at the 'to' end of the link. Signature: readonly toEnd: RecordSpecifier; Returns: RecordSpecifier Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ichartrecordbasedata.html": {
    "href": "api/notebook-sdk.app.ichartrecordbasedata.html",
    "title": "app.IChartRecordBaseData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartRecordBaseData app.IChartRecordBaseData interface A set of data that is common to creating records of all types. Signature: interface IChartRecordBaseData Introduced: version 1.1 Properties Property Modifiers Type Description itemType schema.ChartItemTypeId | schema.IChartItemType Gets or sets the item type of the new record. notes? readonly records.INoteData <!-- --> [] (Optional) Gets or sets the notes for the new record. properties? RecordPropertiesSpecifier (Optional) Gets or sets the properties of the new record. security? readonly records.ISecuritySetting <!-- --> [] | data.IKeyedReadOnlyCollection <!-- --> < schema.SecurityDimensionId <!-- --> , records.ISecuritySetting <!-- --> > (Optional) Gets or sets the security settings of the new record. sourceIdentifiers? readonly records.ISourceIdentifier <!-- --> [] (Optional) Gets or sets the source identifiers of the new record. sourceReferences? readonly records.ISourceReferenceData <!-- --> [] (Optional) Gets or sets the source references of the new record."
  },
  "api/notebook-sdk.app.ichartrecordbasedata.itemtype.html": {
    "href": "api/notebook-sdk.app.ichartrecordbasedata.itemtype.html",
    "title": "app.IChartRecordBaseData.itemType property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartRecordBaseData > itemType app.IChartRecordBaseData.itemType property Gets or sets the item type of the new record. Signature: itemType: schema.ChartItemTypeId | schema.IChartItemType; Returns: schema.ChartItemTypeId | schema.IChartItemType Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ichartrecordbasedata.notes.html": {
    "href": "api/notebook-sdk.app.ichartrecordbasedata.notes.html",
    "title": "app.IChartRecordBaseData.notes property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartRecordBaseData > notes app.IChartRecordBaseData.notes property Gets or sets the notes for the new record. Signature: notes?: readonly records.INoteData[]; Returns: readonly records.INoteData [] Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ichartrecordbasedata.properties.html": {
    "href": "api/notebook-sdk.app.ichartrecordbasedata.properties.html",
    "title": "app.IChartRecordBaseData.properties property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartRecordBaseData > properties app.IChartRecordBaseData.properties property Gets or sets the properties of the new record. Signature: properties?: RecordPropertiesSpecifier; Returns: RecordPropertiesSpecifier Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ichartrecordbasedata.security.html": {
    "href": "api/notebook-sdk.app.ichartrecordbasedata.security.html",
    "title": "app.IChartRecordBaseData.security property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartRecordBaseData > security app.IChartRecordBaseData.security property Gets or sets the security settings of the new record. Signature: security?: readonly records.ISecuritySetting[] | data.IKeyedReadOnlyCollection<schema.SecurityDimensionId, records.ISecuritySetting>; Returns: readonly records.ISecuritySetting [] | data.IKeyedReadOnlyCollection < schema.SecurityDimensionId , records.ISecuritySetting > Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ichartrecordbasedata.sourceidentifiers.html": {
    "href": "api/notebook-sdk.app.ichartrecordbasedata.sourceidentifiers.html",
    "title": "app.IChartRecordBaseData.sourceIdentifiers property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartRecordBaseData > sourceIdentifiers app.IChartRecordBaseData.sourceIdentifiers property Gets or sets the source identifiers of the new record. Signature: sourceIdentifiers?: readonly records.ISourceIdentifier[]; Returns: readonly records.ISourceIdentifier [] Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ichartrecordbasedata.sourcereferences.html": {
    "href": "api/notebook-sdk.app.ichartrecordbasedata.sourcereferences.html",
    "title": "app.IChartRecordBaseData.sourceReferences property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IChartRecordBaseData > sourceReferences app.IChartRecordBaseData.sourceReferences property Gets or sets the source references of the new record. Signature: sourceReferences?: readonly records.ISourceReferenceData[]; Returns: readonly records.ISourceReferenceData [] Introduced: version 1.1"
  },
  "api/notebook-sdk.app.idetailedreport.details.html": {
    "href": "api/notebook-sdk.app.idetailedreport.details.html",
    "title": "app.IDetailedReport.details property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IDetailedReport > details app.IDetailedReport.details property Gets or sets some additional information about the mutations. Signature: details: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.app.idetailedreport.html": {
    "href": "api/notebook-sdk.app.idetailedreport.html",
    "title": "app.IDetailedReport interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IDetailedReport app.IDetailedReport interface A report on the result of a set of mutations that were not entirely successful. The report is typically displayed through a 'dialog'-style notification. Signature: interface IDetailedReport Introduced: version 1.1 Properties Property Modifiers Type Description details string Gets or sets some additional information about the mutations. title string Gets or sets a title for the report, which is typically used as the title of a notification dialog. type 'information' | 'warning' | 'error' Gets or sets the type of the report, which can be 'information' , 'warning' , or 'error' for an IDetailedReport ."
  },
  "api/notebook-sdk.app.idetailedreport.title.html": {
    "href": "api/notebook-sdk.app.idetailedreport.title.html",
    "title": "app.IDetailedReport.title property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IDetailedReport > title app.IDetailedReport.title property Gets or sets a title for the report, which is typically used as the title of a notification dialog. Signature: title: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.app.idetailedreport.type.html": {
    "href": "api/notebook-sdk.app.idetailedreport.type.html",
    "title": "app.IDetailedReport.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IDetailedReport > type app.IDetailedReport.type property Gets or sets the type of the report, which can be 'information' <!-- --> , 'warning' <!-- --> , or 'error' for an IDetailedReport <!-- --> . Signature: type: 'information' | 'warning' | 'error'; Returns: 'information' | 'warning' | 'error' Introduced: version 1.1"
  },
  "api/notebook-sdk.app.iedgeeditor.html": {
    "href": "api/notebook-sdk.app.iedgeeditor.html",
    "title": "app.IEdgeEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IEdgeEditor app.IEdgeEditor interface A set of methods for modifying the appearance of an edge. Signature: interface IEdgeEditor extends IElementEditorBase Extends: IElementEditorBase Introduced: version 1.2 Methods Method Description setColor(color) Sets or resets the color of the element. (Inherited from IElementEditorBase <!-- --> ) setLabel(label) Sets or resets the label of the element. (Inherited from IElementEditorBase <!-- --> ) setWidth(width) Sets or resets the width of the edge."
  },
  "api/notebook-sdk.app.iedgeeditor.setwidth.html": {
    "href": "api/notebook-sdk.app.iedgeeditor.setwidth.html",
    "title": "app.IEdgeEditor.setWidth() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IEdgeEditor > setWidth app.IEdgeEditor.setWidth() method Sets or resets the width of the edge. Signature: setWidth(width: number | undefined): this; Introduced: version 1.8 Parameters Parameter Type Description width number | undefined The width to set, or undefined to reset the width to 1. Returns: this The edge, with its width set to the specified value."
  },
  "api/notebook-sdk.app.iedgesummaryeditor.html": {
    "href": "api/notebook-sdk.app.iedgesummaryeditor.html",
    "title": "app.IEdgeSummaryEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IEdgeSummaryEditor app.IEdgeSummaryEditor interface A set of methods for modifying the appearance of an edge summary. Signature: interface IEdgeSummaryEditor Introduced: version 1.6 Methods Method Description setLabel(label) Sets or resets the label of the edge summary."
  },
  "api/notebook-sdk.app.iedgesummaryeditor.setlabel.html": {
    "href": "api/notebook-sdk.app.iedgesummaryeditor.setlabel.html",
    "title": "app.IEdgeSummaryEditor.setLabel() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IEdgeSummaryEditor > setLabel app.IEdgeSummaryEditor.setLabel() method Sets or resets the label of the edge summary. Signature: setLabel(label: string | undefined): this; Introduced: version 1.6 Parameters Parameter Type Description label string | undefined The label to set, or undefined to reset the label to the default. Returns: this The edge summary, with its label set to the specified value."
  },
  "api/notebook-sdk.app.ielementeditorbase.html": {
    "href": "api/notebook-sdk.app.ielementeditorbase.html",
    "title": "app.IElementEditorBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IElementEditorBase app.IElementEditorBase interface A set of methods for modifying the appearance of an element. Signature: interface IElementEditorBase Introduced: version 1.2 Methods Method Description setColor(color) Sets or resets the color of the element. setLabel(label) Sets or resets the label of the element."
  },
  "api/notebook-sdk.app.ielementeditorbase.setcolor.html": {
    "href": "api/notebook-sdk.app.ielementeditorbase.setcolor.html",
    "title": "app.IElementEditorBase.setColor() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IElementEditorBase > setColor app.IElementEditorBase.setColor() method Sets or resets the color of the element. Signature: setColor(color: string | undefined): this; Introduced: version 1.2 Parameters Parameter Type Description color string | undefined The color to set, or undefined to reset the color to the theme default. Returns: this The element, with its color set to the specified value. Exceptions Error if the specified value is not in a form that CSS supports, such as a hexadecimal number, an rgb() value, or a color name."
  },
  "api/notebook-sdk.app.ielementeditorbase.setlabel.html": {
    "href": "api/notebook-sdk.app.ielementeditorbase.setlabel.html",
    "title": "app.IElementEditorBase.setLabel() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IElementEditorBase > setLabel app.IElementEditorBase.setLabel() method Sets or resets the label of the element. Signature: setLabel(label: string | undefined): this; Introduced: version 1.5 Parameters Parameter Type Description label string | undefined The label to set, or undefined to reset the label to the default. Returns: this The element, with its label set to the specified value."
  },
  "api/notebook-sdk.app.ielementsandrecords.elements.html": {
    "href": "api/notebook-sdk.app.ielementsandrecords.elements.html",
    "title": "app.IElementsAndRecords.elements property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IElementsAndRecords > elements app.IElementsAndRecords.elements property Gets or sets the elements in the set. Signature: elements?: Iterable<visual.ElementId | visual.IElement>; Returns: Iterable< visual.ElementId | visual.IElement > Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ielementsandrecords.html": {
    "href": "api/notebook-sdk.app.ielementsandrecords.html",
    "title": "app.IElementsAndRecords interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IElementsAndRecords app.IElementsAndRecords interface A collection of elements and records that together represent a selection on the chart surface. Signature: interface IElementsAndRecords Introduced: version 1.1 Properties Property Modifiers Type Description elements? Iterable< visual.ElementId | visual.IElement <!-- --> > (Optional) Gets or sets the elements in the set. records? Iterable< RecordSpecifier <!-- --> > (Optional) Gets or sets the records in the set."
  },
  "api/notebook-sdk.app.ielementsandrecords.records.html": {
    "href": "api/notebook-sdk.app.ielementsandrecords.records.html",
    "title": "app.IElementsAndRecords.records property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IElementsAndRecords > records app.IElementsAndRecords.records property Gets or sets the records in the set. Signature: records?: Iterable<RecordSpecifier>; Returns: Iterable< RecordSpecifier > Introduced: version 1.1"
  },
  "api/notebook-sdk.app.ilocale.basetextdirection.html": {
    "href": "api/notebook-sdk.app.ilocale.basetextdirection.html",
    "title": "app.ILocale.baseTextDirection property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ILocale > baseTextDirection app.ILocale.baseTextDirection property Gets the base direction of text in the user interface, which controls how mixed LTR/RTL text should behave. Signature: readonly baseTextDirection: data.BaseTextDirection; Returns: data.BaseTextDirection Introduced: version 1.0 Remarks To achieve proper bi-directional text behavior in mixed left-to-right/right-to-left environments, most text should be marked up with Unicode control characters such as LRE, RLE and PDF. data.IFormatter.wrapForBidi() provides support for such markup. The default value is contextual <!-- --> , but users might override it if they have specific bi-directional text requirements. See the data.BaseTextDirection documentation for details of the supported values."
  },
  "api/notebook-sdk.app.ilocale.flowdirection.html": {
    "href": "api/notebook-sdk.app.ilocale.flowdirection.html",
    "title": "app.ILocale.flowDirection property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ILocale > flowDirection app.ILocale.flowDirection property Gets the direction of overall flow of controls and blocks of text in the user interface. Signature: readonly flowDirection: 'ltr' | 'rtl'; Returns: 'ltr' | 'rtl' Introduced: version 1.0 Remarks The value will be rtl for a right-to-left translation locale <!-- --> , and ltr for a left-to-right translation locale <!-- --> ."
  },
  "api/notebook-sdk.app.ilocale.formattinglocale.html": {
    "href": "api/notebook-sdk.app.ilocale.formattinglocale.html",
    "title": "app.ILocale.formattingLocale property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ILocale > formattingLocale app.ILocale.formattingLocale property Gets the Unicode locale identifier that controls how dates and other values are formatted for display. Signature: readonly formattingLocale: string; Returns: string Introduced: version 1.0 Remarks The methods of the data.IFormatter interface automatically make use of this value to provide appropriate value-formatting behavior. For example, en-gb-u-ca-gregory indicates the use of British English with a forced Gregorian calendar."
  },
  "api/notebook-sdk.app.ilocale.html": {
    "href": "api/notebook-sdk.app.ilocale.html",
    "title": "app.ILocale interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ILocale app.ILocale interface A set of locale information. Signature: interface ILocale Introduced: version 1.0 Properties Property Modifiers Type Description baseTextDirection readonly data.BaseTextDirection Gets the base direction of text in the user interface, which controls how mixed LTR/RTL text should behave. flowDirection readonly 'ltr' | 'rtl' Gets the direction of overall flow of controls and blocks of text in the user interface. formattingLocale readonly string Gets the Unicode locale identifier that controls how dates and other values are formatted for display. translationLocale readonly string Gets the language into which the i2 Notebook user interface is currently translated."
  },
  "api/notebook-sdk.app.ilocale.translationlocale.html": {
    "href": "api/notebook-sdk.app.ilocale.translationlocale.html",
    "title": "app.ILocale.translationLocale property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ILocale > translationLocale app.ILocale.translationLocale property Gets the language into which the i2 Notebook user interface is currently translated. Signature: readonly translationLocale: string; Returns: string Introduced: version 1.0 Remarks This value is a BCP 47 language tag. For example, ar indicates an Arabic translation, fr indicates a French translation, and pt-br indicates a Brazilian Portuguese translation."
  },
  "api/notebook-sdk.app.imutationcommitbase.html": {
    "href": "api/notebook-sdk.app.imutationcommitbase.html",
    "title": "app.IMutationCommitBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationCommitBase app.IMutationCommitBase interface A set of information that is common to requests to commit mutations of all types. Signature: interface IMutationCommitBase Introduced: version 1.1 Properties Property Modifiers Type Description report? IMutationReport (Optional) Gets or sets a optional report that describes the result of one or more mutations. type 'commit' Gets or sets the type of the request, which must be \"commit\" for commit requests."
  },
  "api/notebook-sdk.app.imutationcommitbase.report.html": {
    "href": "api/notebook-sdk.app.imutationcommitbase.report.html",
    "title": "app.IMutationCommitBase.report property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationCommitBase > report app.IMutationCommitBase.report property Gets or sets a optional report that describes the result of one or more mutations. Signature: report?: IMutationReport; Returns: IMutationReport Introduced: version 1.1"
  },
  "api/notebook-sdk.app.imutationcommitbase.type.html": {
    "href": "api/notebook-sdk.app.imutationcommitbase.type.html",
    "title": "app.IMutationCommitBase.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationCommitBase > type app.IMutationCommitBase.type property Gets or sets the type of the request, which must be \"commit\" for commit requests. Signature: type: 'commit'; Returns: 'commit' Introduced: version 1.1"
  },
  "api/notebook-sdk.app.imutationreport.html": {
    "href": "api/notebook-sdk.app.imutationreport.html",
    "title": "app.IMutationReport type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationReport app.IMutationReport type A report on the result of one or more mutations. Signature: type IMutationReport = ISuccessReport | IDetailedReport; References: ISuccessReport <!-- --> , IDetailedReport Introduced: version 1.1"
  },
  "api/notebook-sdk.app.imutationresult.change.html": {
    "href": "api/notebook-sdk.app.imutationresult.change.html",
    "title": "app.IMutationResult.change property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationResult > change app.IMutationResult.change property Warning: This API is now obsolete. Deprecated since version 1.5. Use chartChange instead. Gets the changes that were caused by the mutation. If only the chart schema changed, the collections in this field are empty. Signature: readonly change: chart.IChartChange; Returns: chart.IChartChange Introduced: version 1.1"
  },
  "api/notebook-sdk.app.imutationresult.chartchange.html": {
    "href": "api/notebook-sdk.app.imutationresult.chartchange.html",
    "title": "app.IMutationResult.chartChange property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationResult > chartChange app.IMutationResult.chartChange property Gets the chart changes that were caused by the mutation. Signature: readonly chartChange?: chart.IChartChange; Returns: chart.IChartChange Introduced: version 1.5"
  },
  "api/notebook-sdk.app.imutationresult.chartschemachange.html": {
    "href": "api/notebook-sdk.app.imutationresult.chartschemachange.html",
    "title": "app.IMutationResult.chartSchemaChange property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationResult > chartSchemaChange app.IMutationResult.chartSchemaChange property Gets the chart schema changes that were caused by the mutation. Signature: readonly chartSchemaChange?: schema.IChartSchemaChange; Returns: schema.IChartSchemaChange Introduced: version 1.5"
  },
  "api/notebook-sdk.app.imutationresult.html": {
    "href": "api/notebook-sdk.app.imutationresult.html",
    "title": "app.IMutationResult interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationResult app.IMutationResult interface A result from a mutation. Signature: interface IMutationResult Introduced: version 1.1 Properties Property Modifiers Type Description change readonly chart.IChartChange Gets the changes that were caused by the mutation. If only the chart schema changed, the collections in this field are empty. chartChange? readonly chart.IChartChange (Optional) Gets the chart changes that were caused by the mutation. chartSchemaChange? readonly schema.IChartSchemaChange (Optional) Gets the chart schema changes that were caused by the mutation."
  },
  "api/notebook-sdk.app.imutationrollback.html": {
    "href": "api/notebook-sdk.app.imutationrollback.html",
    "title": "app.IMutationRollback interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationRollback app.IMutationRollback interface A set of information that accompanies a request to roll back a set of mutations. Signature: interface IMutationRollback Introduced: version 1.1 Properties Property Modifiers Type Description report? IMutationReport (Optional) Gets or sets a optional report that describes the result of one or more mutations. type 'rollback' Gets or sets the type of the request, which must be \"rollback\" for rollback requests."
  },
  "api/notebook-sdk.app.imutationrollback.report.html": {
    "href": "api/notebook-sdk.app.imutationrollback.report.html",
    "title": "app.IMutationRollback.report property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationRollback > report app.IMutationRollback.report property Gets or sets a optional report that describes the result of one or more mutations. Signature: report?: IMutationReport; Returns: IMutationReport Introduced: version 1.1"
  },
  "api/notebook-sdk.app.imutationrollback.type.html": {
    "href": "api/notebook-sdk.app.imutationrollback.type.html",
    "title": "app.IMutationRollback.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationRollback > type app.IMutationRollback.type property Gets or sets the type of the request, which must be \"rollback\" for rollback requests. Signature: type: 'rollback'; Returns: 'rollback' Introduced: version 1.1"
  },
  "api/notebook-sdk.app.imutationsbase.html": {
    "href": "api/notebook-sdk.app.imutationsbase.html",
    "title": "app.IMutationsBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationsBase app.IMutationsBase interface A set of methods for performing tracked or untracked mutations, organized by what they affect. Signature: interface IMutationsBase Introduced: version 1.1 Properties Property Modifiers Type Description selection readonly ISelectionEditor Gets an object that provides methods for modifying chart selection. status readonly IStatus Gets an object that provides methods for communicating progress information to users. view readonly IViewEditor Gets an object that provides methods for modifying the chart view."
  },
  "api/notebook-sdk.app.imutationsbase.selection.html": {
    "href": "api/notebook-sdk.app.imutationsbase.selection.html",
    "title": "app.IMutationsBase.selection property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationsBase > selection app.IMutationsBase.selection property Gets an object that provides methods for modifying chart selection. Signature: readonly selection: ISelectionEditor; Returns: ISelectionEditor Introduced: version 1.1"
  },
  "api/notebook-sdk.app.imutationsbase.status.html": {
    "href": "api/notebook-sdk.app.imutationsbase.status.html",
    "title": "app.IMutationsBase.status property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationsBase > status app.IMutationsBase.status property Gets an object that provides methods for communicating progress information to users. Signature: readonly status: IStatus; Returns: IStatus Introduced: version 1.1"
  },
  "api/notebook-sdk.app.imutationsbase.view.html": {
    "href": "api/notebook-sdk.app.imutationsbase.view.html",
    "title": "app.IMutationsBase.view property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IMutationsBase > view app.IMutationsBase.view property Gets an object that provides methods for modifying the chart view. Signature: readonly view: IViewEditor; Returns: IViewEditor Introduced: version 1.1"
  },
  "api/notebook-sdk.app.inodeeditor.html": {
    "href": "api/notebook-sdk.app.inodeeditor.html",
    "title": "app.INodeEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeEditor app.INodeEditor interface A set of methods for modifying the appearance of a node. Signature: interface INodeEditor extends Omit<IElementEditorBase, 'setColor'> Extends: Omit< IElementEditorBase <!-- --> , 'setColor'> (Some inherited members may not be shown because they are not represented in the documentation.) Introduced: version 1.2 Methods Method Description setCenter(position) Moves the node to be centered at a particular position on the chart. setColor(color) Sets or resets the color of the element. setImage(href, description) Sets the image for the node. setImage(href) Resets the image for the node to the default one, which might be the entity type icon or a source reference image. setSize(size) Sets or resets the size of the node."
  },
  "api/notebook-sdk.app.inodeeditor.setcenter.html": {
    "href": "api/notebook-sdk.app.inodeeditor.setcenter.html",
    "title": "app.INodeEditor.setCenter() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeEditor > setCenter app.INodeEditor.setCenter() method Moves the node to be centered at a particular position on the chart. Signature: setCenter(position: visual.IPosition): this; Introduced: version 1.2 Parameters Parameter Type Description position visual.IPosition The position to move the node to. Returns: this The node, with its position set to the specified value."
  },
  "api/notebook-sdk.app.inodeeditor.setcolor.html": {
    "href": "api/notebook-sdk.app.inodeeditor.setcolor.html",
    "title": "app.INodeEditor.setColor() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeEditor > setColor app.INodeEditor.setColor() method Sets or resets the color of the element. Signature: setColor(color: string | undefined | null): this; Introduced: version 1.2 Parameters Parameter Type Description color string | undefined | null The color to set, or undefined to reset the color to the theme default, or 'null' to remove the color. Returns: this The element, with its color set to the specified value. Exceptions Error if the specified value is not in a form that CSS supports, such as a hexadecimal number, an rgb() value, or a color name."
  },
  "api/notebook-sdk.app.inodeeditor.setimage.html": {
    "href": "api/notebook-sdk.app.inodeeditor.setimage.html",
    "title": "app.INodeEditor.setImage() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeEditor > setImage app.INodeEditor.setImage() method Sets the image for the node. Signature: setImage(href: string, description?: string): this; Introduced: version 1.5 Parameters Parameter Type Description href string The URL of the image to use. description string (Optional) A description of the image. Returns: this The node, with its image set to the specified URL and description."
  },
  "api/notebook-sdk.app.inodeeditor.setimage_1.html": {
    "href": "api/notebook-sdk.app.inodeeditor.setimage_1.html",
    "title": "app.INodeEditor.setImage() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeEditor > setImage app.INodeEditor.setImage() method Resets the image for the node to the default one, which might be the entity type icon or a source reference image. Signature: setImage(href: undefined): this; Introduced: version 1.5 Parameters Parameter Type Description href undefined undefined is the only valid argument for resetting the image. Returns: this The node, with its image reset to the default one."
  },
  "api/notebook-sdk.app.inodeeditor.setsize.html": {
    "href": "api/notebook-sdk.app.inodeeditor.setsize.html",
    "title": "app.INodeEditor.setSize() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeEditor > setSize app.INodeEditor.setSize() method Sets or resets the size of the node. Signature: setSize(size: visual.NodeSize | undefined): this; Introduced: version 1.2 Parameters Parameter Type Description size visual.NodeSize | undefined The size to set, or undefined to reset the size to 1 . Returns: this The node, with its size set to the specified value."
  },
  "api/notebook-sdk.app.inodegroupeditor.addnodes.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.addnodes.html",
    "title": "app.INodeGroupEditor.addNodes() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor > addNodes app.INodeGroupEditor.addNodes() method Adds nodes to the group. Signature: addNodes(nodes: NodeSpecifier | Iterable<NodeSpecifier>): this; Introduced: version 1.8 Parameters Parameter Type Description nodes NodeSpecifier | Iterable< NodeSpecifier <!-- --> > The nodes to add to the group. Returns: this The node group, with the specified nodes added. Exceptions Error if any of the nodes are not on the chart."
  },
  "api/notebook-sdk.app.inodegroupeditor.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.html",
    "title": "app.INodeGroupEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor app.INodeGroupEditor interface A set of methods for modifying the contents and position of a node group. Signature: interface INodeGroupEditor Introduced: version 1.8 Methods Method Description addNodes(nodes) Adds nodes to the group. removeNodes(nodes) Removes nodes from the group. If the group is empty after the mutation is committed, the group itself is removed. setBorderColor(color) Sets or resets the color of the node group. setBorderWidth(width) Sets or resets the border width of the node group. setColor(color) Sets or resets the background color of the node group. setImage(href, description) Sets or resets the image for the node group. setIsMinimized(isMinimized) Sets whether the node group is minimized, so nodes within the group are hidden, or maximized where they are shown. setLabel(label) Sets or resets the label of the node group."
  },
  "api/notebook-sdk.app.inodegroupeditor.removenodes.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.removenodes.html",
    "title": "app.INodeGroupEditor.removeNodes() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor > removeNodes app.INodeGroupEditor.removeNodes() method Removes nodes from the group. If the group is empty after the mutation is committed, the group itself is removed. Signature: removeNodes(nodes: NodeSpecifier | Iterable<NodeSpecifier>): this; Introduced: version 1.8 Parameters Parameter Type Description nodes NodeSpecifier | Iterable< NodeSpecifier <!-- --> > The nodes to remove from the group. Returns: this The node group, with the specified nodes removed."
  },
  "api/notebook-sdk.app.inodegroupeditor.setbordercolor.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.setbordercolor.html",
    "title": "app.INodeGroupEditor.setBorderColor() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor > setBorderColor app.INodeGroupEditor.setBorderColor() method Sets or resets the color of the node group. Signature: setBorderColor(color: string | undefined | null): this; Introduced: version 1.8 Parameters Parameter Type Description color string | undefined | null The color to set, or null to remove the border, or undefined to reset the border color to the theme default. Returns: this The node group, with its border color set to the specified value. Exceptions Error if the specified value is not in a form that CSS supports, such as a hexadecimal number, an rgb() value, or a color name, or null or undefined <!-- --> ."
  },
  "api/notebook-sdk.app.inodegroupeditor.setborderwidth.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.setborderwidth.html",
    "title": "app.INodeGroupEditor.setBorderWidth() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor > setBorderWidth app.INodeGroupEditor.setBorderWidth() method Sets or resets the border width of the node group. Signature: setBorderWidth(width: number | undefined): this; Introduced: version 1.8 Parameters Parameter Type Description width number | undefined The width to set, or undefined to reset the width to the theme default. Returns: this The node group, with its border width set to the specified value. Exceptions Error if the specified value is not either a positive number or undefined <!-- --> . Remarks A size of 0 is valid, and indicates that the node group has no border - equivalent to setBorderColor(null) <!-- --> ."
  },
  "api/notebook-sdk.app.inodegroupeditor.setcolor.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.setcolor.html",
    "title": "app.INodeGroupEditor.setColor() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor > setColor app.INodeGroupEditor.setColor() method Sets or resets the background color of the node group. Signature: setColor(color: string | undefined | null): this; Introduced: version 1.8 Parameters Parameter Type Description color string | undefined | null The color to set, or null to remove the background, or undefined to reset the background color to the theme default. Returns: this The node group, with its background color set to the specified value. Exceptions Error if the specified value is not in a form that CSS supports, such as a hexadecimal number, an rgb() value, or a color name, or null or undefined <!-- --> ."
  },
  "api/notebook-sdk.app.inodegroupeditor.setimage.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.setimage.html",
    "title": "app.INodeGroupEditor.setImage() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor > setImage app.INodeGroupEditor.setImage() method Sets or resets the image for the node group. Signature: setImage(href: string | undefined, description?: string): this; Introduced: version 1.8 Parameters Parameter Type Description href string | undefined The URL of the image to use, or 'undefined' to indicate there is no image. description string (Optional) A description of the image. Returns: this The node group, with its image set to the specified URL and description. Remarks If an image is not set, then a default image will be used when a label is also set."
  },
  "api/notebook-sdk.app.inodegroupeditor.setisminimized.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.setisminimized.html",
    "title": "app.INodeGroupEditor.setIsMinimized() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor > setIsMinimized app.INodeGroupEditor.setIsMinimized() method Sets whether the node group is minimized, so nodes within the group are hidden, or maximized where they are shown. Signature: setIsMinimized(isMinimized: boolean): this; Introduced: version 1.8 Parameters Parameter Type Description isMinimized boolean true to minimize the group, false to maximize it. Returns: this The node group, with its minimized state set to the specified value."
  },
  "api/notebook-sdk.app.inodegroupeditor.setlabel.html": {
    "href": "api/notebook-sdk.app.inodegroupeditor.setlabel.html",
    "title": "app.INodeGroupEditor.setLabel() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > INodeGroupEditor > setLabel app.INodeGroupEditor.setLabel() method Sets or resets the label of the node group. Signature: setLabel(label: string | undefined): this; Introduced: version 1.8 Parameters Parameter Type Description label string | undefined The label to set, or undefined to indicate there is no label. Returns: this The node group, with its label set to the specified value."
  },
  "api/notebook-sdk.app.ipendingnodegroup.html": {
    "href": "api/notebook-sdk.app.ipendingnodegroup.html",
    "title": "app.IPendingNodeGroup interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IPendingNodeGroup app.IPendingNodeGroup interface A node group that has been created in a mutation handler, but has not yet been added to a chart. Signature: interface IPendingNodeGroup extends INodeGroupEditor Extends: INodeGroupEditor Introduced: version 1.8 Properties Property Modifiers Type Description id readonly visual.ElementId Gets the identifier of the node group. Methods Method Description addNodes(nodes) Adds nodes to the group. (Inherited from INodeGroupEditor <!-- --> ) removeNodes(nodes) Removes nodes from the group. If the group is empty after the mutation is committed, the group itself is removed. (Inherited from INodeGroupEditor <!-- --> ) setBorderColor(color) Sets or resets the color of the node group. (Inherited from INodeGroupEditor <!-- --> ) setBorderWidth(width) Sets or resets the border width of the node group. (Inherited from INodeGroupEditor <!-- --> ) setColor(color) Sets or resets the background color of the node group. (Inherited from INodeGroupEditor <!-- --> ) setImage(href, description) Sets or resets the image for the node group. (Inherited from INodeGroupEditor <!-- --> ) setIsMinimized(isMinimized) Sets whether the node group is minimized, so nodes within the group are hidden, or maximized where they are shown. (Inherited from INodeGroupEditor <!-- --> ) setLabel(label) Sets or resets the label of the node group. (Inherited from INodeGroupEditor <!-- --> )"
  },
  "api/notebook-sdk.app.ipendingnodegroup.id.html": {
    "href": "api/notebook-sdk.app.ipendingnodegroup.id.html",
    "title": "app.IPendingNodeGroup.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IPendingNodeGroup > id app.IPendingNodeGroup.id property Gets the identifier of the node group. Signature: readonly id: visual.ElementId; Returns: visual.ElementId Introduced: version 1.8"
  },
  "api/notebook-sdk.app.ipendingrecord.html": {
    "href": "api/notebook-sdk.app.ipendingrecord.html",
    "title": "app.IPendingRecord interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IPendingRecord app.IPendingRecord interface A record that has been created in a mutation handler, but has not yet been added to a chart. Signature: interface IPendingRecord extends IRecordEditor Extends: IRecordEditor Introduced: version 1.1 Properties Property Modifiers Type Description recordId readonly records.AnalyzeRecordId Gets the identifier of the record. Methods Method Description addNote(noteData) Adds a new note to the record. (Inherited from IRecordEditor <!-- --> ) addSourceIdentifier(identifierData) Adds a new source identifier to the record. (Inherited from IRecordEditor <!-- --> ) addSourceReference(refData) Adds a new source reference to the record. (Inherited from IRecordEditor <!-- --> ) removeNote(note) Removes a note from the record. (Inherited from IRecordEditor <!-- --> ) removeSourceReference(ref) Removes a source reference from the record. (Inherited from IRecordEditor <!-- --> ) replaceNote(note, noteData) Replaces an existing note on the record with a new one. (Inherited from IRecordEditor <!-- --> ) replaceSecurity(security) Replaces the record's security settings with a new set. (Inherited from IRecordEditor <!-- --> ) replaceSourceReference(ref, refData) Replaces an existing source reference on the record with a new one. (Inherited from IRecordEditor <!-- --> ) setLinkDirection(linkDirection) Sets the direction of a link record. (Inherited from IRecordEditor <!-- --> ) setProperties(properties) Sets or clears the values of properties on the record. (Inherited from IRecordEditor <!-- --> )"
  },
  "api/notebook-sdk.app.ipendingrecord.recordid.html": {
    "href": "api/notebook-sdk.app.ipendingrecord.recordid.html",
    "title": "app.IPendingRecord.recordId property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IPendingRecord > recordId app.IPendingRecord.recordId property Gets the identifier of the record. Signature: readonly recordId: records.AnalyzeRecordId; Returns: records.AnalyzeRecordId Introduced: version 1.1"
  },
  "api/notebook-sdk.app.irecordeditor.addnote.html": {
    "href": "api/notebook-sdk.app.irecordeditor.addnote.html",
    "title": "app.IRecordEditor.addNote() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > addNote app.IRecordEditor.addNote() method Adds a new note to the record. Signature: addNote(noteData: records.INoteData): this; Introduced: version 1.1 Parameters Parameter Type Description noteData records.INoteData The data for the new note. Returns: this This record, with the new note in place."
  },
  "api/notebook-sdk.app.irecordeditor.addsourceidentifier.html": {
    "href": "api/notebook-sdk.app.irecordeditor.addsourceidentifier.html",
    "title": "app.IRecordEditor.addSourceIdentifier() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > addSourceIdentifier app.IRecordEditor.addSourceIdentifier() method Adds a new source identifier to the record. Signature: addSourceIdentifier(identifierData: records.ISourceIdentifierData): this; Introduced: version 1.1 Parameters Parameter Type Description identifierData records.ISourceIdentifierData The data for the new source identifier. Returns: this This record, with the new source identifier in place."
  },
  "api/notebook-sdk.app.irecordeditor.addsourcereference.html": {
    "href": "api/notebook-sdk.app.irecordeditor.addsourcereference.html",
    "title": "app.IRecordEditor.addSourceReference() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > addSourceReference app.IRecordEditor.addSourceReference() method Adds a new source reference to the record. Signature: addSourceReference(refData: records.ISourceReferenceData): this; Introduced: version 1.1 Parameters Parameter Type Description refData records.ISourceReferenceData The data for the new source reference. Returns: this This record, with the new source reference in place."
  },
  "api/notebook-sdk.app.irecordeditor.html": {
    "href": "api/notebook-sdk.app.irecordeditor.html",
    "title": "app.IRecordEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor app.IRecordEditor interface A set of methods for modifying the contents of a record. Signature: interface IRecordEditor Introduced: version 1.1 Methods Method Description addNote(noteData) Adds a new note to the record. addSourceIdentifier(identifierData) Adds a new source identifier to the record. addSourceReference(refData) Adds a new source reference to the record. removeNote(note) Removes a note from the record. removeSourceReference(ref) Removes a source reference from the record. replaceNote(note, noteData) Replaces an existing note on the record with a new one. replaceSecurity(security) Replaces the record's security settings with a new set. replaceSourceReference(ref, refData) Replaces an existing source reference on the record with a new one. setLinkDirection(linkDirection) Sets the direction of a link record. setProperties(properties) Sets or clears the values of properties on the record."
  },
  "api/notebook-sdk.app.irecordeditor.removenote.html": {
    "href": "api/notebook-sdk.app.irecordeditor.removenote.html",
    "title": "app.IRecordEditor.removeNote() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > removeNote app.IRecordEditor.removeNote() method Removes a note from the record. Signature: removeNote(note: NoteSpecifier): this; Introduced: version 1.1 Parameters Parameter Type Description note NoteSpecifier The note to remove. Returns: this This record, without the note."
  },
  "api/notebook-sdk.app.irecordeditor.removesourcereference.html": {
    "href": "api/notebook-sdk.app.irecordeditor.removesourcereference.html",
    "title": "app.IRecordEditor.removeSourceReference() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > removeSourceReference app.IRecordEditor.removeSourceReference() method Removes a source reference from the record. Signature: removeSourceReference(ref: SourceReferenceSpecifier): this; Introduced: version 1.1 Parameters Parameter Type Description ref SourceReferenceSpecifier The source reference to remove. Returns: this This record, without the source reference."
  },
  "api/notebook-sdk.app.irecordeditor.replacenote.html": {
    "href": "api/notebook-sdk.app.irecordeditor.replacenote.html",
    "title": "app.IRecordEditor.replaceNote() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > replaceNote app.IRecordEditor.replaceNote() method Replaces an existing note on the record with a new one. Signature: replaceNote(note: NoteSpecifier, noteData: records.INoteData): this; Introduced: version 1.1 Parameters Parameter Type Description note NoteSpecifier The note to replace. noteData records.INoteData The data for the new note. Returns: this This record, with the new note in place."
  },
  "api/notebook-sdk.app.irecordeditor.replacesecurity.html": {
    "href": "api/notebook-sdk.app.irecordeditor.replacesecurity.html",
    "title": "app.IRecordEditor.replaceSecurity() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > replaceSecurity app.IRecordEditor.replaceSecurity() method Replaces the record's security settings with a new set. Signature: replaceSecurity(security: readonly records.ISecuritySetting[] | data.IKeyedReadOnlyCollection<schema.SecurityDimensionId, records.ISecuritySetting>): this; Introduced: version 1.1 Parameters Parameter Type Description security readonly records.ISecuritySetting <!-- --> [] | data.IKeyedReadOnlyCollection <!-- --> < schema.SecurityDimensionId <!-- --> , records.ISecuritySetting <!-- --> > The new security settings. Returns: this This record, with the new security settings in place."
  },
  "api/notebook-sdk.app.irecordeditor.replacesourcereference.html": {
    "href": "api/notebook-sdk.app.irecordeditor.replacesourcereference.html",
    "title": "app.IRecordEditor.replaceSourceReference() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > replaceSourceReference app.IRecordEditor.replaceSourceReference() method Replaces an existing source reference on the record with a new one. Signature: replaceSourceReference(ref: SourceReferenceSpecifier, refData: records.ISourceReferenceData): this; Introduced: version 1.1 Parameters Parameter Type Description ref SourceReferenceSpecifier The source reference to replace. refData records.ISourceReferenceData The data for the new source reference. Returns: this This record, with the new source reference in place."
  },
  "api/notebook-sdk.app.irecordeditor.setlinkdirection.html": {
    "href": "api/notebook-sdk.app.irecordeditor.setlinkdirection.html",
    "title": "app.IRecordEditor.setLinkDirection() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > setLinkDirection app.IRecordEditor.setLinkDirection() method Sets the direction of a link record. Signature: setLinkDirection(linkDirection: data.LinkDirection): this; Introduced: version 1.1 Parameters Parameter Type Description linkDirection data.LinkDirection The link direction to set. Returns: this This record, with the new link direction in place. Remarks Calling this method on a entity record will throw an error."
  },
  "api/notebook-sdk.app.irecordeditor.setproperties.html": {
    "href": "api/notebook-sdk.app.irecordeditor.setproperties.html",
    "title": "app.IRecordEditor.setProperties() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IRecordEditor > setProperties app.IRecordEditor.setProperties() method Sets or clears the values of properties on the record. Signature: setProperties(properties: EditRecordPropertiesSpecifier): this; Introduced: version 1.1 Parameters Parameter Type Description properties EditRecordPropertiesSpecifier The types and values of the properties to set (or null to clear them). Returns: this This record, with the edited properties in place."
  },
  "api/notebook-sdk.app.iselectioneditor.add.html": {
    "href": "api/notebook-sdk.app.iselectioneditor.add.html",
    "title": "app.ISelectionEditor.add() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISelectionEditor > add app.ISelectionEditor.add() method Adds the specified records to the chart selection. Signature: add(records: Iterable<RecordSpecifier> | RecordSpecifier): void; Introduced: version 1.1 Parameters Parameter Type Description records Iterable< RecordSpecifier <!-- --> > | RecordSpecifier The records to add to the selection. Returns: void Exceptions Error if one or more of the records does not exist on the chart."
  },
  "api/notebook-sdk.app.iselectioneditor.clear.html": {
    "href": "api/notebook-sdk.app.iselectioneditor.clear.html",
    "title": "app.ISelectionEditor.clear() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISelectionEditor > clear app.ISelectionEditor.clear() method Clears the chart selection, so that no records are selected. Signature: clear(): void; Returns: void Introduced: version 1.1"
  },
  "api/notebook-sdk.app.iselectioneditor.html": {
    "href": "api/notebook-sdk.app.iselectioneditor.html",
    "title": "app.ISelectionEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISelectionEditor app.ISelectionEditor interface A set of methods that can change the chart selection. Signature: interface ISelectionEditor Introduced: version 1.1 Methods Method Description add(records) Adds the specified records to the chart selection. clear() Clears the chart selection, so that no records are selected. invert() Inverts the chart selection, so that previously unselected records are selected, and vice versa. remove(records) Removes the specified records from the chart selection. selectAll() Selects all the records on the chart. set(records) Replaces the chart selection with one that contains the specified records."
  },
  "api/notebook-sdk.app.iselectioneditor.invert.html": {
    "href": "api/notebook-sdk.app.iselectioneditor.invert.html",
    "title": "app.ISelectionEditor.invert() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISelectionEditor > invert app.ISelectionEditor.invert() method Inverts the chart selection, so that previously unselected records are selected, and vice versa. Signature: invert(): void; Returns: void Introduced: version 1.2"
  },
  "api/notebook-sdk.app.iselectioneditor.remove.html": {
    "href": "api/notebook-sdk.app.iselectioneditor.remove.html",
    "title": "app.ISelectionEditor.remove() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISelectionEditor > remove app.ISelectionEditor.remove() method Removes the specified records from the chart selection. Signature: remove(records: Iterable<RecordSpecifier> | RecordSpecifier): void; Introduced: version 1.1 Parameters Parameter Type Description records Iterable< RecordSpecifier <!-- --> > | RecordSpecifier The records to remove from the selection. Returns: void Exceptions Error if one or more of the records does not exist on the chart."
  },
  "api/notebook-sdk.app.iselectioneditor.selectall.html": {
    "href": "api/notebook-sdk.app.iselectioneditor.selectall.html",
    "title": "app.ISelectionEditor.selectAll() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISelectionEditor > selectAll app.ISelectionEditor.selectAll() method Selects all the records on the chart. Signature: selectAll(): void; Returns: void Introduced: version 1.1"
  },
  "api/notebook-sdk.app.iselectioneditor.set.html": {
    "href": "api/notebook-sdk.app.iselectioneditor.set.html",
    "title": "app.ISelectionEditor.set() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISelectionEditor > set app.ISelectionEditor.set() method Replaces the chart selection with one that contains the specified records. Signature: set(records: Iterable<RecordSpecifier> | RecordSpecifier): void; Introduced: version 1.1 Parameters Parameter Type Description records Iterable< RecordSpecifier <!-- --> > | RecordSpecifier The records to use in the new selection. Returns: void Exceptions Error if one or more of the records does not exist on the chart."
  },
  "api/notebook-sdk.app.iservercomponents.baseurl.html": {
    "href": "api/notebook-sdk.app.iservercomponents.baseurl.html",
    "title": "app.IServerComponents.baseUrl property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IServerComponents > baseUrl app.IServerComponents.baseUrl property Gets the base URL of the i2 Analyze server. For example, http://localhost:3000/opal/ <!-- --> . Signature: readonly baseUrl: string; Returns: string Introduced: version 1.1 Remarks The base URL always ends with a forward slash, and never contains query parameters."
  },
  "api/notebook-sdk.app.iservercomponents.hasgateway.html": {
    "href": "api/notebook-sdk.app.iservercomponents.hasgateway.html",
    "title": "app.IServerComponents.hasGateway property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IServerComponents > hasGateway app.IServerComponents.hasGateway property Indicates whether the i2 Connect gateway is available on the application server. Signature: readonly hasGateway: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iservercomponents.hasinfostore.html": {
    "href": "api/notebook-sdk.app.iservercomponents.hasinfostore.html",
    "title": "app.IServerComponents.hasInfoStore property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IServerComponents > hasInfoStore app.IServerComponents.hasInfoStore property Indicates whether the Information Store is available on the application server. Signature: readonly hasInfoStore: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iservercomponents.html": {
    "href": "api/notebook-sdk.app.iservercomponents.html",
    "title": "app.IServerComponents interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IServerComponents app.IServerComponents interface A collection of properties that describe how the application server is configured. Signature: interface IServerComponents Introduced: version 1.0 Properties Property Modifiers Type Description baseUrl readonly string Gets the base URL of the i2 Analyze server. For example, http://localhost:3000/opal/ . hasGateway readonly boolean Indicates whether the i2 Connect gateway is available on the application server. hasInfoStore readonly boolean Indicates whether the Information Store is available on the application server."
  },
  "api/notebook-sdk.app.istatus.html": {
    "href": "api/notebook-sdk.app.istatus.html",
    "title": "app.IStatus interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IStatus app.IStatus interface A set of methods for changing a status display while an asynchronous mutation is running. Signature: interface IStatus Introduced: version 1.1 Methods Method Description setMessage(text) Sets the status message in the blocking spinner display."
  },
  "api/notebook-sdk.app.istatus.setmessage.html": {
    "href": "api/notebook-sdk.app.istatus.setmessage.html",
    "title": "app.IStatus.setMessage() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IStatus > setMessage app.IStatus.setMessage() method Sets the status message in the blocking spinner display. Signature: setMessage(text: string): void; Introduced: version 1.1 Parameters Parameter Type Description text string The text to display. Returns: void Remarks Use this method to update users about the progress of a particularly long-running operation. In the user interface, the text you provide is prefixed by the name of your plug-in."
  },
  "api/notebook-sdk.app.isubscriptionoptions.dispatchnow.html": {
    "href": "api/notebook-sdk.app.isubscriptionoptions.dispatchnow.html",
    "title": "app.ISubscriptionOptions.dispatchNow property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISubscriptionOptions > dispatchNow app.ISubscriptionOptions.dispatchNow property Indicates whether the listened-for event is dispatched at the same time as subscription takes place. Signature: readonly dispatchNow?: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.app.isubscriptionoptions.html": {
    "href": "api/notebook-sdk.app.isubscriptionoptions.html",
    "title": "app.ISubscriptionOptions interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISubscriptionOptions app.ISubscriptionOptions interface A set of options that can influence the execution of an event listener. Signature: interface ISubscriptionOptions extends ITransactionOptions Extends: ITransactionOptions Introduced: version 1.0 Properties Property Modifiers Type Description dispatchNow? readonly boolean (Optional) Indicates whether the listened-for event is dispatched at the same time as subscription takes place. signal? readonly AbortSignal (Optional) Gets a signal that can abort execution of a callback function. (Inherited from ITransactionOptions <!-- --> )"
  },
  "api/notebook-sdk.app.isuccessreport.details.html": {
    "href": "api/notebook-sdk.app.isuccessreport.details.html",
    "title": "app.ISuccessReport.details property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISuccessReport > details app.ISuccessReport.details property Gets or sets some additional information about the completed mutations. Signature: details: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.app.isuccessreport.html": {
    "href": "api/notebook-sdk.app.isuccessreport.html",
    "title": "app.ISuccessReport interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISuccessReport app.ISuccessReport interface A report on the result of an entirely successful set of mutations. The report is typically displayed through a transient, 'toast'-style notification. Signature: interface ISuccessReport Introduced: version 1.1 Properties Property Modifiers Type Description details string Gets or sets some additional information about the completed mutations. type 'success' Gets or sets the type of the report, which must be 'success' for an ISuccessReport ."
  },
  "api/notebook-sdk.app.isuccessreport.type.html": {
    "href": "api/notebook-sdk.app.isuccessreport.type.html",
    "title": "app.ISuccessReport.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ISuccessReport > type app.ISuccessReport.type property Gets or sets the type of the report, which must be 'success' for an ISuccessReport <!-- --> . Signature: type: 'success'; Returns: 'success' Introduced: version 1.1"
  },
  "api/notebook-sdk.app.itheme.appearance.html": {
    "href": "api/notebook-sdk.app.itheme.appearance.html",
    "title": "app.ITheme.appearance property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITheme > appearance app.ITheme.appearance property Gets the overall appearance of the user interface when the theme is active. Signature: readonly appearance: 'light' | 'dark'; Returns: 'light' | 'dark' Introduced: version 1.0"
  },
  "api/notebook-sdk.app.itheme.html": {
    "href": "api/notebook-sdk.app.itheme.html",
    "title": "app.ITheme interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITheme app.ITheme interface A theme for the i2 Notebook user interface. Signature: interface ITheme Introduced: version 1.0 Properties Property Modifiers Type Description appearance readonly 'light' | 'dark' Gets the overall appearance of the user interface when the theme is active. themeName readonly ThemeName Gets the name of the theme."
  },
  "api/notebook-sdk.app.itheme.themename.html": {
    "href": "api/notebook-sdk.app.itheme.themename.html",
    "title": "app.ITheme.themeName property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITheme > themeName app.ITheme.themeName property Gets the name of the theme. Signature: readonly themeName: ThemeName; Returns: ThemeName Introduced: version 1.0"
  },
  "api/notebook-sdk.app.itrackedmutationcommit.actiondisplayname.html": {
    "href": "api/notebook-sdk.app.itrackedmutationcommit.actiondisplayname.html",
    "title": "app.ITrackedMutationCommit.actionDisplayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutationCommit > actionDisplayName app.ITrackedMutationCommit.actionDisplayName property Gets or sets the name to use for the entry in the undo stack that represents the commit. Signature: actionDisplayName: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.app.itrackedmutationcommit.html": {
    "href": "api/notebook-sdk.app.itrackedmutationcommit.html",
    "title": "app.ITrackedMutationCommit interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutationCommit app.ITrackedMutationCommit interface A set of information that accompanies a request to commit a set of tracked mutations. Signature: interface ITrackedMutationCommit extends IMutationCommitBase Extends: IMutationCommitBase Introduced: version 1.1 Properties Property Modifiers Type Description actionDisplayName string Gets or sets the name to use for the entry in the undo stack that represents the commit. report? IMutationReport (Optional) Gets or sets a optional report that describes the result of one or more mutations. (Inherited from IMutationCommitBase <!-- --> ) type 'commit' Gets or sets the type of the request, which must be \"commit\" for commit requests. (Inherited from IMutationCommitBase <!-- --> )"
  },
  "api/notebook-sdk.app.itrackedmutationinfo.html": {
    "href": "api/notebook-sdk.app.itrackedmutationinfo.html",
    "title": "app.ITrackedMutationInfo type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutationInfo app.ITrackedMutationInfo type A response from a tracked mutation handler, which indicates whether the mutation should be committed or rolled back. Signature: type ITrackedMutationInfo = ITrackedMutationCommit | IMutationRollback; References: ITrackedMutationCommit <!-- --> , IMutationRollback Introduced: version 1.1"
  },
  "api/notebook-sdk.app.itrackedmutations.addentityrecord.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.addentityrecord.html",
    "title": "app.ITrackedMutations.addEntityRecord() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > addEntityRecord app.ITrackedMutations.addEntityRecord() method Creates an entity record that is added to the chart on committal. Signature: addEntityRecord(recordTemplate: IChartEntityRecordData): IPendingRecord; Introduced: version 1.1 Parameters Parameter Type Description recordTemplate IChartEntityRecordData The data from which to create the record. Returns: IPendingRecord The new, pending record."
  },
  "api/notebook-sdk.app.itrackedmutations.addentitytype.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.addentitytype.html",
    "title": "app.ITrackedMutations.addEntityType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > addEntityType app.ITrackedMutations.addEntityType() method Creates a custom entity type that is added to the chart on committal. Signature: addEntityType(typeTemplate: schema.IChartEntityTypeData): schema.IPendingItemType; Introduced: version 1.6 Parameters Parameter Type Description typeTemplate schema.IChartEntityTypeData The data for creating the custom entity type. Returns: schema.IPendingItemType The new, pending item type."
  },
  "api/notebook-sdk.app.itrackedmutations.addlinkrecord.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.addlinkrecord.html",
    "title": "app.ITrackedMutations.addLinkRecord() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > addLinkRecord app.ITrackedMutations.addLinkRecord() method Creates a link record that is added to the chart on committal. Signature: addLinkRecord(recordTemplate: IChartLinkRecordData): IPendingRecord; Introduced: version 1.1 Parameters Parameter Type Description recordTemplate IChartLinkRecordData The data from which to create the record. Returns: IPendingRecord The new, pending record."
  },
  "api/notebook-sdk.app.itrackedmutations.addlinktype.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.addlinktype.html",
    "title": "app.ITrackedMutations.addLinkType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > addLinkType app.ITrackedMutations.addLinkType() method Creates a custom link type that is added to the chart on committal. Signature: addLinkType(typeTemplate: schema.IChartLinkTypeData): schema.IPendingItemType; Introduced: version 1.6 Parameters Parameter Type Description typeTemplate schema.IChartLinkTypeData The data for creating the custom link type. Returns: schema.IPendingItemType The new, pending item type."
  },
  "api/notebook-sdk.app.itrackedmutations.addnodegroup.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.addnodegroup.html",
    "title": "app.ITrackedMutations.addNodeGroup() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > addNodeGroup app.ITrackedMutations.addNodeGroup() method Creates a node group from the specified nodes. Signature: addNodeGroup(nodes: Iterable<NodeSpecifier>): IPendingNodeGroup; Introduced: version 1.8 Parameters Parameter Type Description nodes Iterable< NodeSpecifier <!-- --> > The nodes to add to the group. Returns: IPendingNodeGroup The node group, with the specified nodes added. Exceptions Error if any of the nodes are not on the chart."
  },
  "api/notebook-sdk.app.itrackedmutations.addrecordgroup.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.addrecordgroup.html",
    "title": "app.ITrackedMutations.addRecordGroup() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > addRecordGroup app.ITrackedMutations.addRecordGroup() method Adds the records from a record group to the chart. Signature: addRecordGroup(recordGroupId: AnalyzeRecordGroupId, selectionOption: SelectionOption): void; Introduced: version 1.1 Parameters Parameter Type Description recordGroupId AnalyzeRecordGroupId The identifier of the record group to add. selectionOption SelectionOption The effect on chart selection of adding the record group. Returns: void"
  },
  "api/notebook-sdk.app.itrackedmutations.editedge.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.editedge.html",
    "title": "app.ITrackedMutations.editEdge() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > editEdge app.ITrackedMutations.editEdge() method Gets an object with methods for editing the appearance of an edge. Signature: editEdge(edge: EdgeSpecifier): IEdgeEditor; Introduced: version 1.2 Parameters Parameter Type Description edge EdgeSpecifier The edge to be edited. Returns: IEdgeEditor The edge-editing object."
  },
  "api/notebook-sdk.app.itrackedmutations.edititemtype.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.edititemtype.html",
    "title": "app.ITrackedMutations.editItemType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > editItemType app.ITrackedMutations.editItemType() method Gets an object with methods for editing a schema or custom item type. Signature: editItemType(itemType: schema.ItemTypeSpecifier): schema.IItemTypeEditor | schema.IPropertyTypesEditor; Introduced: version 1.6 Parameters Parameter Type Description itemType schema.ItemTypeSpecifier The item type to be edited. Returns: schema.IItemTypeEditor | schema.IPropertyTypesEditor The type-editing object."
  },
  "api/notebook-sdk.app.itrackedmutations.editnode.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.editnode.html",
    "title": "app.ITrackedMutations.editNode() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > editNode app.ITrackedMutations.editNode() method Gets an object with methods for editing the appearance of a node. Signature: editNode(node: NodeSpecifier): INodeEditor; Introduced: version 1.2 Parameters Parameter Type Description node NodeSpecifier The node to be edited. Returns: INodeEditor The node-editing object."
  },
  "api/notebook-sdk.app.itrackedmutations.editnodegroup.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.editnodegroup.html",
    "title": "app.ITrackedMutations.editNodeGroup() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > editNodeGroup app.ITrackedMutations.editNodeGroup() method Gets an object with methods for editing a node group. Signature: editNodeGroup(nodeGroup: NodeGroupSpecifier): INodeGroupEditor; Introduced: version 1.8 Parameters Parameter Type Description nodeGroup NodeGroupSpecifier The node group to be edited. Returns: INodeGroupEditor The node-group-editing object."
  },
  "api/notebook-sdk.app.itrackedmutations.editrecord.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.editrecord.html",
    "title": "app.ITrackedMutations.editRecord() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > editRecord app.ITrackedMutations.editRecord() method Gets an object with methods for editing a record. Signature: editRecord(record: RecordSpecifier): IRecordEditor; Introduced: version 1.1 Parameters Parameter Type Description record RecordSpecifier The record to be edited. Returns: IRecordEditor The record-editing object."
  },
  "api/notebook-sdk.app.itrackedmutations.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.html",
    "title": "app.ITrackedMutations interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations app.ITrackedMutations interface A set of methods for performing tracked mutations, which require an entry in the undo stack. Signature: interface ITrackedMutations extends IMutationsBase Extends: IMutationsBase Introduced: version 1.1 Properties Property Modifiers Type Description selection readonly ISelectionEditor Gets an object that provides methods for modifying chart selection. (Inherited from IMutationsBase <!-- --> ) status readonly IStatus Gets an object that provides methods for communicating progress information to users. (Inherited from IMutationsBase <!-- --> ) valueFactory readonly IValueFactory Gets a library of functions for creating objects to use in mutations. view readonly IViewEditor Gets an object that provides methods for modifying the chart view. (Inherited from IMutationsBase <!-- --> ) Methods Method Description addEntityRecord(recordTemplate) Creates an entity record that is added to the chart on committal. addEntityType(typeTemplate) Creates a custom entity type that is added to the chart on committal. addLinkRecord(recordTemplate) Creates a link record that is added to the chart on committal. addLinkType(typeTemplate) Creates a custom link type that is added to the chart on committal. addNodeGroup(nodes) Creates a node group from the specified nodes. addRecordGroup(recordGroupId, selectionOption) Adds the records from a record group to the chart. editEdge(edge) Gets an object with methods for editing the appearance of an edge. editItemType(itemType) Gets an object with methods for editing a schema or custom item type. editNode(node) Gets an object with methods for editing the appearance of a node. editNodeGroup(nodeGroup) Gets an object with methods for editing a node group. editRecord(record) Gets an object with methods for editing a record. moveSelectedNodesRelative(centerDelta) Moves all the nodes that contain selected records by the same displacement. removeElements(elements) Removes elements from the chart. removeFromNodeGroup(nodes) Removes nodes from their node group. If the group is empty after the mutation is committed, the group itself is removed. removeNodeGroups(nodeGroups) Removes node groups from the chart. Removing a node group does not remove the nodes that were part of it. removeRecords(records) Removes records from the chart. removeSelectedRecords() Removes the currently selected records from the chart. setNodeCenter(node, position) Moves a node to a particular location on the chart."
  },
  "api/notebook-sdk.app.itrackedmutations.moveselectednodesrelative.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.moveselectednodesrelative.html",
    "title": "app.ITrackedMutations.moveSelectedNodesRelative() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > moveSelectedNodesRelative app.ITrackedMutations.moveSelectedNodesRelative() method Moves all the nodes that contain selected records by the same displacement. Signature: moveSelectedNodesRelative(centerDelta: { xDelta: number; yDelta: number; }): void; Introduced: version 1.1 Parameters Parameter Type Description centerDelta { xDelta: number; yDelta: number; } The displacement on the x and y axes, in chart coordinates. Returns: void"
  },
  "api/notebook-sdk.app.itrackedmutations.removeelements.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.removeelements.html",
    "title": "app.ITrackedMutations.removeElements() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > removeElements app.ITrackedMutations.removeElements() method Removes elements from the chart. Signature: removeElements(elements: ElementSpecifier | Iterable<ElementSpecifier>): boolean; Introduced: version 1.1 Parameters Parameter Type Description elements ElementSpecifier | Iterable< ElementSpecifier <!-- --> > The element or elements to be removed. Returns: boolean true if one or more elements were successfully removed from the chart; false if none of the elements existed."
  },
  "api/notebook-sdk.app.itrackedmutations.removefromnodegroup.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.removefromnodegroup.html",
    "title": "app.ITrackedMutations.removeFromNodeGroup() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > removeFromNodeGroup app.ITrackedMutations.removeFromNodeGroup() method Removes nodes from their node group. If the group is empty after the mutation is committed, the group itself is removed. Signature: removeFromNodeGroup(nodes: NodeSpecifier | Iterable<NodeSpecifier>): boolean; Introduced: version 1.8 Parameters Parameter Type Description nodes NodeSpecifier | Iterable< NodeSpecifier <!-- --> > The node or nodes to be removed. Returns: boolean true if one or more nodes were successfully removed from the group; false if none of the nodes existed."
  },
  "api/notebook-sdk.app.itrackedmutations.removenodegroups.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.removenodegroups.html",
    "title": "app.ITrackedMutations.removeNodeGroups() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > removeNodeGroups app.ITrackedMutations.removeNodeGroups() method Removes node groups from the chart. Removing a node group does not remove the nodes that were part of it. Signature: removeNodeGroups(nodeGroups: NodeGroupSpecifier | Iterable<NodeGroupSpecifier>): boolean; Introduced: version 1.8 Parameters Parameter Type Description nodeGroups NodeGroupSpecifier | Iterable< NodeGroupSpecifier <!-- --> > The node group or groups to be removed. Returns: boolean true if one or more node groups were successfully removed from the chart; false if none of the node groups existed."
  },
  "api/notebook-sdk.app.itrackedmutations.removerecords.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.removerecords.html",
    "title": "app.ITrackedMutations.removeRecords() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > removeRecords app.ITrackedMutations.removeRecords() method Removes records from the chart. Signature: removeRecords(records: RecordSpecifier | Iterable<RecordSpecifier>): boolean; Introduced: version 1.1 Parameters Parameter Type Description records RecordSpecifier | Iterable< RecordSpecifier <!-- --> > The record or records to be removed. Returns: boolean true if one or more records were successfully removed from the chart; false if none of the records existed."
  },
  "api/notebook-sdk.app.itrackedmutations.removeselectedrecords.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.removeselectedrecords.html",
    "title": "app.ITrackedMutations.removeSelectedRecords() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > removeSelectedRecords app.ITrackedMutations.removeSelectedRecords() method Removes the currently selected records from the chart. Signature: removeSelectedRecords(): void; Returns: void Introduced: version 1.1"
  },
  "api/notebook-sdk.app.itrackedmutations.setnodecenter.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.setnodecenter.html",
    "title": "app.ITrackedMutations.setNodeCenter() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > setNodeCenter app.ITrackedMutations.setNodeCenter() method Warning: This API is now obsolete. Deprecated since version 1.2. Use app.INodeEditor.setCenter() instead. Moves a node to a particular location on the chart. Signature: setNodeCenter(node: visual.INode | visual.ElementId, position: visual.IPosition): void; Introduced: version 1.1 Parameters Parameter Type Description node visual.INode | visual.ElementId The node to be moved. position visual.IPosition The location to move the node to. Returns: void Exceptions Error if the node is not on the chart, or if the x- or y-coordinate of the location is not a number."
  },
  "api/notebook-sdk.app.itrackedmutations.valuefactory.html": {
    "href": "api/notebook-sdk.app.itrackedmutations.valuefactory.html",
    "title": "app.ITrackedMutations.valueFactory property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITrackedMutations > valueFactory app.ITrackedMutations.valueFactory property Gets a library of functions for creating objects to use in mutations. Signature: readonly valueFactory: IValueFactory; Returns: IValueFactory Introduced: version 1.1"
  },
  "api/notebook-sdk.app.itransactionoptions.html": {
    "href": "api/notebook-sdk.app.itransactionoptions.html",
    "title": "app.ITransactionOptions interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITransactionOptions app.ITransactionOptions interface A set of options that enable control over a callback function during execution. Signature: interface ITransactionOptions Introduced: version 1.0 Properties Property Modifiers Type Description signal? readonly AbortSignal (Optional) Gets a signal that can abort execution of a callback function."
  },
  "api/notebook-sdk.app.itransactionoptions.signal.html": {
    "href": "api/notebook-sdk.app.itransactionoptions.signal.html",
    "title": "app.ITransactionOptions.signal property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ITransactionOptions > signal app.ITransactionOptions.signal property Gets a signal that can abort execution of a callback function. Signature: readonly signal?: AbortSignal; Returns: AbortSignal Introduced: version 1.0 Remarks You can create an AbortSignal from a browser's AbortController object."
  },
  "api/notebook-sdk.app.iuntrackedmutationcommit.html": {
    "href": "api/notebook-sdk.app.iuntrackedmutationcommit.html",
    "title": "app.IUntrackedMutationCommit interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IUntrackedMutationCommit app.IUntrackedMutationCommit interface A set of information that accompanies a request to commit a set of untracked mutations. Signature: interface IUntrackedMutationCommit extends IMutationCommitBase Extends: IMutationCommitBase Introduced: version 1.1 Properties Property Modifiers Type Description report? IMutationReport (Optional) Gets or sets a optional report that describes the result of one or more mutations. (Inherited from IMutationCommitBase <!-- --> ) type 'commit' Gets or sets the type of the request, which must be \"commit\" for commit requests. (Inherited from IMutationCommitBase <!-- --> )"
  },
  "api/notebook-sdk.app.iuntrackedmutationinfo.html": {
    "href": "api/notebook-sdk.app.iuntrackedmutationinfo.html",
    "title": "app.IUntrackedMutationInfo type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IUntrackedMutationInfo app.IUntrackedMutationInfo type A response from an untracked mutation handler, which indicates whether the mutation should be committed or rolled back. Signature: type IUntrackedMutationInfo = IUntrackedMutationCommit | IMutationRollback; References: IUntrackedMutationCommit <!-- --> , IMutationRollback Introduced: version 1.1"
  },
  "api/notebook-sdk.app.iuntrackedmutations.editedgesummary.html": {
    "href": "api/notebook-sdk.app.iuntrackedmutations.editedgesummary.html",
    "title": "app.IUntrackedMutations.editEdgeSummary() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IUntrackedMutations > editEdgeSummary app.IUntrackedMutations.editEdgeSummary() method Gets an object with methods for editing the appearance of an edge summary. Signature: editEdgeSummary(edge: EdgeSummarySpecifier): IEdgeSummaryEditor; Introduced: version 1.6 Parameters Parameter Type Description edge EdgeSummarySpecifier The edge summary to edit. Returns: IEdgeSummaryEditor The edge-summary-editing object."
  },
  "api/notebook-sdk.app.iuntrackedmutations.html": {
    "href": "api/notebook-sdk.app.iuntrackedmutations.html",
    "title": "app.IUntrackedMutations interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IUntrackedMutations app.IUntrackedMutations interface A set of methods for performing untracked mutations, which do not require an entry in the undo stack. Signature: interface IUntrackedMutations extends IMutationsBase Extends: IMutationsBase Introduced: version 1.1 Properties Property Modifiers Type Description selection readonly ISelectionEditor Gets an object that provides methods for modifying chart selection. (Inherited from IMutationsBase <!-- --> ) status readonly IStatus Gets an object that provides methods for communicating progress information to users. (Inherited from IMutationsBase <!-- --> ) view readonly IViewEditor Gets an object that provides methods for modifying the chart view. (Inherited from IMutationsBase <!-- --> ) Methods Method Description editEdgeSummary(edge) Gets an object with methods for editing the appearance of an edge summary."
  },
  "api/notebook-sdk.app.iuserandpermissions.commandpermissions.html": {
    "href": "api/notebook-sdk.app.iuserandpermissions.commandpermissions.html",
    "title": "app.IUserAndPermissions.commandPermissions property",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IUserAndPermissions > commandPermissions app.IUserAndPermissions.commandPermissions property Gets the list of command access control permissions for the user. Signature: readonly commandPermissions: string[]; Returns: string[] Introduced: version 1.0"
  },
  "api/notebook-sdk.app.iuserandpermissions.html": {
    "href": "api/notebook-sdk.app.iuserandpermissions.html",
    "title": "app.IUserAndPermissions interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IUserAndPermissions app.IUserAndPermissions interface An i2 Notebook user. Signature: interface IUserAndPermissions extends data.IUser Extends: data.IUser Introduced: version 1.0 Properties Property Modifiers Type Description commandPermissions readonly string[] Gets the list of command access control permissions for the user. displayName readonly string Gets the display name of the user. (Inherited from IUser <!-- --> ) principalName readonly string Gets the principal name (username) of the user. (Inherited from IUser <!-- --> )"
  },
  "api/notebook-sdk.app.ivaluefactory.createdecimal.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createdecimal.html",
    "title": "app.IValueFactory.createDecimal() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createDecimal app.IValueFactory.createDecimal() method Creates a decimal value from a number or a string. Signature: createDecimal(value: number | string): data.IDecimal; Introduced: version 1.1 Parameters Parameter Type Description value number | string The number or string to initialize the decimal value from. Returns: data.IDecimal The new decimal value. Exceptions Error if the value was NaN <!-- --> , or too large to be a decimal, or an invalid string."
  },
  "api/notebook-sdk.app.ivaluefactory.creategeopoint.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.creategeopoint.html",
    "title": "app.IValueFactory.createGeoPoint() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createGeoPoint app.IValueFactory.createGeoPoint() method Creates a data.IGeoPoint object from a pair of latitude and longitude values. Signature: createGeoPoint(latitude: number, longitude: number): data.IGeoPoint; Introduced: version 1.1 Parameters Parameter Type Description latitude number The latitude of the geospatial position, in the range from -90 to +90 degrees. longitude number The longitude of the geospatial position, in the range from -180 to 180 degrees. Returns: data.IGeoPoint The new data.IGeoPoint object. Exceptions Error if either the latitude or the longitude was out of range."
  },
  "api/notebook-sdk.app.ivaluefactory.creategeopoint_1.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.creategeopoint_1.html",
    "title": "app.IValueFactory.createGeoPoint() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createGeoPoint app.IValueFactory.createGeoPoint() method Creates a data.IGeoPoint object from a data.IGeoPointData object. Signature: createGeoPoint(data: data.IGeoPointData): data.IGeoPoint; Introduced: version 1.1 Parameters Parameter Type Description data data.IGeoPointData A set of data that specifies the geospatial position. Returns: data.IGeoPoint The new data.IGeoPoint object. Exceptions Error if the specified data was out of range or otherwise not valid."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaldate.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaldate.html",
    "title": "app.IValueFactory.createLocalDate() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalDate app.IValueFactory.createLocalDate() method Creates a local date object (that does not have a time or a time zone) from year/month/day information. Signature: createLocalDate(year: number, month: number, day: number): data.ILocalDate; Introduced: version 1.1 Parameters Parameter Type Description year number The full year of the date; for example, 1973 . month number The (1-based) month of the year (1-12). day number The (1-based) day of the month (1-31). Returns: data.ILocalDate The new local date object."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaldate_1.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaldate_1.html",
    "title": "app.IValueFactory.createLocalDate() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalDate app.IValueFactory.createLocalDate() method Creates a local date object (that does not have a time or a time zone) from a JavaScript Date object. Signature: createLocalDate(jsDate: Date): data.ILocalDate; Introduced: version 1.1 Parameters Parameter Type Description jsDate Date A JavaScript Date , from which the 'local' (not UTC) date values are used. Returns: data.ILocalDate The new local date object."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaldate_2.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaldate_2.html",
    "title": "app.IValueFactory.createLocalDate() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalDate app.IValueFactory.createLocalDate() method Creates a local date object (that does not have a time or a time zone) from an ISO 8601 string ('yyyy-mm-dd'). Signature: createLocalDate(iso8601: string): data.ILocalDate; Introduced: version 1.1 Parameters Parameter Type Description iso8601 string An ISO 8601-formatted string that represents the date. Returns: data.ILocalDate The new local date object. Exceptions Error if the string was not in valid ISO 8601 format."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaldatetime.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaldatetime.html",
    "title": "app.IValueFactory.createLocalDateTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalDateTime app.IValueFactory.createLocalDateTime() method Creates a local date-time object (that does not have a time zone) from year/month/day/hour/minute/second information. Signature: createLocalDateTime(year: number, month: number, day: number, hour: number, minute: number, second: number, milli?: number): data.ILocalDateTime; Introduced: version 1.1 Parameters Parameter Type Description year number The full year of the date; for example, 1973 . month number The (1-based) month of the year (1-12). day number The (1-based) day of the month (1-31). hour number The hour of the day (0-23). minute number The minutes of the hour (0-59). second number The seconds of the minute (0-59). milli number (Optional) The milliseconds of the second (0-999). Returns: data.ILocalDateTime The new local date-time object."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaldatetime_1.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaldatetime_1.html",
    "title": "app.IValueFactory.createLocalDateTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalDateTime app.IValueFactory.createLocalDateTime() method Creates a local date-time object (that does not have a time zone) from a JavaScript Date object. Signature: createLocalDateTime(jsDate: Date): data.ILocalDateTime; Introduced: version 1.1 Parameters Parameter Type Description jsDate Date A JavaScript Date , from which the 'local' (not UTC) date and time values are used. Returns: data.ILocalDateTime The new local date-time object."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaldatetime_2.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaldatetime_2.html",
    "title": "app.IValueFactory.createLocalDateTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalDateTime app.IValueFactory.createLocalDateTime() method Creates a local date-time object (that does not have a time zone) from a local date and a local time object. Signature: createLocalDateTime(date: data.ILocalDate, time: data.ILocalTime): data.ILocalDateTime; Introduced: version 1.1 Parameters Parameter Type Description date data.ILocalDate A local date. time data.ILocalTime A local time. Returns: data.ILocalDateTime The new local date-time object."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaldatetime_3.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaldatetime_3.html",
    "title": "app.IValueFactory.createLocalDateTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalDateTime app.IValueFactory.createLocalDateTime() method Creates a local date-time object (that does not have a time zone) from an ISO 8601 string ('yyyy-mm-ddThh:mm:ss' or 'yyyy-mm-ddThh:mm:ss.sss'). Signature: createLocalDateTime(iso8601: string): data.ILocalDateTime; Introduced: version 1.1 Parameters Parameter Type Description iso8601 string An ISO 8601-formatted string that represents the date and time. Returns: data.ILocalDateTime The new local date-time object. Exceptions Error if the string was not in valid ISO 8601 format."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaltime.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaltime.html",
    "title": "app.IValueFactory.createLocalTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalTime app.IValueFactory.createLocalTime() method Creates a local time object (that does not have a date or a time zone) from hour/minute/second information. Signature: createLocalTime(hour: number, minute: number, second: number, milli?: number): data.ILocalTime; Introduced: version 1.1 Parameters Parameter Type Description hour number The hour of the day (0-23). minute number The minutes of the hour (0-59). second number The seconds of the minute (0-59). milli number (Optional) The milliseconds of the second (0-999). Returns: data.ILocalTime The new local time object."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaltime_1.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaltime_1.html",
    "title": "app.IValueFactory.createLocalTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalTime app.IValueFactory.createLocalTime() method Creates a local time object (that does not have a date or a time zone) from a JavaScript Date object. Signature: createLocalTime(jsDate: Date): data.ILocalTime; Introduced: version 1.1 Parameters Parameter Type Description jsDate Date A JavaScript Date , from which the 'local' (not UTC) time values are used. Returns: data.ILocalTime The new local time object."
  },
  "api/notebook-sdk.app.ivaluefactory.createlocaltime_2.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createlocaltime_2.html",
    "title": "app.IValueFactory.createLocalTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createLocalTime app.IValueFactory.createLocalTime() method Creates a local time object (that does not have a date or a time zone) from an ISO 8601 string ('hh:mm:ss' or 'hh:mm:ss.sss'). Signature: createLocalTime(iso8601: string): data.ILocalTime; Introduced: version 1.1 Parameters Parameter Type Description iso8601 string An ISO 8601-formatted string that represents the time. Returns: data.ILocalTime The new local time object. Exceptions Error if the string was not in valid ISO 8601 format."
  },
  "api/notebook-sdk.app.ivaluefactory.createsecuritysetting.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createsecuritysetting.html",
    "title": "app.IValueFactory.createSecuritySetting() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createSecuritySetting app.IValueFactory.createSecuritySetting() method Creates a security setting that you can use to configure record security. Signature: createSecuritySetting(data: records.ISecuritySettingData): records.ISecuritySetting; Introduced: version 1.1 Parameters Parameter Type Description data records.ISecuritySettingData The data for the new security setting. Returns: records.ISecuritySetting The new security setting. Exceptions Error if the security dimension or dimension values in the data do not exist in the security schema. Remarks You can use the same security setting to configure the security of several records."
  },
  "api/notebook-sdk.app.ivaluefactory.createzoneddatetime.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createzoneddatetime.html",
    "title": "app.IValueFactory.createZonedDateTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createZonedDateTime app.IValueFactory.createZonedDateTime() method Creates a date-time object that has a time zone from a local date, a local time, and a time zone. Signature: createZonedDateTime(date: data.ILocalDate, time: data.ILocalTime, timeZone: data.ITimeZone | data.TimeZoneId, isDst: boolean): data.IZonedDateTime; Introduced: version 1.1 Parameters Parameter Type Description date data.ILocalDate A local date. time data.ILocalTime A local time. timeZone data.ITimeZone | data.TimeZoneId A time zone, or a time zone identifier. isDst boolean true if the date-time is in daylight saving time for the specified time zone; false otherwise. This value is especially important for date-time values that are ambiguous, such as during the period when clocks go back from DST to not-DST and the same local time occurs twice. Returns: data.IZonedDateTime The new date-time object. Exceptions Error if timeZone did not specify a valid time zone."
  },
  "api/notebook-sdk.app.ivaluefactory.createzoneddatetime_1.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createzoneddatetime_1.html",
    "title": "app.IValueFactory.createZonedDateTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createZonedDateTime app.IValueFactory.createZonedDateTime() method Creates a date-time object that has a time zone from a local date-time (or a JavaScript Date object) and a time zone. Signature: createZonedDateTime(dateTime: Date | data.ILocalDateTime, timeZone: data.ITimeZone | data.TimeZoneId, isDst: boolean): data.IZonedDateTime; Introduced: version 1.1 Parameters Parameter Type Description dateTime Date | data.ILocalDateTime A local date-time, or a JavaScript Date . timeZone data.ITimeZone | data.TimeZoneId A time zone, or a time zone identifier. isDst boolean true if the date-time is in daylight saving time for the specified time zone; false otherwise. This value is especially important for date-time values that are ambiguous, such as during the period when clocks go back from DST to not-DST and the same local time occurs twice. Returns: data.IZonedDateTime The new date-time object. Exceptions Error if timeZone did not specify a valid time zone."
  },
  "api/notebook-sdk.app.ivaluefactory.createzoneddatetime_2.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.createzoneddatetime_2.html",
    "title": "app.IValueFactory.createZonedDateTime() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory > createZonedDateTime app.IValueFactory.createZonedDateTime() method Creates a date-time object that has a time zone from an ISO 8601 string ('yyyy-mm-ddThh:mm:ss' or 'yyyy-mm-ddThh:mm:ss.sss') and a time zone. Signature: createZonedDateTime(iso8601: string, timeZone: data.ITimeZone | data.TimeZoneId, isDst: boolean): data.IZonedDateTime; Introduced: version 1.1 Parameters Parameter Type Description iso8601 string An ISO 8601-formatted string that represents the date and time. timeZone data.ITimeZone | data.TimeZoneId A time zone, or a time zone identifier. isDst boolean true if the date-time is in daylight saving time for the specified time zone; false otherwise. This value is especially important for date-time values that are ambiguous, such as during the period when clocks go back from DST to not-DST and the same local time occurs twice. Returns: data.IZonedDateTime The new date-time object. Exceptions Error if the string was not in valid ISO 8601 format, or timeZone did not specify a valid time zone."
  },
  "api/notebook-sdk.app.ivaluefactory.html": {
    "href": "api/notebook-sdk.app.ivaluefactory.html",
    "title": "app.IValueFactory interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IValueFactory app.IValueFactory interface A set of utility functions for creating property and other values that can be reused across records. Signature: interface IValueFactory Introduced: version 1.1 Methods Method Description createDecimal(value) Creates a decimal value from a number or a string. createGeoPoint(latitude, longitude) Creates a data.IGeoPoint object from a pair of latitude and longitude values. createGeoPoint(data) Creates a data.IGeoPoint object from a data.IGeoPointData object. createLocalDate(year, month, day) Creates a local date object (that does not have a time or a time zone) from year/month/day information. createLocalDate(jsDate) Creates a local date object (that does not have a time or a time zone) from a JavaScript Date object. createLocalDate(iso8601) Creates a local date object (that does not have a time or a time zone) from an ISO 8601 string ('yyyy-mm-dd'). createLocalDateTime(year, month, day, hour, minute, second, milli) Creates a local date-time object (that does not have a time zone) from year/month/day/hour/minute/second information. createLocalDateTime(jsDate) Creates a local date-time object (that does not have a time zone) from a JavaScript Date object. createLocalDateTime(date, time) Creates a local date-time object (that does not have a time zone) from a local date and a local time object. createLocalDateTime(iso8601) Creates a local date-time object (that does not have a time zone) from an ISO 8601 string ('yyyy-mm-ddThh:mm:ss' or 'yyyy-mm-ddThh:mm:ss.sss'). createLocalTime(hour, minute, second, milli) Creates a local time object (that does not have a date or a time zone) from hour/minute/second information. createLocalTime(jsDate) Creates a local time object (that does not have a date or a time zone) from a JavaScript Date object. createLocalTime(iso8601) Creates a local time object (that does not have a date or a time zone) from an ISO 8601 string ('hh:mm:ss' or 'hh:mm:ss.sss'). createSecuritySetting(data) Creates a security setting that you can use to configure record security. createZonedDateTime(date, time, timeZone, isDst) Creates a date-time object that has a time zone from a local date, a local time, and a time zone. createZonedDateTime(dateTime, timeZone, isDst) Creates a date-time object that has a time zone from a local date-time (or a JavaScript Date object) and a time zone. createZonedDateTime(iso8601, timeZone, isDst) Creates a date-time object that has a time zone from an ISO 8601 string ('yyyy-mm-ddThh:mm:ss' or 'yyyy-mm-ddThh:mm:ss.sss') and a time zone."
  },
  "api/notebook-sdk.app.ivieweditor.fittochart.html": {
    "href": "api/notebook-sdk.app.ivieweditor.fittochart.html",
    "title": "app.IViewEditor.fitToChart() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IViewEditor > fitToChart app.IViewEditor.fitToChart() method Adjusts the position and zoom of the chart so that all elements on it are visible. Signature: fitToChart(options?: chart.IFitConstraints): void; Introduced: version 1.1 Parameters Parameter Type Description options chart.IFitConstraints (Optional) A set of constraints that place restrictions on the change to the viewport. Returns: void"
  },
  "api/notebook-sdk.app.ivieweditor.fittoheight.html": {
    "href": "api/notebook-sdk.app.ivieweditor.fittoheight.html",
    "title": "app.IViewEditor.fitToHeight() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IViewEditor > fitToHeight app.IViewEditor.fitToHeight() method Adjusts the position and zoom of the chart so that the full range of elements on the y axis is visible. Signature: fitToHeight(options?: chart.IFitConstraints): void; Introduced: version 1.1 Parameters Parameter Type Description options chart.IFitConstraints (Optional) A set of constraints that place restrictions on the change to the viewport. Returns: void"
  },
  "api/notebook-sdk.app.ivieweditor.fittoitems.html": {
    "href": "api/notebook-sdk.app.ivieweditor.fittoitems.html",
    "title": "app.IViewEditor.fitToItems() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IViewEditor > fitToItems app.IViewEditor.fitToItems() method Adjusts the position and zoom of the chart so that a specific collection of elements is visible. Signature: fitToItems(items: IElementsAndRecords, options?: chart.IFitConstraints): void; Introduced: version 1.1 Parameters Parameter Type Description items IElementsAndRecords The elements to make visible, and the records whose containing elements are to be visible. options chart.IFitConstraints (Optional) A set of constraints that place restrictions on the change to the viewport. Returns: void"
  },
  "api/notebook-sdk.app.ivieweditor.fittoselection.html": {
    "href": "api/notebook-sdk.app.ivieweditor.fittoselection.html",
    "title": "app.IViewEditor.fitToSelection() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IViewEditor > fitToSelection app.IViewEditor.fitToSelection() method Adjusts the position and zoom of the chart so that all elements containing selected records are visible. Signature: fitToSelection(options?: chart.IFitConstraints): void; Introduced: version 1.1 Parameters Parameter Type Description options chart.IFitConstraints (Optional) A set of constraints that place restrictions on the change to the viewport. Returns: void"
  },
  "api/notebook-sdk.app.ivieweditor.html": {
    "href": "api/notebook-sdk.app.ivieweditor.html",
    "title": "app.IViewEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IViewEditor app.IViewEditor interface A set of methods that change the chart view. Signature: interface IViewEditor Introduced: version 1.1 Methods Method Description fitToChart(options) Adjusts the position and zoom of the chart so that all elements on it are visible. fitToHeight(options) Adjusts the position and zoom of the chart so that the full range of elements on the y axis is visible. fitToItems(items, options) Adjusts the position and zoom of the chart so that a specific collection of elements is visible. fitToSelection(options) Adjusts the position and zoom of the chart so that all elements containing selected records are visible. setViewport(viewport) Sets the location on the chart that appears in the center of the viewport, and the zoom level."
  },
  "api/notebook-sdk.app.ivieweditor.setviewport.html": {
    "href": "api/notebook-sdk.app.ivieweditor.setviewport.html",
    "title": "app.IViewEditor.setViewport() method",
    "keywords": "Home > @i2analyze/notebook-sdk > app > IViewEditor > setViewport app.IViewEditor.setViewport() method Sets the location on the chart that appears in the center of the viewport, and the zoom level. Signature: setViewport(viewport: chart.IViewportData): void; Introduced: version 1.1 Parameters Parameter Type Description viewport chart.IViewportData The new position and zoom level of the chart in the viewport. Returns: void"
  },
  "api/notebook-sdk.app.mutationresponsehandler.html": {
    "href": "api/notebook-sdk.app.mutationresponsehandler.html",
    "title": "app.MutationResponseHandler type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > MutationResponseHandler app.MutationResponseHandler type A function that receives the results of a mutation. Signature: type MutationResponseHandler = (error: Error | null, result: IMutationResult, application: IApplicationContents) => void; References: IMutationResult <!-- --> , IApplicationContents Introduced: version 1.1 Parameters Parameter Description error The Error that was thrown if the mutation failed or was aborted. result An IMutationResult that contains the results of the mutation. application The contents of the application after the mutation was performed."
  },
  "api/notebook-sdk.app.nodegroupspecifier.html": {
    "href": "api/notebook-sdk.app.nodegroupspecifier.html",
    "title": "app.NodeGroupSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > NodeGroupSpecifier app.NodeGroupSpecifier type A common specifier for a node group, for use in mutation APIs. Signature: type NodeGroupSpecifier = visual.ElementId | visual.INodeGroup; References: visual.ElementId <!-- --> , visual.INodeGroup Introduced: version 1.8"
  },
  "api/notebook-sdk.app.nodespecifier.html": {
    "href": "api/notebook-sdk.app.nodespecifier.html",
    "title": "app.NodeSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > NodeSpecifier app.NodeSpecifier type A common specifier for a node, for use in mutation APIs. Signature: type NodeSpecifier = visual.ElementId | visual.INode; References: visual.ElementId <!-- --> , visual.INode Introduced: version 1.2"
  },
  "api/notebook-sdk.app.notespecifier.html": {
    "href": "api/notebook-sdk.app.notespecifier.html",
    "title": "app.NoteSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > NoteSpecifier app.NoteSpecifier type A common specifier for a note, for use in mutation APIs. Signature: type NoteSpecifier = records.NoteId | records.INote; References: records.NoteId <!-- --> , records.INote Introduced: version 1.1"
  },
  "api/notebook-sdk.app.recordpropertiesspecifier.html": {
    "href": "api/notebook-sdk.app.recordpropertiesspecifier.html",
    "title": "app.RecordPropertiesSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > RecordPropertiesSpecifier app.RecordPropertiesSpecifier type A common specifier for the properties of new records, for use in mutation APIs. Signature: type RecordPropertiesSpecifier = Record<schema.ChartPropertyTypeId, data.PropertyValue> | Iterable<[schema.PropertyTypeSpecifier, data.PropertyValue]>; References: schema.ChartPropertyTypeId <!-- --> , data.PropertyValue <!-- --> , schema.PropertyTypeSpecifier Introduced: version 1.1"
  },
  "api/notebook-sdk.app.recordspecifier.html": {
    "href": "api/notebook-sdk.app.recordspecifier.html",
    "title": "app.RecordSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > RecordSpecifier app.RecordSpecifier type A common specifier for a record, for use in mutation APIs. Signature: type RecordSpecifier = records.AnalyzeRecordId | records.IChartRecord | IPendingRecord; References: records.AnalyzeRecordId <!-- --> , records.IChartRecord <!-- --> , IPendingRecord Introduced: version 1.1"
  },
  "api/notebook-sdk.app.selectionoption.html": {
    "href": "api/notebook-sdk.app.selectionoption.html",
    "title": "app.SelectionOption type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > SelectionOption app.SelectionOption type The effect on chart selection of adding a record group to the chart. Signature: type SelectionOption = 'addRecordsToSelection' | 'setSelectionToRecords' | 'setSelectionToNewRecords'; Introduced: version 1.1 Remarks addRecordsToSelection adds the records from the group to the current selection; setSelectionToRecords sets the selection to the records from the group; setSelectionToNewRecords sets the selection to records from the group that were not already on the chart."
  },
  "api/notebook-sdk.app.sourcereferencespecifier.html": {
    "href": "api/notebook-sdk.app.sourcereferencespecifier.html",
    "title": "app.SourceReferenceSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > SourceReferenceSpecifier app.SourceReferenceSpecifier type A common specifier for a source reference, for use in mutation APIs. Signature: type SourceReferenceSpecifier = records.SourceReferenceId | records.ISourceReference; References: records.SourceReferenceId <!-- --> , records.ISourceReference Introduced: version 1.1"
  },
  "api/notebook-sdk.app.themename.html": {
    "href": "api/notebook-sdk.app.themename.html",
    "title": "app.ThemeName type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > ThemeName app.ThemeName type The names of themes for the i2 Notebook user interface. Signature: type ThemeName = 'carbonwhite' | 'carbongray10' | 'carbongray90' | 'carbongray100'; Introduced: version 1.0"
  },
  "api/notebook-sdk.app.trackedmutationhandler.html": {
    "href": "api/notebook-sdk.app.trackedmutationhandler.html",
    "title": "app.TrackedMutationHandler type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > TrackedMutationHandler app.TrackedMutationHandler type A function that performs tracked mutations. Signature: type TrackedMutationHandler = (application: IApplicationContents, mutations: ITrackedMutations, cancelation: ICancelation) => ITrackedMutationInfo | Promise<ITrackedMutationInfo>; References: IApplicationContents <!-- --> , ITrackedMutations <!-- --> , ICancelation <!-- --> , ITrackedMutationInfo Introduced: version 1.1 Parameters Parameter Description application The contents of the application that the function can operate on. mutations A collection of methods that can perform tracked mutations. cancelation An object that detects when a user requests cancelation of the mutations. Remarks This function must not maintain references to charts or any of their objects after the work completes."
  },
  "api/notebook-sdk.app.transactionhandler.html": {
    "href": "api/notebook-sdk.app.transactionhandler.html",
    "title": "app.TransactionHandler type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > TransactionHandler app.TransactionHandler type A callback function that performs read-only work on the application or its contents. Signature: type TransactionHandler = (applicationContents: IApplicationContents) => void | Promise<void>; References: IApplicationContents Introduced: version 1.0 Remarks This function must not maintain references to charts or any of their objects after the work completes."
  },
  "api/notebook-sdk.app.untrackedmutationhandler.html": {
    "href": "api/notebook-sdk.app.untrackedmutationhandler.html",
    "title": "app.UntrackedMutationHandler type",
    "keywords": "Home > @i2analyze/notebook-sdk > app > UntrackedMutationHandler app.UntrackedMutationHandler type A function that performs untracked mutations. Signature: type UntrackedMutationHandler = (application: IApplicationContents, mutations: IUntrackedMutations, cancelation: ICancelation) => IUntrackedMutationInfo | Promise<IUntrackedMutationInfo>; References: IApplicationContents <!-- --> , IUntrackedMutations <!-- --> , ICancelation <!-- --> , IUntrackedMutationInfo Introduced: version 1.1 Parameters Parameter Description application The contents of the application that the function can operate on. mutations A collection of methods that can perform untracked mutations. cancelation An object that detects when a user requests cancelation of the mutations. Remarks This function must not maintain references to charts or any of their objects after the work completes."
  },
  "api/notebook-sdk.chart.changelistener.html": {
    "href": "api/notebook-sdk.chart.changelistener.html",
    "title": "chart.ChangeListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChangeListener chart.ChangeListener type A callback function that handles chart data change events. Signature: type ChangeListener = (change: IChartChange & app.IChangeSource, applicationContents: app.IApplicationContents) => void; References: IChartChange <!-- --> , app.IChangeSource <!-- --> , app.IApplicationContents Introduced: version 1.0 Parameters Parameter Description change The change that took place on the chart and caused the callback to be invoked, and the source of the data change. applicationContents The contents of the application, including the current chart."
  },
  "api/notebook-sdk.chart.charteventmap.chartchange.html": {
    "href": "api/notebook-sdk.chart.charteventmap.chartchange.html",
    "title": "chart.ChartEventMap.chartchange property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventMap > chartchange chart.ChartEventMap.chartchange property Gets the type of the callback method that listens for \"chartchange\" events. Signature: readonly chartchange: ChangeListener; Returns: ChangeListener Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.charteventmap.chartschemachange.html": {
    "href": "api/notebook-sdk.chart.charteventmap.chartschemachange.html",
    "title": "chart.ChartEventMap.chartschemachange property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventMap > chartschemachange chart.ChartEventMap.chartschemachange property Gets the type of the callback method that listens for \"chartschemachange\" events. Signature: readonly chartschemachange: ChartSchemaChangeListener; Returns: ChartSchemaChangeListener Introduced: version 1.5"
  },
  "api/notebook-sdk.chart.charteventmap.chartselectionchange.html": {
    "href": "api/notebook-sdk.chart.charteventmap.chartselectionchange.html",
    "title": "chart.ChartEventMap.chartselectionchange property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventMap > chartselectionchange chart.ChartEventMap.chartselectionchange property Gets the type of the callback method that listens for \"chartselectionchange\" events. Signature: readonly chartselectionchange: SelectionListener; Returns: SelectionListener Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.charteventmap.chartviewchange.html": {
    "href": "api/notebook-sdk.chart.charteventmap.chartviewchange.html",
    "title": "chart.ChartEventMap.chartviewchange property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventMap > chartviewchange chart.ChartEventMap.chartviewchange property Gets the type of the callback method that listens for \"chartviewchange\" events. Signature: readonly chartviewchange: ViewListener; Returns: ViewListener Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.charteventmap.html": {
    "href": "api/notebook-sdk.chart.charteventmap.html",
    "title": "chart.ChartEventMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventMap chart.ChartEventMap interface A mapping of chart event types to their listener types. Signature: interface ChartEventMap Introduced: version 1.0 Properties Property Modifiers Type Description chartchange readonly ChangeListener Gets the type of the callback method that listens for \"chartchange\" events. chartschemachange readonly ChartSchemaChangeListener Gets the type of the callback method that listens for \"chartschemachange\" events. chartselectionchange readonly SelectionListener Gets the type of the callback method that listens for \"chartselectionchange\" events. chartviewchange readonly ViewListener Gets the type of the callback method that listens for \"chartviewchange\" events."
  },
  "api/notebook-sdk.chart.charteventoptionsmap.chartchange.html": {
    "href": "api/notebook-sdk.chart.charteventoptionsmap.chartchange.html",
    "title": "chart.ChartEventOptionsMap.chartchange property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventOptionsMap > chartchange chart.ChartEventOptionsMap.chartchange property Gets the type of the object that provides control over \"chartchange\" event listeners. Signature: readonly chartchange: app.ISubscriptionOptions; Returns: app.ISubscriptionOptions Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.charteventoptionsmap.chartschemachange.html": {
    "href": "api/notebook-sdk.chart.charteventoptionsmap.chartschemachange.html",
    "title": "chart.ChartEventOptionsMap.chartschemachange property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventOptionsMap > chartschemachange chart.ChartEventOptionsMap.chartschemachange property Gets the type of the object that provides control over \"chartschemachange\" event listeners. Signature: readonly chartschemachange: app.ISubscriptionOptions; Returns: app.ISubscriptionOptions Introduced: version 1.5"
  },
  "api/notebook-sdk.chart.charteventoptionsmap.chartselectionchange.html": {
    "href": "api/notebook-sdk.chart.charteventoptionsmap.chartselectionchange.html",
    "title": "chart.ChartEventOptionsMap.chartselectionchange property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventOptionsMap > chartselectionchange chart.ChartEventOptionsMap.chartselectionchange property Gets the type of the object that provides control over \"chartselectionchange\" event listeners. Signature: readonly chartselectionchange: app.ISubscriptionOptions; Returns: app.ISubscriptionOptions Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.charteventoptionsmap.chartviewchange.html": {
    "href": "api/notebook-sdk.chart.charteventoptionsmap.chartviewchange.html",
    "title": "chart.ChartEventOptionsMap.chartviewchange property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventOptionsMap > chartviewchange chart.ChartEventOptionsMap.chartviewchange property Gets the type of the object that provides control over \"chartviewchange\" event listeners. Signature: readonly chartviewchange: app.ISubscriptionOptions; Returns: app.ISubscriptionOptions Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.charteventoptionsmap.html": {
    "href": "api/notebook-sdk.chart.charteventoptionsmap.html",
    "title": "chart.ChartEventOptionsMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartEventOptionsMap chart.ChartEventOptionsMap interface A mapping of chart event types to their listener options types. Signature: interface ChartEventOptionsMap Introduced: version 1.0 Properties Property Modifiers Type Description chartchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartchange\" event listeners. chartschemachange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartschemachange\" event listeners. chartselectionchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartselectionchange\" event listeners. chartviewchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartviewchange\" event listeners."
  },
  "api/notebook-sdk.chart.chartid.html": {
    "href": "api/notebook-sdk.chart.chartid.html",
    "title": "chart.ChartId type",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartId chart.ChartId type An identifier of a chart in i2 Notebook. Signature: type ChartId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.chartschemachangelistener.html": {
    "href": "api/notebook-sdk.chart.chartschemachangelistener.html",
    "title": "chart.ChartSchemaChangeListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ChartSchemaChangeListener chart.ChartSchemaChangeListener type A callback function that handles chart schema change events. Signature: type ChartSchemaChangeListener = (chartSchemaChange: schema.IChartSchemaChange & app.IChangeSource, applicationContents: app.IApplicationContents) => void; References: schema.IChartSchemaChange <!-- --> , app.IChangeSource <!-- --> , app.IApplicationContents Introduced: version 1.5 Parameters Parameter Description chartSchemaChange The change in the chart schema that caused the callback to be invoked, and the source of the schema change. applicationContents The contents of the application, including the current chart."
  },
  "api/notebook-sdk.chart.html": {
    "href": "api/notebook-sdk.chart.html",
    "title": "chart namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > chart chart namespace The members of the chart namespace provide access to the contents of charts in the i2 Notebook web client, and enable handling of the events that arise as a result of changes to those contents. Signature: export declare namespace chart Introduced: version 1.0 Interfaces Interface Description ChartEventMap A mapping of chart event types to their listener types. ChartEventOptionsMap A mapping of chart event types to their listener options types. IChart An i2 Notebook chart. IChartChangeBase A change that has occurred to the data in a chart. IChartChangeMajor A major change that has occurred to the data on a chart. IChartChangeMinor A minor change that has occurred to the data on a chart. IChartView A description of the area of the chart that is currently in view. IFitConstraints Constraints that control a view-fitting operation. ISelection A selection on an i2 Notebook chart, which is record-oriented. IViewportData A set of data that defines a viewport. Type Aliases Type Alias Description ChangeListener A callback function that handles chart data change events. ChartId An identifier of a chart in i2 Notebook. ChartSchemaChangeListener A callback function that handles chart schema change events. IChartChange A change to the data in a chart in i2 Notebook. SelectionListener A callback function that handles chart selection events. ViewListener A callback function that handles chart view events."
  },
  "api/notebook-sdk.chart.ichart.edges.html": {
    "href": "api/notebook-sdk.chart.ichart.edges.html",
    "title": "chart.IChart.edges property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > edges chart.IChart.edges property Gets all the edges in the chart. Signature: readonly edges: data.IKeyedReadOnlyCollection<visual.ElementId, visual.IEdge>; Returns: data.IKeyedReadOnlyCollection < visual.ElementId , visual.IEdge > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.edgesummaries.html": {
    "href": "api/notebook-sdk.chart.ichart.edgesummaries.html",
    "title": "chart.IChart.edgeSummaries property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > edgeSummaries chart.IChart.edgeSummaries property Gets all the edge summaries in the chart. Signature: readonly edgeSummaries: data.IKeyedReadOnlyCollection<visual.ElementId, visual.IEdgeSummary>; Returns: data.IKeyedReadOnlyCollection < visual.ElementId , visual.IEdgeSummary > Introduced: version 1.6"
  },
  "api/notebook-sdk.chart.ichart.elements.html": {
    "href": "api/notebook-sdk.chart.ichart.elements.html",
    "title": "chart.IChart.elements property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > elements chart.IChart.elements property Gets all the nodes and edges in the chart. Signature: readonly elements: data.IKeyedReadOnlyCollection<visual.ElementId, visual.IElement>; Returns: data.IKeyedReadOnlyCollection < visual.ElementId , visual.IElement > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.ensurepropertiesfetched.html": {
    "href": "api/notebook-sdk.chart.ichart.ensurepropertiesfetched.html",
    "title": "chart.IChart.ensurePropertiesFetched() method",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > ensurePropertiesFetched chart.IChart.ensurePropertiesFetched() method Fetches property values from the server of the specified types for the specified records, if they have not previously been fetched. Signature: ensurePropertiesFetched(records: app.RecordSpecifier | Iterable<app.RecordSpecifier>, propertyTypes: schema.PropertyTypeSpecifier | Iterable<schema.PropertyTypeSpecifier>, signal?: AbortSignal): Promise<void>; Introduced: version 1.1 Parameters Parameter Type Description records app.RecordSpecifier | Iterable< app.RecordSpecifier <!-- --> > The records to update with fetched property values. propertyTypes schema.PropertyTypeSpecifier | Iterable< schema.PropertyTypeSpecifier <!-- --> > The types of the properties whose values are to be fetched if necessary. signal AbortSignal (Optional) A signal that the application uses to abort the operation. Returns: Promise<void> A promise that is fulfilled if the work completes successfully, or rejected if there is a problem performing it. Remarks Some property values might not be fetched immediately from the server, due to size or other factors. The property values that this method fetches become \"unfetched\" on subsequent record updates by the server. See also the hasUnfetchedProperties <!-- --> , isValueUnfetched() <!-- --> , and getUnfetchedPropertyTypes() members of records.IChartRecordBase <!-- --> ."
  },
  "api/notebook-sdk.chart.ichart.entityrecords.html": {
    "href": "api/notebook-sdk.chart.ichart.entityrecords.html",
    "title": "chart.IChart.entityRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > entityRecords chart.IChart.entityRecords property Gets all the entity records in the chart. Signature: readonly entityRecords: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartEntityRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartEntityRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.entitytypes.html": {
    "href": "api/notebook-sdk.chart.ichart.entitytypes.html",
    "title": "chart.IChart.entityTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > entityTypes chart.IChart.entityTypes property Gets all the entity types in use on the chart. Signature: readonly entityTypes: data.IKeyedReadOnlyCollection<schema.ChartItemTypeId, schema.IChartEntityType>; Returns: data.IKeyedReadOnlyCollection < schema.ChartItemTypeId , schema.IChartEntityType > Introduced: version 1.3"
  },
  "api/notebook-sdk.chart.ichart.getrecordsoftype.html": {
    "href": "api/notebook-sdk.chart.ichart.getrecordsoftype.html",
    "title": "chart.IChart.getRecordsOfType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > getRecordsOfType chart.IChart.getRecordsOfType() method Gets all the records in the chart that have the specified item type. Signature: getRecordsOfType(itemType: schema.ChartItemTypeSpecifier): data.IReadOnlyCollection<records.IChartRecord>; Introduced: version 1.3 Parameters Parameter Type Description itemType schema.ChartItemTypeSpecifier The chart item type of the records to retrieve. Returns: data.IReadOnlyCollection <!-- --> < records.IChartRecord <!-- --> > A collection of records that might be empty if the chart contains no records of the specified type."
  },
  "api/notebook-sdk.chart.ichart.html": {
    "href": "api/notebook-sdk.chart.ichart.html",
    "title": "chart.IChart interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart chart.IChart interface An i2 Notebook chart. Signature: interface IChart Introduced: version 1.0 Properties Property Modifiers Type Description edges readonly data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.IEdge <!-- --> > Gets all the edges in the chart. edgeSummaries readonly data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.IEdgeSummary <!-- --> > Gets all the edge summaries in the chart. elements readonly data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.IElement <!-- --> > Gets all the nodes and edges in the chart. entityRecords readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartEntityRecord <!-- --> > Gets all the entity records in the chart. entityTypes readonly data.IKeyedReadOnlyCollection <!-- --> < schema.ChartItemTypeId <!-- --> , schema.IChartEntityType <!-- --> > Gets all the entity types in use on the chart. id readonly ChartId Gets the identifier of the chart. itemTypes readonly data.IKeyedReadOnlyCollection <!-- --> < schema.ChartItemTypeId <!-- --> , schema.IChartItemType <!-- --> > Gets all the entity types and link types in use on the chart. linkRecords readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartLinkRecord <!-- --> > Gets all the link records in the chart. linkTypes readonly data.IKeyedReadOnlyCollection <!-- --> < schema.ChartItemTypeId <!-- --> , schema.IChartLinkType <!-- --> > Gets all the link types in use on the chart. name readonly string Gets the name of the chart. nodeGroups readonly data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.INodeGroup <!-- --> > Gets all the node groups in the chart. nodes readonly data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.INode <!-- --> > Gets all the nodes in the chart. records readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartRecord <!-- --> > Gets all the records in the chart. schema readonly schema.IChartSchema Gets the schema of the chart, which describes the types and properties that records in the chart can have. selection readonly ISelection Gets the current selection on the chart. Methods Method Description ensurePropertiesFetched(records, propertyTypes, signal) Fetches property values from the server of the specified types for the specified records, if they have not previously been fetched. getRecordsOfType(itemType) Gets all the records in the chart that have the specified item type."
  },
  "api/notebook-sdk.chart.ichart.id.html": {
    "href": "api/notebook-sdk.chart.ichart.id.html",
    "title": "chart.IChart.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > id chart.IChart.id property Gets the identifier of the chart. Signature: readonly id: ChartId; Returns: ChartId Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.itemtypes.html": {
    "href": "api/notebook-sdk.chart.ichart.itemtypes.html",
    "title": "chart.IChart.itemTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > itemTypes chart.IChart.itemTypes property Gets all the entity types and link types in use on the chart. Signature: readonly itemTypes: data.IKeyedReadOnlyCollection<schema.ChartItemTypeId, schema.IChartItemType>; Returns: data.IKeyedReadOnlyCollection < schema.ChartItemTypeId , schema.IChartItemType > Introduced: version 1.3"
  },
  "api/notebook-sdk.chart.ichart.linkrecords.html": {
    "href": "api/notebook-sdk.chart.ichart.linkrecords.html",
    "title": "chart.IChart.linkRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > linkRecords chart.IChart.linkRecords property Gets all the link records in the chart. Signature: readonly linkRecords: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartLinkRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartLinkRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.linktypes.html": {
    "href": "api/notebook-sdk.chart.ichart.linktypes.html",
    "title": "chart.IChart.linkTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > linkTypes chart.IChart.linkTypes property Gets all the link types in use on the chart. Signature: readonly linkTypes: data.IKeyedReadOnlyCollection<schema.ChartItemTypeId, schema.IChartLinkType>; Returns: data.IKeyedReadOnlyCollection < schema.ChartItemTypeId , schema.IChartLinkType > Introduced: version 1.3"
  },
  "api/notebook-sdk.chart.ichart.name.html": {
    "href": "api/notebook-sdk.chart.ichart.name.html",
    "title": "chart.IChart.name property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > name chart.IChart.name property Gets the name of the chart. Signature: readonly name: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.nodegroups.html": {
    "href": "api/notebook-sdk.chart.ichart.nodegroups.html",
    "title": "chart.IChart.nodeGroups property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > nodeGroups chart.IChart.nodeGroups property Gets all the node groups in the chart. Signature: readonly nodeGroups: data.IKeyedReadOnlyCollection<visual.ElementId, visual.INodeGroup>; Returns: data.IKeyedReadOnlyCollection < visual.ElementId , visual.INodeGroup > Introduced: version 1.8"
  },
  "api/notebook-sdk.chart.ichart.nodes.html": {
    "href": "api/notebook-sdk.chart.ichart.nodes.html",
    "title": "chart.IChart.nodes property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > nodes chart.IChart.nodes property Gets all the nodes in the chart. Signature: readonly nodes: data.IKeyedReadOnlyCollection<visual.ElementId, visual.INode>; Returns: data.IKeyedReadOnlyCollection < visual.ElementId , visual.INode > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.records.html": {
    "href": "api/notebook-sdk.chart.ichart.records.html",
    "title": "chart.IChart.records property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > records chart.IChart.records property Gets all the records in the chart. Signature: readonly records: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.schema.html": {
    "href": "api/notebook-sdk.chart.ichart.schema.html",
    "title": "chart.IChart.schema property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > schema chart.IChart.schema property Gets the schema of the chart, which describes the types and properties that records in the chart can have. Signature: readonly schema: schema.IChartSchema; Returns: schema.IChartSchema Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichart.selection.html": {
    "href": "api/notebook-sdk.chart.ichart.selection.html",
    "title": "chart.IChart.selection property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChart > selection chart.IChart.selection property Gets the current selection on the chart. Signature: readonly selection: ISelection; Returns: ISelection Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichartchange.html": {
    "href": "api/notebook-sdk.chart.ichartchange.html",
    "title": "chart.IChartChange type",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChange chart.IChartChange type A change to the data in a chart in i2 Notebook. Signature: type IChartChange = IChartChangeMajor | IChartChangeMinor; References: IChartChangeMajor <!-- --> , IChartChangeMinor Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichartchangebase.html": {
    "href": "api/notebook-sdk.chart.ichartchangebase.html",
    "title": "chart.IChartChangeBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeBase chart.IChartChangeBase interface A change that has occurred to the data in a chart. Signature: interface IChartChangeBase Introduced: version 1.0 Properties Property Modifiers Type Description type readonly 'minor' | 'major' Gets the type of change (minor or major) made to the chart."
  },
  "api/notebook-sdk.chart.ichartchangebase.type.html": {
    "href": "api/notebook-sdk.chart.ichartchangebase.type.html",
    "title": "chart.IChartChangeBase.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeBase > type chart.IChartChangeBase.type property Gets the type of change (minor or major) made to the chart. Signature: readonly type: 'minor' | 'major'; Returns: 'minor' | 'major' Introduced: version 1.0 Remarks When a \"minor\" change takes place, the change reports the detail of the affected elements and records. When a \"major\" change takes place, the expectation is that client code reloads the whole chart."
  },
  "api/notebook-sdk.chart.ichartchangemajor.html": {
    "href": "api/notebook-sdk.chart.ichartchangemajor.html",
    "title": "chart.IChartChangeMajor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMajor chart.IChartChangeMajor interface A major change that has occurred to the data on a chart. Signature: interface IChartChangeMajor extends IChartChangeBase Extends: IChartChangeBase Introduced: version 1.0 Properties Property Modifiers Type Description type readonly 'major' Gets the type of change (minor or major) made to the chart."
  },
  "api/notebook-sdk.chart.ichartchangemajor.type.html": {
    "href": "api/notebook-sdk.chart.ichartchangemajor.type.html",
    "title": "chart.IChartChangeMajor.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMajor > type chart.IChartChangeMajor.type property Gets the type of change (minor or major) made to the chart. Signature: readonly type: 'major'; Returns: 'major' Remarks When a \"minor\" change takes place, the change reports the detail of the affected elements and records. When a \"major\" change takes place, the expectation is that client code reloads the whole chart."
  },
  "api/notebook-sdk.chart.ichartchangeminor.edgesummaries.html": {
    "href": "api/notebook-sdk.chart.ichartchangeminor.edgesummaries.html",
    "title": "chart.IChartChangeMinor.edgeSummaries property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMinor > edgeSummaries chart.IChartChangeMinor.edgeSummaries property Gets the edge summaries that changed. Signature: readonly edgeSummaries: { readonly added: data.IReadOnlyCollection<visual.IEdgeSummary>; readonly changed: data.IReadOnlyCollection<visual.IEdgeSummary>; readonly removed: data.IReadOnlyCollection<visual.ElementId>; }; Returns: { readonly added: data.IReadOnlyCollection < visual.IEdgeSummary >; readonly changed: data.IReadOnlyCollection < visual.IEdgeSummary >; readonly removed: data.IReadOnlyCollection < visual.ElementId >; } Introduced: version 1.6"
  },
  "api/notebook-sdk.chart.ichartchangeminor.elements.html": {
    "href": "api/notebook-sdk.chart.ichartchangeminor.elements.html",
    "title": "chart.IChartChangeMinor.elements property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMinor > elements chart.IChartChangeMinor.elements property Gets the visual elements that changed. Signature: readonly elements: { readonly added: data.IReadOnlyCollection<visual.IElement>; readonly changed: data.IReadOnlyCollection<visual.IElement>; readonly removed: data.IReadOnlyCollection<visual.ElementId>; }; Returns: { readonly added: data.IReadOnlyCollection < visual.IElement >; readonly changed: data.IReadOnlyCollection < visual.IElement >; readonly removed: data.IReadOnlyCollection < visual.ElementId >; } Introduced: version 1.0 Remarks An element changes if its visual representation or its underlying record data changes."
  },
  "api/notebook-sdk.chart.ichartchangeminor.hasnamechanged.html": {
    "href": "api/notebook-sdk.chart.ichartchangeminor.hasnamechanged.html",
    "title": "chart.IChartChangeMinor.hasNameChanged property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMinor > hasNameChanged chart.IChartChangeMinor.hasNameChanged property Indicates whether the name of the chart changed. Signature: readonly hasNameChanged: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichartchangeminor.html": {
    "href": "api/notebook-sdk.chart.ichartchangeminor.html",
    "title": "chart.IChartChangeMinor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMinor chart.IChartChangeMinor interface A minor change that has occurred to the data on a chart. Signature: interface IChartChangeMinor extends IChartChangeBase Extends: IChartChangeBase Introduced: version 1.0 Properties Property Modifiers Type Description edgeSummaries readonly { readonly added: data.IReadOnlyCollection <!-- --> < visual.IEdgeSummary <!-- --> >; readonly changed: data.IReadOnlyCollection <!-- --> < visual.IEdgeSummary <!-- --> >; readonly removed: data.IReadOnlyCollection <!-- --> < visual.ElementId <!-- --> >; } Gets the edge summaries that changed. elements readonly { readonly added: data.IReadOnlyCollection <!-- --> < visual.IElement <!-- --> >; readonly changed: data.IReadOnlyCollection <!-- --> < visual.IElement <!-- --> >; readonly removed: data.IReadOnlyCollection <!-- --> < visual.ElementId <!-- --> >; } Gets the visual elements that changed. hasNameChanged readonly boolean Indicates whether the name of the chart changed. nodeGroups readonly { readonly added: data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.INodeGroup <!-- --> >; readonly changed: data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.INodeGroup <!-- --> >; readonly removed: data.IReadOnlyCollection <!-- --> < visual.ElementId <!-- --> >; } Gets the node groups that changed. records readonly { readonly added: data.IReadOnlyCollection <!-- --> < records.IChartRecord <!-- --> >; readonly changed: data.IReadOnlyCollection <!-- --> < records.IChartRecord <!-- --> >; readonly removed: data.IReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> >; } Gets the records that changed. type readonly 'minor' Gets the type of change (minor or major) made to the chart."
  },
  "api/notebook-sdk.chart.ichartchangeminor.nodegroups.html": {
    "href": "api/notebook-sdk.chart.ichartchangeminor.nodegroups.html",
    "title": "chart.IChartChangeMinor.nodeGroups property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMinor > nodeGroups chart.IChartChangeMinor.nodeGroups property Gets the node groups that changed. Signature: readonly nodeGroups: { readonly added: data.IKeyedReadOnlyCollection<visual.ElementId, visual.INodeGroup>; readonly changed: data.IKeyedReadOnlyCollection<visual.ElementId, visual.INodeGroup>; readonly removed: data.IReadOnlyCollection<visual.ElementId>; }; Returns: { readonly added: data.IKeyedReadOnlyCollection < visual.ElementId , visual.INodeGroup >; readonly changed: data.IKeyedReadOnlyCollection < visual.ElementId , visual.INodeGroup >; readonly removed: data.IReadOnlyCollection < visual.ElementId >; } Introduced: version 1.8"
  },
  "api/notebook-sdk.chart.ichartchangeminor.records.html": {
    "href": "api/notebook-sdk.chart.ichartchangeminor.records.html",
    "title": "chart.IChartChangeMinor.records property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMinor > records chart.IChartChangeMinor.records property Gets the records that changed. Signature: readonly records: { readonly added: data.IReadOnlyCollection<records.IChartRecord>; readonly changed: data.IReadOnlyCollection<records.IChartRecord>; readonly removed: data.IReadOnlyCollection<records.AnalyzeRecordId>; }; Returns: { readonly added: data.IReadOnlyCollection < records.IChartRecord >; readonly changed: data.IReadOnlyCollection < records.IChartRecord >; readonly removed: data.IReadOnlyCollection < records.AnalyzeRecordId >; } Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.ichartchangeminor.type.html": {
    "href": "api/notebook-sdk.chart.ichartchangeminor.type.html",
    "title": "chart.IChartChangeMinor.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartChangeMinor > type chart.IChartChangeMinor.type property Gets the type of change (minor or major) made to the chart. Signature: readonly type: 'minor'; Returns: 'minor' Remarks When a \"minor\" change takes place, the change reports the detail of the affected elements and records. When a \"major\" change takes place, the expectation is that client code reloads the whole chart."
  },
  "api/notebook-sdk.chart.ichartview.center.html": {
    "href": "api/notebook-sdk.chart.ichartview.center.html",
    "title": "chart.IChartView.center property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartView > center chart.IChartView.center property Gets the position of the center of the view, in chart coordinates. Signature: readonly center: visual.IPosition; Returns: visual.IPosition Introduced: version 1.0 Remarks For a new chart, the center of the view is always at (0, 0)."
  },
  "api/notebook-sdk.chart.ichartview.html": {
    "href": "api/notebook-sdk.chart.ichartview.html",
    "title": "chart.IChartView interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartView chart.IChartView interface A description of the area of the chart that is currently in view. Signature: interface IChartView Introduced: version 1.0 Properties Property Modifiers Type Description center readonly visual.IPosition Gets the position of the center of the view, in chart coordinates. viewBounds readonly visual.IBounds Gets the rectangle of the view boundary, in chart coordinates. zoomScale readonly number Gets the zoom scale of the view, where 1.0 is a 100% (one-to-one) scale."
  },
  "api/notebook-sdk.chart.ichartview.viewbounds.html": {
    "href": "api/notebook-sdk.chart.ichartview.viewbounds.html",
    "title": "chart.IChartView.viewBounds property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartView > viewBounds chart.IChartView.viewBounds property Gets the rectangle of the view boundary, in chart coordinates. Signature: readonly viewBounds: visual.IBounds; Returns: visual.IBounds Introduced: version 1.0 Remarks In chart coordinates, x increases from left to right, and y increases from bottom to top. Therefore, for a new chart whose size is 400 x 200 chart units, the top left is at (-200, 100) while the bottom right is at (200, -100)."
  },
  "api/notebook-sdk.chart.ichartview.zoomscale.html": {
    "href": "api/notebook-sdk.chart.ichartview.zoomscale.html",
    "title": "chart.IChartView.zoomScale property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IChartView > zoomScale chart.IChartView.zoomScale property Gets the zoom scale of the view, where 1.0 is a 100% (one-to-one) scale. Signature: readonly zoomScale: number; Returns: number Introduced: version 1.0 Remarks When the zoom scale is 1.0, one chart unit is equal to one native display pixel. At 0.5, it's two units to one pixel; at 2.0, it's two pixels to one unit."
  },
  "api/notebook-sdk.chart.ifitconstraints.html": {
    "href": "api/notebook-sdk.chart.ifitconstraints.html",
    "title": "chart.IFitConstraints interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IFitConstraints chart.IFitConstraints interface Constraints that control a view-fitting operation. Signature: interface IFitConstraints Introduced: version 1.1 Remarks Fitting the view to a collection of elements ordinarily zooms in or out to make those elements fill the viewport. However, you might want to limit this behavior to prevent zooming in beyond a particular level. For example, if you fit the view to a single element, you might not want to zoom so that the element fills the viewport. If you want to focus attention on a single element without making it too large, you can set maximumZoom to 1 <!-- --> . Equally, if you want to pan the chart to show a particular element but not zoom in at all , you can set maximumZoom to current <!-- --> . Properties Property Modifiers Type Description maximumZoom? number | 'current' (Optional) Gets or sets a value that controls the maximum zoom level to apply when performing a fit operation."
  },
  "api/notebook-sdk.chart.ifitconstraints.maximumzoom.html": {
    "href": "api/notebook-sdk.chart.ifitconstraints.maximumzoom.html",
    "title": "chart.IFitConstraints.maximumZoom property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IFitConstraints > maximumZoom chart.IFitConstraints.maximumZoom property Gets or sets a value that controls the maximum zoom level to apply when performing a fit operation. Signature: maximumZoom?: number | 'current'; Returns: number | 'current' Introduced: version 1.1"
  },
  "api/notebook-sdk.chart.iselection.affectededges.html": {
    "href": "api/notebook-sdk.chart.iselection.affectededges.html",
    "title": "chart.ISelection.affectedEdges property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ISelection > affectedEdges chart.ISelection.affectedEdges property Gets the chart edges that contain selected records. Signature: readonly affectedEdges: data.IKeyedReadOnlyCollection<visual.ElementId, visual.IEdge>; Returns: data.IKeyedReadOnlyCollection < visual.ElementId , visual.IEdge > Introduced: version 1.0 Remarks Chart edges might be partially selected if only some of the records that they contain are selected. The fundamental unit of selection is the record."
  },
  "api/notebook-sdk.chart.iselection.affectedelements.html": {
    "href": "api/notebook-sdk.chart.iselection.affectedelements.html",
    "title": "chart.ISelection.affectedElements property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ISelection > affectedElements chart.ISelection.affectedElements property Gets the chart elements that contain selected records. Signature: readonly affectedElements: data.IKeyedReadOnlyCollection<visual.ElementId, visual.IElement>; Returns: data.IKeyedReadOnlyCollection < visual.ElementId , visual.IElement > Introduced: version 1.0 Remarks Chart elements might be partially selected if only some of the records that they contain are selected. The fundamental unit of selection is the record."
  },
  "api/notebook-sdk.chart.iselection.affectednodes.html": {
    "href": "api/notebook-sdk.chart.iselection.affectednodes.html",
    "title": "chart.ISelection.affectedNodes property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ISelection > affectedNodes chart.ISelection.affectedNodes property Gets the chart nodes that contain selected records. Signature: readonly affectedNodes: data.IKeyedReadOnlyCollection<visual.ElementId, visual.INode>; Returns: data.IKeyedReadOnlyCollection < visual.ElementId , visual.INode > Introduced: version 1.0 Remarks Chart nodes might be partially selected if only some of the records that they contain are selected. The fundamental unit of selection is the record."
  },
  "api/notebook-sdk.chart.iselection.entityrecords.html": {
    "href": "api/notebook-sdk.chart.iselection.entityrecords.html",
    "title": "chart.ISelection.entityRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ISelection > entityRecords chart.ISelection.entityRecords property Gets the entity records that are selected on the chart. Signature: readonly entityRecords: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartEntityRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartEntityRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.iselection.html": {
    "href": "api/notebook-sdk.chart.iselection.html",
    "title": "chart.ISelection interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ISelection chart.ISelection interface A selection on an i2 Notebook chart, which is record-oriented. Signature: interface ISelection Introduced: version 1.0 Remarks i2 Notebook users interact with nodes and edges on the chart, but the fundamental unit of selection is the record. It is possible for nodes and edges to be partially selected when only some of the records that they contain are selected. Properties Property Modifiers Type Description affectedEdges readonly data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.IEdge <!-- --> > Gets the chart edges that contain selected records. affectedElements readonly data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.IElement <!-- --> > Gets the chart elements that contain selected records. affectedNodes readonly data.IKeyedReadOnlyCollection <!-- --> < visual.ElementId <!-- --> , visual.INode <!-- --> > Gets the chart nodes that contain selected records. entityRecords readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartEntityRecord <!-- --> > Gets the entity records that are selected on the chart. linkRecords readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartLinkRecord <!-- --> > Gets the link records that are selected on the chart. records readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartRecord <!-- --> > Gets the records that make up the selection on the chart."
  },
  "api/notebook-sdk.chart.iselection.linkrecords.html": {
    "href": "api/notebook-sdk.chart.iselection.linkrecords.html",
    "title": "chart.ISelection.linkRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ISelection > linkRecords chart.ISelection.linkRecords property Gets the link records that are selected on the chart. Signature: readonly linkRecords: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartLinkRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartLinkRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.iselection.records.html": {
    "href": "api/notebook-sdk.chart.iselection.records.html",
    "title": "chart.ISelection.records property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ISelection > records chart.ISelection.records property Gets the records that make up the selection on the chart. Signature: readonly records: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.chart.iviewportdata.center.html": {
    "href": "api/notebook-sdk.chart.iviewportdata.center.html",
    "title": "chart.IViewportData.center property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IViewportData > center chart.IViewportData.center property Gets or sets the position of the center of the viewport, in chart coordinates. See also chart.IChartView.center <!-- --> . Signature: center?: visual.IPosition; Returns: visual.IPosition Introduced: version 1.1"
  },
  "api/notebook-sdk.chart.iviewportdata.html": {
    "href": "api/notebook-sdk.chart.iviewportdata.html",
    "title": "chart.IViewportData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IViewportData chart.IViewportData interface A set of data that defines a viewport. Signature: interface IViewportData Introduced: version 1.1 Properties Property Modifiers Type Description center? visual.IPosition (Optional) Gets or sets the position of the center of the viewport, in chart coordinates. See also chart.IChartView.center <!-- --> . zoomScale? number (Optional) Gets or sets the zoom scale of the view, where 1.0 is a 100% (one-to-one) scale. See also chart.IChartView.zoomScale <!-- --> ."
  },
  "api/notebook-sdk.chart.iviewportdata.zoomscale.html": {
    "href": "api/notebook-sdk.chart.iviewportdata.zoomscale.html",
    "title": "chart.IViewportData.zoomScale property",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > IViewportData > zoomScale chart.IViewportData.zoomScale property Gets or sets the zoom scale of the view, where 1.0 is a 100% (one-to-one) scale. See also chart.IChartView.zoomScale <!-- --> . Signature: zoomScale?: number; Returns: number Introduced: version 1.1"
  },
  "api/notebook-sdk.chart.selectionlistener.html": {
    "href": "api/notebook-sdk.chart.selectionlistener.html",
    "title": "chart.SelectionListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > SelectionListener chart.SelectionListener type A callback function that handles chart selection events. Signature: type SelectionListener = (selection: ISelection & app.IChangeSource, applicationContents: app.IApplicationContents) => void; References: ISelection <!-- --> , app.IChangeSource <!-- --> , app.IApplicationContents Introduced: version 1.0 Parameters Parameter Description selection The selection on the chart at the moment the callback was invoked, and the source of the selection change. applicationContents The contents of the application, including the current chart."
  },
  "api/notebook-sdk.chart.viewlistener.html": {
    "href": "api/notebook-sdk.chart.viewlistener.html",
    "title": "chart.ViewListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > chart > ViewListener chart.ViewListener type A callback function that handles chart view events. Signature: type ViewListener = (view: IChartView & app.IChangeSource, applicationContents: app.IApplicationContents) => void; References: IChartView <!-- --> , app.IChangeSource <!-- --> , app.IApplicationContents Introduced: version 1.0 Parameters Parameter Description view The appearance of the chart following the change that caused the callback to be invoked, and the source of the view change. applicationContents The contents of the application, including the current chart."
  },
  "api/notebook-sdk.commands.commandeventsmap.application.html": {
    "href": "api/notebook-sdk.commands.commandeventsmap.application.html",
    "title": "commands.CommandEventsMap.application property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandEventsMap > application commands.CommandEventsMap.application property Gets the type of events that are available to \"application\" commands. Signature: readonly application: app.IApplicationEvents; Returns: app.IApplicationEvents Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.commandeventsmap.html": {
    "href": "api/notebook-sdk.commands.commandeventsmap.html",
    "title": "commands.CommandEventsMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandEventsMap commands.CommandEventsMap interface A mapping of command types to the event types that are available to a surfaced command. Signature: interface CommandEventsMap Introduced: version 1.0 Properties Property Modifiers Type Description application readonly app.IApplicationEvents Gets the type of events that are available to \"application\" commands. records readonly IRecordsContextEvents Gets the type of events that are available to \"records\" commands. unscoped readonly undefined Gets the type of events that are available to \"unscoped\" commands."
  },
  "api/notebook-sdk.commands.commandeventsmap.records.html": {
    "href": "api/notebook-sdk.commands.commandeventsmap.records.html",
    "title": "commands.CommandEventsMap.records property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandEventsMap > records commands.CommandEventsMap.records property Gets the type of events that are available to \"records\" commands. Signature: readonly records: IRecordsContextEvents; Returns: IRecordsContextEvents Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.commandeventsmap.unscoped.html": {
    "href": "api/notebook-sdk.commands.commandeventsmap.unscoped.html",
    "title": "commands.CommandEventsMap.unscoped property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandEventsMap > unscoped commands.CommandEventsMap.unscoped property Gets the type of events that are available to \"unscoped\" commands. Signature: readonly unscoped: undefined; Returns: undefined Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.commandid.html": {
    "href": "api/notebook-sdk.commands.commandid.html",
    "title": "commands.CommandId type",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandId commands.CommandId type An identifier of a command. Signature: type CommandId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.commandpayloadmap.application.html": {
    "href": "api/notebook-sdk.commands.commandpayloadmap.application.html",
    "title": "commands.CommandPayloadMap.application property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandPayloadMap > application commands.CommandPayloadMap.application property Gets the type of the payload that \"application\" commands receive. Signature: readonly application: app.IApplicationContents; Returns: app.IApplicationContents Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.commandpayloadmap.html": {
    "href": "api/notebook-sdk.commands.commandpayloadmap.html",
    "title": "commands.CommandPayloadMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandPayloadMap commands.CommandPayloadMap interface A mapping of command types to their payload types. Signature: interface CommandPayloadMap Introduced: version 1.0 Properties Property Modifiers Type Description application readonly app.IApplicationContents Gets the type of the payload that \"application\" commands receive. records readonly IRecordsContext Gets the type of the payload that \"records\" commands receive. unscoped readonly void Gets the type of the payload that \"unscoped\" commands receive."
  },
  "api/notebook-sdk.commands.commandpayloadmap.records.html": {
    "href": "api/notebook-sdk.commands.commandpayloadmap.records.html",
    "title": "commands.CommandPayloadMap.records property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandPayloadMap > records commands.CommandPayloadMap.records property Gets the type of the payload that \"records\" commands receive. Signature: readonly records: IRecordsContext; Returns: IRecordsContext Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.commandpayloadmap.unscoped.html": {
    "href": "api/notebook-sdk.commands.commandpayloadmap.unscoped.html",
    "title": "commands.CommandPayloadMap.unscoped property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandPayloadMap > unscoped commands.CommandPayloadMap.unscoped property Gets the type of the payload that \"unscoped\" commands receive. Signature: readonly unscoped: void; Returns: void Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.commandtype.html": {
    "href": "api/notebook-sdk.commands.commandtype.html",
    "title": "commands.CommandType type",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > CommandType commands.CommandType type A type for a command, which determines the payload it receives when a user invokes it. Signature: type CommandType = 'application' | 'records' | 'unscoped'; Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.groupid.html": {
    "href": "api/notebook-sdk.commands.groupid.html",
    "title": "commands.GroupId type",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > GroupId commands.GroupId type An identifier for a group of actions. Signature: type GroupId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.helpcategory.html": {
    "href": "api/notebook-sdk.commands.helpcategory.html",
    "title": "commands.HelpCategory type",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > HelpCategory commands.HelpCategory type A category for a command, as listed in the i2 Notebook keyboard help. Signature: type HelpCategory = 'discover' | 'select' | 'help' | 'view' | 'edit' | 'search' | 'manage'; Introduced: version 1.1 Remarks The category determines the section of the keyboard help dialog in which the command is displayed."
  },
  "api/notebook-sdk.commands.html": {
    "href": "api/notebook-sdk.commands.html",
    "title": "commands namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > commands commands namespace The members of the commands namespace allow you to integrate the commands that you create in your plug-ins with the i2 Notebook user interface. Signature: export declare namespace commands Introduced: version 1.0 Interfaces Interface Description CommandEventsMap A mapping of command types to the event types that are available to a surfaced command. CommandPayloadMap A mapping of command types to their payload types. IAction A representation of a command in the user interface. An action is created when a command is surfaced. IActionArea An area of the i2 Notebook user interface that can display actions and groups of actions. IAnalyzeTabActionArea An area that represents the Analyze tab in the application ribbon, which contains system groups. IAnalyzeTabSystemGroups A lookup table for the identifiers of the system action groups in the Analyze tab. IApplicationRibbon The i2 Notebook application ribbon. IChartItemPopupMenuSystemGroups A lookup table for the identifiers of the system action groups in the chart item pop-up menu. IChartPopupMenuSystemGroups A lookup table for the identifiers of the system action groups in the chart pop-up menu. IChartSurfacePopupMenuSystemGroups A lookup table for the identifiers of the system action groups in the chart surface pop-up menu. ICollectTabActionArea An area that represents the Collect tab in the application ribbon, which contains system groups. ICollectTabSystemGroups A lookup table for the identifiers of the system action groups in the Collect tab. ICommand A registered i2 Notebook command. ICommandApi A collection of methods and properties that allow custom commands to interact with i2 Notebook. ICommandConfig A set of information that is necessary in order to register an i2 Notebook command. ICommandConfigBase A set of information that is common to all commands in i2 Notebook. ICommandKeyboardHelp An entry for a command in the i2 Notebook keyboard help. IDisseminateTabActionArea An area that represents the Disseminate tab in the application ribbon, which contains system groups. IDisseminateTabSystemGroups A lookup table for the identifiers of the system action groups in the Disseminate tab. IGroup A group of actions in either the i2 Notebook application ribbon or a popup menu. IGroupBase A group of actions in i2 Notebook. IHomeTabActionArea An area that represents the Home tab in the application ribbon, which contains system groups. IHomeTabSystemGroups A lookup table for the identifiers of the system action groups in the Home tab. IImageUrl An icon for a command or a group, specified by the URL of the image file. IInlineSvg An icon for a command or a group, specified by a block of inline SVG code. IMenuGroup A group of actions in a popup menu that do not have a label or an icon. IRecordsContext The records that are pertinent for a command that is surfaced in a particular area of the user interface. IRecordsContextEvents A collection of methods that set up listeners to run in response to record changes in a particular context. IRibbonTabActionArea An area that represents a custom tab in the application ribbon. IRibbonTabConfig A set of information for creating a tab in the application ribbon. ISystemCommands A lookup table for the command identifiers of the default system commands. Type Aliases Type Alias Description CommandId An identifier of a command. CommandType A type for a command, which determines the payload it receives when a user invokes it. GroupId An identifier for a group of actions. HelpCategory A category for a command, as listed in the i2 Notebook keyboard help. IIcon An icon for a command or a group. RecordsContextChangeListener A callback function that handles records context change events. RibbonTabId An identifier for a tab in the application ribbon. TabSpecifier A common specifier for a tab in the application ribbon."
  },
  "api/notebook-sdk.commands.iaction.html": {
    "href": "api/notebook-sdk.commands.iaction.html",
    "title": "commands.IAction interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAction commands.IAction interface A representation of a command in the user interface. An action is created when a command is surfaced. Signature: interface IAction Introduced: version 1.0 Methods Method Description setDescription(value) Sets the description of the action. For example, \"Undo add Gene Hendricks\". setEnabled(value) Sets whether the action is enabled - that is, whether it is available for users to interact with. setHidden(value) Sets whether the action is hidden - that is, whether it is visible to users at all. setIcon(value) Sets the icon for the action. setToggledState(value) Sets whether the action is toggled \"on\" or \"off\" - that is, whether it appears to be active or inactive."
  },
  "api/notebook-sdk.commands.iaction.setdescription.html": {
    "href": "api/notebook-sdk.commands.iaction.setdescription.html",
    "title": "commands.IAction.setDescription() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAction > setDescription commands.IAction.setDescription() method Sets the description of the action. For example, \"Undo add Gene Hendricks\". Signature: setDescription(value: string): void; Introduced: version 1.0 Parameters Parameter Type Description value string A description of the action. Returns: void Remarks The action description does not appear in button labels, but does appear in tooltips and other locations."
  },
  "api/notebook-sdk.commands.iaction.setenabled.html": {
    "href": "api/notebook-sdk.commands.iaction.setenabled.html",
    "title": "commands.IAction.setEnabled() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAction > setEnabled commands.IAction.setEnabled() method Sets whether the action is enabled - that is, whether it is available for users to interact with. Signature: setEnabled(value: boolean): void; Introduced: version 1.0 Parameters Parameter Type Description value boolean true to enable the action; false to disable it. Returns: void"
  },
  "api/notebook-sdk.commands.iaction.sethidden.html": {
    "href": "api/notebook-sdk.commands.iaction.sethidden.html",
    "title": "commands.IAction.setHidden() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAction > setHidden commands.IAction.setHidden() method Sets whether the action is hidden - that is, whether it is visible to users at all. Signature: setHidden(value: boolean): void; Introduced: version 1.5 Parameters Parameter Type Description value boolean true to hide the action; false to show it. Returns: void"
  },
  "api/notebook-sdk.commands.iaction.seticon.html": {
    "href": "api/notebook-sdk.commands.iaction.seticon.html",
    "title": "commands.IAction.setIcon() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAction > setIcon commands.IAction.setIcon() method Sets the icon for the action. Signature: setIcon(value: IIcon): void; Introduced: version 1.5 Parameters Parameter Type Description value IIcon An icon for the action. Returns: void"
  },
  "api/notebook-sdk.commands.iaction.settoggledstate.html": {
    "href": "api/notebook-sdk.commands.iaction.settoggledstate.html",
    "title": "commands.IAction.setToggledState() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAction > setToggledState commands.IAction.setToggledState() method Sets whether the action is toggled \"on\" or \"off\" - that is, whether it appears to be active or inactive. Signature: setToggledState(value: boolean): void; Introduced: version 1.0 Parameters Parameter Type Description value boolean true to set the action's state to \"on\"; false to set it to \"off\". Returns: void"
  },
  "api/notebook-sdk.commands.iactionarea.addgroup.html": {
    "href": "api/notebook-sdk.commands.iactionarea.addgroup.html",
    "title": "commands.IActionArea.addGroup() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > addGroup commands.IActionArea.addGroup() method Adds the specified group of actions to the user interface. Signature: addGroup(group: IGroup): IActionArea<undefined>; Introduced: version 1.0 Parameters Parameter Type Description group IGroup The group to add. Returns: IActionArea <!-- --> <undefined> An object that you can use to add actions or a further group to the new group. Exceptions Error if the group was not valid, or if a group with the same commands.GroupId was already present."
  },
  "api/notebook-sdk.commands.iactionarea.addorgetgroup.html": {
    "href": "api/notebook-sdk.commands.iactionarea.addorgetgroup.html",
    "title": "commands.IActionArea.addOrGetGroup() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > addOrGetGroup commands.IActionArea.addOrGetGroup() method Adds the specified group of actions to the user interface, or gets an existing group with the same identifier. Signature: addOrGetGroup(group: IGroup): IActionArea<undefined>; Introduced: version 1.0 Parameters Parameter Type Description group IGroup The group to add or get. Returns: IActionArea <!-- --> <undefined> An object that you can use to add actions or a further group to the new or existing group. Exceptions Error if the group was not valid, or if it was added before by the same plug-in. Remarks In general, if you want to add a group, use commands.IActionArea.addGroup() <!-- --> . If you want to get a group before surfacing commands or adding a group to it, use commands.IActionArea.getGroup() <!-- --> . However, if you are creating multiple plug-ins that want to use the same group, and these plug-ins can be deployed independently, then you should use this method."
  },
  "api/notebook-sdk.commands.iactionarea.after.html": {
    "href": "api/notebook-sdk.commands.iactionarea.after.html",
    "title": "commands.IActionArea.after() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > after commands.IActionArea.after() method Locates the area of the user interface that appears immediately after a particular action or group of actions. Signature: after(id: CommandId | GroupId): IActionArea<undefined>; Introduced: version 1.0 Parameters Parameter Type Description id CommandId | GroupId The identifier of the action (that is, its command identifier) or group to use as a reference. Returns: IActionArea <!-- --> <undefined> An object that you can use to add actions or a group to the located area. Exceptions Error if the id was not a valid CommandId or GroupId <!-- --> ."
  },
  "api/notebook-sdk.commands.iactionarea.after_1.html": {
    "href": "api/notebook-sdk.commands.iactionarea.after_1.html",
    "title": "commands.IActionArea.after() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > after commands.IActionArea.after() method Locates the area of the user interface that appears immediately after the action that represents the specified command. Signature: after(command: ICommand): IActionArea<undefined>; Introduced: version 1.1 Parameters Parameter Type Description command ICommand The surfaced command to use as a reference. Returns: IActionArea <!-- --> <undefined> An object that you can use to add actions or a group to the located area. Exceptions Error if command.id is not a valid CommandId <!-- --> ."
  },
  "api/notebook-sdk.commands.iactionarea.before.html": {
    "href": "api/notebook-sdk.commands.iactionarea.before.html",
    "title": "commands.IActionArea.before() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > before commands.IActionArea.before() method Locates the area of the user interface that appears immediately before a particular action or group of actions. Signature: before(id: CommandId | GroupId): IActionArea<undefined>; Introduced: version 1.0 Parameters Parameter Type Description id CommandId | GroupId The identifier of the action (that is, its command identifier) or group to use as a reference. Returns: IActionArea <!-- --> <undefined> An object that you can use to add actions or a group to the located area. Exceptions Error if the id was not a valid CommandId or GroupId <!-- --> ."
  },
  "api/notebook-sdk.commands.iactionarea.before_1.html": {
    "href": "api/notebook-sdk.commands.iactionarea.before_1.html",
    "title": "commands.IActionArea.before() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > before commands.IActionArea.before() method Locates the area of the user interface that appears immediately before the action that represents the specified command. Signature: before(command: ICommand): IActionArea<undefined>; Introduced: version 1.1 Parameters Parameter Type Description command ICommand The surfaced command to use as a reference. Returns: IActionArea <!-- --> <undefined> An object that you can use to add actions or a group to the located area. Exceptions Error if command.id is not a valid CommandId <!-- --> ."
  },
  "api/notebook-sdk.commands.iactionarea.getgroup.html": {
    "href": "api/notebook-sdk.commands.iactionarea.getgroup.html",
    "title": "commands.IActionArea.getGroup() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > getGroup commands.IActionArea.getGroup() method Locates the area of the user interface that is occupied by a particular group of actions. Signature: getGroup(id: GroupId): IActionArea<undefined>; Introduced: version 1.0 Parameters Parameter Type Description id GroupId The identifier of the group to use as a reference. Returns: IActionArea <!-- --> <undefined> An area of the i2 Notebook user interface that can display actions and groups of actions. Exceptions Error if the id was not a valid GroupId <!-- --> ."
  },
  "api/notebook-sdk.commands.iactionarea.html": {
    "href": "api/notebook-sdk.commands.iactionarea.html",
    "title": "commands.IActionArea interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea commands.IActionArea interface An area of the i2 Notebook user interface that can display actions and groups of actions. Signature: interface IActionArea<TSystemGroups> Introduced: version 1.0 Type Parameters Parameter Type Description TSystemGroups any The type of the list of system action groups in the area. Remarks To retrieve areas that represent the entire application ribbon or pop-up menu, use the properties of commands.ICommandApi <!-- --> . Properties Property Modifiers Type Description systemGroups readonly TSystemGroups Gets the system groups for the action area, which you can use to specify relative locations for your actions and groups. Methods Method Description addGroup(group) Adds the specified group of actions to the user interface. addOrGetGroup(group) Adds the specified group of actions to the user interface, or gets an existing group with the same identifier. after(id) Locates the area of the user interface that appears immediately after a particular action or group of actions. after(command) Locates the area of the user interface that appears immediately after the action that represents the specified command. before(id) Locates the area of the user interface that appears immediately before a particular action or group of actions. before(command) Locates the area of the user interface that appears immediately before the action that represents the specified command. getGroup(id) Locates the area of the user interface that is occupied by a particular group of actions. remove(id) Removes an action or group of actions from the user interface. surfaceCommands(commandsOrCommandIds) Adds actions for the specified registered commands to the user interface."
  },
  "api/notebook-sdk.commands.iactionarea.remove.html": {
    "href": "api/notebook-sdk.commands.iactionarea.remove.html",
    "title": "commands.IActionArea.remove() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > remove commands.IActionArea.remove() method Removes an action or group of actions from the user interface. Signature: remove(id: CommandId | GroupId): void; Introduced: version 1.0 Parameters Parameter Type Description id CommandId | GroupId The identifier of the action (that is, its command identifier) or group to remove. Returns: void Exceptions Error if the id was not a valid CommandId or GroupId <!-- --> ."
  },
  "api/notebook-sdk.commands.iactionarea.surfacecommands.html": {
    "href": "api/notebook-sdk.commands.iactionarea.surfacecommands.html",
    "title": "commands.IActionArea.surfaceCommands() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > surfaceCommands commands.IActionArea.surfaceCommands() method Adds actions for the specified registered commands to the user interface. Signature: surfaceCommands(...commandsOrCommandIds: (ICommand | CommandId)[]): void; Introduced: version 1.0 Parameters Parameter Type Description commandsOrCommandIds ( ICommand | CommandId <!-- --> )[] The registered commands, or the identifiers of the commands, to surface. Returns: void Exceptions Error if an identifier was not a valid CommandId <!-- --> , or if a command was not an ICommand <!-- --> , or if any specified command was already surfaced in the area. Remarks When you surface multiple commands, the actions are added to the user interface in the same order as you specify them."
  },
  "api/notebook-sdk.commands.iactionarea.systemgroups.html": {
    "href": "api/notebook-sdk.commands.iactionarea.systemgroups.html",
    "title": "commands.IActionArea.systemGroups property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IActionArea > systemGroups commands.IActionArea.systemGroups property Gets the system groups for the action area, which you can use to specify relative locations for your actions and groups. Signature: readonly systemGroups: TSystemGroups; Returns: TSystemGroups Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.ianalyzetabactionarea.html": {
    "href": "api/notebook-sdk.commands.ianalyzetabactionarea.html",
    "title": "commands.IAnalyzeTabActionArea interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAnalyzeTabActionArea commands.IAnalyzeTabActionArea interface An area that represents the Analyze tab in the application ribbon, which contains system groups. Signature: interface IAnalyzeTabActionArea extends IActionArea<IAnalyzeTabSystemGroups> Extends: IActionArea <!-- --> < IAnalyzeTabSystemGroups <!-- --> > Introduced: version 1.8 Properties Property Modifiers Type Description systemGroups readonly TSystemGroups Gets the system groups for the action area, which you can use to specify relative locations for your actions and groups. (Inherited from IActionArea <!-- --> ) Methods Method Description addGroup(group) Adds the specified group of actions to the user interface. (Inherited from IActionArea <!-- --> ) addOrGetGroup(group) Adds the specified group of actions to the user interface, or gets an existing group with the same identifier. (Inherited from IActionArea <!-- --> ) after(id) Locates the area of the user interface that appears immediately after a particular action or group of actions. (Inherited from IActionArea <!-- --> ) after(command) Locates the area of the user interface that appears immediately after the action that represents the specified command. (Inherited from IActionArea <!-- --> ) before(id) Locates the area of the user interface that appears immediately before a particular action or group of actions. (Inherited from IActionArea <!-- --> ) before(command) Locates the area of the user interface that appears immediately before the action that represents the specified command. (Inherited from IActionArea <!-- --> ) getGroup(id) Locates the area of the user interface that is occupied by a particular group of actions. (Inherited from IActionArea <!-- --> ) remove(id) Removes an action or group of actions from the user interface. (Inherited from IActionArea <!-- --> ) surfaceCommands(commandsOrCommandIds) Adds actions for the specified registered commands to the user interface. (Inherited from IActionArea <!-- --> )"
  },
  "api/notebook-sdk.commands.ianalyzetabsystemgroups.discover.html": {
    "href": "api/notebook-sdk.commands.ianalyzetabsystemgroups.discover.html",
    "title": "commands.IAnalyzeTabSystemGroups.discover property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAnalyzeTabSystemGroups > discover commands.IAnalyzeTabSystemGroups.discover property Gets the identifier of the system action group named \"Discover\". Signature: readonly discover: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.ianalyzetabsystemgroups.groups.html": {
    "href": "api/notebook-sdk.commands.ianalyzetabsystemgroups.groups.html",
    "title": "commands.IAnalyzeTabSystemGroups.groups property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAnalyzeTabSystemGroups > groups commands.IAnalyzeTabSystemGroups.groups property Gets the identifier of the system action group named \"Groups\". Signature: readonly groups: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.ianalyzetabsystemgroups.html": {
    "href": "api/notebook-sdk.commands.ianalyzetabsystemgroups.html",
    "title": "commands.IAnalyzeTabSystemGroups interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAnalyzeTabSystemGroups commands.IAnalyzeTabSystemGroups interface A lookup table for the identifiers of the system action groups in the Analyze tab. Signature: interface IAnalyzeTabSystemGroups Introduced: version 1.8 Properties Property Modifiers Type Description discover readonly GroupId Gets the identifier of the system action group named \"Discover\". groups readonly GroupId Gets the identifier of the system action group named \"Groups\". layouts readonly GroupId Gets the identifier of the system action group named \"Layouts\". select readonly GroupId Gets the identifier of the system action group named \"Select\"."
  },
  "api/notebook-sdk.commands.ianalyzetabsystemgroups.layouts.html": {
    "href": "api/notebook-sdk.commands.ianalyzetabsystemgroups.layouts.html",
    "title": "commands.IAnalyzeTabSystemGroups.layouts property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAnalyzeTabSystemGroups > layouts commands.IAnalyzeTabSystemGroups.layouts property Gets the identifier of the system action group named \"Layouts\". Signature: readonly layouts: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.ianalyzetabsystemgroups.select.html": {
    "href": "api/notebook-sdk.commands.ianalyzetabsystemgroups.select.html",
    "title": "commands.IAnalyzeTabSystemGroups.select property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IAnalyzeTabSystemGroups > select commands.IAnalyzeTabSystemGroups.select property Gets the identifier of the system action group named \"Select\". Signature: readonly select: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.iapplicationribbon.addtab.html": {
    "href": "api/notebook-sdk.commands.iapplicationribbon.addtab.html",
    "title": "commands.IApplicationRibbon.addTab() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IApplicationRibbon > addTab commands.IApplicationRibbon.addTab() method Adds a new tab to the application ribbon. Signature: addTab(config: IRibbonTabConfig, insertBefore?: TabSpecifier): IRibbonTabActionArea; Introduced: version 1.6 Parameters Parameter Type Description config IRibbonTabConfig The information necessary for creating the tab. insertBefore TabSpecifier (Optional) The existing tab to insert the new tab immediately before. If this is not specified, the new tab is added after all the existing tabs. Returns: IRibbonTabActionArea The area that represents the new tab in the application ribbon."
  },
  "api/notebook-sdk.commands.iapplicationribbon.analyzetab.html": {
    "href": "api/notebook-sdk.commands.iapplicationribbon.analyzetab.html",
    "title": "commands.IApplicationRibbon.analyzeTab property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IApplicationRibbon > analyzeTab commands.IApplicationRibbon.analyzeTab property Gets the area that represents the Analyze tab in the application ribbon. Signature: readonly analyzeTab: IAnalyzeTabActionArea; Returns: IAnalyzeTabActionArea Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.iapplicationribbon.collecttab.html": {
    "href": "api/notebook-sdk.commands.iapplicationribbon.collecttab.html",
    "title": "commands.IApplicationRibbon.collectTab property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IApplicationRibbon > collectTab commands.IApplicationRibbon.collectTab property Gets the area that represents the Collect tab in the application ribbon. Signature: readonly collectTab: ICollectTabActionArea; Returns: ICollectTabActionArea Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.iapplicationribbon.disseminatetab.html": {
    "href": "api/notebook-sdk.commands.iapplicationribbon.disseminatetab.html",
    "title": "commands.IApplicationRibbon.disseminateTab property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IApplicationRibbon > disseminateTab commands.IApplicationRibbon.disseminateTab property Gets the area that represents the Disseminate tab in the application ribbon. Signature: readonly disseminateTab: IDisseminateTabActionArea; Returns: IDisseminateTabActionArea Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.iapplicationribbon.gettab.html": {
    "href": "api/notebook-sdk.commands.iapplicationribbon.gettab.html",
    "title": "commands.IApplicationRibbon.getTab() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IApplicationRibbon > getTab commands.IApplicationRibbon.getTab() method Gets the area that represents the specified tab in the application ribbon. Signature: getTab(id: RibbonTabId): IRibbonTabActionArea; Introduced: version 1.6 Parameters Parameter Type Description id RibbonTabId The identifier of the tab. Returns: IRibbonTabActionArea An object that you can use to add actions or a group to the located area. Exceptions Error if the specified tab does not exist."
  },
  "api/notebook-sdk.commands.iapplicationribbon.hometab.html": {
    "href": "api/notebook-sdk.commands.iapplicationribbon.hometab.html",
    "title": "commands.IApplicationRibbon.homeTab property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IApplicationRibbon > homeTab commands.IApplicationRibbon.homeTab property Gets the area that represents the Home tab in the application ribbon. Signature: readonly homeTab: IHomeTabActionArea; Returns: IHomeTabActionArea Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.iapplicationribbon.html": {
    "href": "api/notebook-sdk.commands.iapplicationribbon.html",
    "title": "commands.IApplicationRibbon interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IApplicationRibbon commands.IApplicationRibbon interface The i2 Notebook application ribbon. Signature: interface IApplicationRibbon Introduced: version 1.0 Properties Property Modifiers Type Description analyzeTab readonly IAnalyzeTabActionArea Gets the area that represents the Analyze tab in the application ribbon. collectTab readonly ICollectTabActionArea Gets the area that represents the Collect tab in the application ribbon. disseminateTab readonly IDisseminateTabActionArea Gets the area that represents the Disseminate tab in the application ribbon. homeTab readonly IHomeTabActionArea Gets the area that represents the Home tab in the application ribbon. Methods Method Description addTab(config, insertBefore) Adds a new tab to the application ribbon. getTab(id) Gets the area that represents the specified tab in the application ribbon. removeTab(tab) Removes a tab from the application ribbon."
  },
  "api/notebook-sdk.commands.iapplicationribbon.removetab.html": {
    "href": "api/notebook-sdk.commands.iapplicationribbon.removetab.html",
    "title": "commands.IApplicationRibbon.removeTab() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IApplicationRibbon > removeTab commands.IApplicationRibbon.removeTab() method Removes a tab from the application ribbon. Signature: removeTab(tab: TabSpecifier): void; Introduced: version 1.7 Parameters Parameter Type Description tab TabSpecifier The tab to remove. Returns: void Remarks When the tab is removed from the ribbon, all the groups and actions that it contains are also removed. A plug-in that added commands to the removed tab might lose access to those commands."
  },
  "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.clipboard.html": {
    "href": "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.clipboard.html",
    "title": "commands.IChartItemPopupMenuSystemGroups.clipboard property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartItemPopupMenuSystemGroups > clipboard commands.IChartItemPopupMenuSystemGroups.clipboard property Gets the identifier of the system action group related to clipboard operations. Signature: readonly clipboard: GroupId; Returns: GroupId Introduced: version 1.4"
  },
  "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.discover.html": {
    "href": "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.discover.html",
    "title": "commands.IChartItemPopupMenuSystemGroups.discover property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartItemPopupMenuSystemGroups > discover commands.IChartItemPopupMenuSystemGroups.discover property Gets the identifier of the system action group related to discovery. Signature: readonly discover: GroupId; Returns: GroupId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.html": {
    "href": "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.html",
    "title": "commands.IChartItemPopupMenuSystemGroups interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartItemPopupMenuSystemGroups commands.IChartItemPopupMenuSystemGroups interface A lookup table for the identifiers of the system action groups in the chart item pop-up menu. Signature: interface IChartItemPopupMenuSystemGroups Introduced: version 1.4 Properties Property Modifiers Type Description clipboard readonly GroupId Gets the identifier of the system action group related to clipboard operations. discover readonly GroupId Gets the identifier of the system action group related to discovery. label readonly GroupId Gets the identifier of the system action group related to element label operations. linkDirection readonly GroupId Gets the identifier of the system action group related to link direction. publish readonly GroupId Gets the identifier of the system action group related to publishing (sharing and downloading) records. select readonly GroupId Gets the identifier of the system action group related to selection."
  },
  "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.label.html": {
    "href": "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.label.html",
    "title": "commands.IChartItemPopupMenuSystemGroups.label property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartItemPopupMenuSystemGroups > label commands.IChartItemPopupMenuSystemGroups.label property Gets the identifier of the system action group related to element label operations. Signature: readonly label: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.linkdirection.html": {
    "href": "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.linkdirection.html",
    "title": "commands.IChartItemPopupMenuSystemGroups.linkDirection property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartItemPopupMenuSystemGroups > linkDirection commands.IChartItemPopupMenuSystemGroups.linkDirection property Gets the identifier of the system action group related to link direction. Signature: readonly linkDirection: GroupId; Returns: GroupId Introduced: version 1.5"
  },
  "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.publish.html": {
    "href": "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.publish.html",
    "title": "commands.IChartItemPopupMenuSystemGroups.publish property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartItemPopupMenuSystemGroups > publish commands.IChartItemPopupMenuSystemGroups.publish property Gets the identifier of the system action group related to publishing (sharing and downloading) records. Signature: readonly publish: GroupId; Returns: GroupId Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.select.html": {
    "href": "api/notebook-sdk.commands.ichartitempopupmenusystemgroups.select.html",
    "title": "commands.IChartItemPopupMenuSystemGroups.select property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartItemPopupMenuSystemGroups > select commands.IChartItemPopupMenuSystemGroups.select property Gets the identifier of the system action group related to selection. Signature: readonly select: GroupId; Returns: GroupId Introduced: version 1.2"
  },
  "api/notebook-sdk.commands.ichartpopupmenusystemgroups.discover.html": {
    "href": "api/notebook-sdk.commands.ichartpopupmenusystemgroups.discover.html",
    "title": "commands.IChartPopupMenuSystemGroups.discover property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartPopupMenuSystemGroups > discover commands.IChartPopupMenuSystemGroups.discover property Gets the identifier of the system action group related to discovery. Signature: readonly discover: GroupId; Returns: GroupId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.ichartpopupmenusystemgroups.html": {
    "href": "api/notebook-sdk.commands.ichartpopupmenusystemgroups.html",
    "title": "commands.IChartPopupMenuSystemGroups interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartPopupMenuSystemGroups commands.IChartPopupMenuSystemGroups interface Warning: This API is now obsolete. Deprecated since version 1.4. commands.IChartPopupMenuSystemGroups has been renamed to commands.IChartItemPopupMenuSystemGroups <!-- --> . A lookup table for the identifiers of the system action groups in the chart pop-up menu. Signature: interface IChartPopupMenuSystemGroups Introduced: version 1.0 Properties Property Modifiers Type Description discover readonly GroupId Gets the identifier of the system action group related to discovery. select readonly GroupId Gets the identifier of the system action group related to selection."
  },
  "api/notebook-sdk.commands.ichartpopupmenusystemgroups.select.html": {
    "href": "api/notebook-sdk.commands.ichartpopupmenusystemgroups.select.html",
    "title": "commands.IChartPopupMenuSystemGroups.select property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartPopupMenuSystemGroups > select commands.IChartPopupMenuSystemGroups.select property Gets the identifier of the system action group related to selection. Signature: readonly select: GroupId; Returns: GroupId Introduced: version 1.2"
  },
  "api/notebook-sdk.commands.ichartsurfacepopupmenusystemgroups.clipboard.html": {
    "href": "api/notebook-sdk.commands.ichartsurfacepopupmenusystemgroups.clipboard.html",
    "title": "commands.IChartSurfacePopupMenuSystemGroups.clipboard property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartSurfacePopupMenuSystemGroups > clipboard commands.IChartSurfacePopupMenuSystemGroups.clipboard property Gets the identifier of the system action group related to clipboard operations. Signature: readonly clipboard: GroupId; Returns: GroupId Introduced: version 1.4"
  },
  "api/notebook-sdk.commands.ichartsurfacepopupmenusystemgroups.html": {
    "href": "api/notebook-sdk.commands.ichartsurfacepopupmenusystemgroups.html",
    "title": "commands.IChartSurfacePopupMenuSystemGroups interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartSurfacePopupMenuSystemGroups commands.IChartSurfacePopupMenuSystemGroups interface A lookup table for the identifiers of the system action groups in the chart surface pop-up menu. Signature: interface IChartSurfacePopupMenuSystemGroups Introduced: version 1.4 Properties Property Modifiers Type Description clipboard readonly GroupId Gets the identifier of the system action group related to clipboard operations. select readonly GroupId Gets the identifier of the system action group related to selection."
  },
  "api/notebook-sdk.commands.ichartsurfacepopupmenusystemgroups.select.html": {
    "href": "api/notebook-sdk.commands.ichartsurfacepopupmenusystemgroups.select.html",
    "title": "commands.IChartSurfacePopupMenuSystemGroups.select property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IChartSurfacePopupMenuSystemGroups > select commands.IChartSurfacePopupMenuSystemGroups.select property Gets the identifier of the system action group related to selection. Signature: readonly select: GroupId; Returns: GroupId Introduced: version 1.4"
  },
  "api/notebook-sdk.commands.icollecttabactionarea.html": {
    "href": "api/notebook-sdk.commands.icollecttabactionarea.html",
    "title": "commands.ICollectTabActionArea interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICollectTabActionArea commands.ICollectTabActionArea interface An area that represents the Collect tab in the application ribbon, which contains system groups. Signature: interface ICollectTabActionArea extends IActionArea<ICollectTabSystemGroups> Extends: IActionArea <!-- --> < ICollectTabSystemGroups <!-- --> > Introduced: version 1.8 Properties Property Modifiers Type Description systemGroups readonly TSystemGroups Gets the system groups for the action area, which you can use to specify relative locations for your actions and groups. (Inherited from IActionArea <!-- --> ) Methods Method Description addGroup(group) Adds the specified group of actions to the user interface. (Inherited from IActionArea <!-- --> ) addOrGetGroup(group) Adds the specified group of actions to the user interface, or gets an existing group with the same identifier. (Inherited from IActionArea <!-- --> ) after(id) Locates the area of the user interface that appears immediately after a particular action or group of actions. (Inherited from IActionArea <!-- --> ) after(command) Locates the area of the user interface that appears immediately after the action that represents the specified command. (Inherited from IActionArea <!-- --> ) before(id) Locates the area of the user interface that appears immediately before a particular action or group of actions. (Inherited from IActionArea <!-- --> ) before(command) Locates the area of the user interface that appears immediately before the action that represents the specified command. (Inherited from IActionArea <!-- --> ) getGroup(id) Locates the area of the user interface that is occupied by a particular group of actions. (Inherited from IActionArea <!-- --> ) remove(id) Removes an action or group of actions from the user interface. (Inherited from IActionArea <!-- --> ) surfaceCommands(commandsOrCommandIds) Adds actions for the specified registered commands to the user interface. (Inherited from IActionArea <!-- --> )"
  },
  "api/notebook-sdk.commands.icollecttabsystemgroups.groups.html": {
    "href": "api/notebook-sdk.commands.icollecttabsystemgroups.groups.html",
    "title": "commands.ICollectTabSystemGroups.groups property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICollectTabSystemGroups > groups commands.ICollectTabSystemGroups.groups property Gets the identifier of the system action group named \"Groups\". Signature: readonly groups: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.icollecttabsystemgroups.html": {
    "href": "api/notebook-sdk.commands.icollecttabsystemgroups.html",
    "title": "commands.ICollectTabSystemGroups interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICollectTabSystemGroups commands.ICollectTabSystemGroups interface A lookup table for the identifiers of the system action groups in the Collect tab. Signature: interface ICollectTabSystemGroups Introduced: version 1.8 Properties Property Modifiers Type Description groups readonly GroupId Gets the identifier of the system action group named \"Groups\". searchInfoStore readonly GroupId Gets the identifier of the system action group named \"Search Information Store\". select readonly GroupId Gets the identifier of the system action group named \"Select\"."
  },
  "api/notebook-sdk.commands.icollecttabsystemgroups.searchinfostore.html": {
    "href": "api/notebook-sdk.commands.icollecttabsystemgroups.searchinfostore.html",
    "title": "commands.ICollectTabSystemGroups.searchInfoStore property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICollectTabSystemGroups > searchInfoStore commands.ICollectTabSystemGroups.searchInfoStore property Gets the identifier of the system action group named \"Search Information Store\". Signature: readonly searchInfoStore: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.icollecttabsystemgroups.select.html": {
    "href": "api/notebook-sdk.commands.icollecttabsystemgroups.select.html",
    "title": "commands.ICollectTabSystemGroups.select property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICollectTabSystemGroups > select commands.ICollectTabSystemGroups.select property Gets the identifier of the system action group named \"Select\". Signature: readonly select: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.icommand.html": {
    "href": "api/notebook-sdk.commands.icommand.html",
    "title": "commands.ICommand interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommand commands.ICommand interface A registered i2 Notebook command. Signature: interface ICommand Introduced: version 1.0 Properties Property Modifiers Type Description id readonly CommandId Gets the identifier of the command. Methods Method Description setEnabled(value) Sets the enabled state of all actions derived from the command."
  },
  "api/notebook-sdk.commands.icommand.id.html": {
    "href": "api/notebook-sdk.commands.icommand.id.html",
    "title": "commands.ICommand.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommand > id commands.ICommand.id property Gets the identifier of the command. Signature: readonly id: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.icommand.setenabled.html": {
    "href": "api/notebook-sdk.commands.icommand.setenabled.html",
    "title": "commands.ICommand.setEnabled() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommand > setEnabled commands.ICommand.setEnabled() method Sets the enabled state of all actions derived from the command. Signature: setEnabled(value: boolean): void; Introduced: version 1.0 Parameters Parameter Type Description value boolean true to enable all actions; false to disable them. Returns: void"
  },
  "api/notebook-sdk.commands.icommandapi.applicationribbon.html": {
    "href": "api/notebook-sdk.commands.icommandapi.applicationribbon.html",
    "title": "commands.ICommandApi.applicationRibbon property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi > applicationRibbon commands.ICommandApi.applicationRibbon property Gets the area that represents the whole of the i2 Notebook application ribbon. Signature: readonly applicationRibbon: IApplicationRibbon; Returns: IApplicationRibbon Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.icommandapi.chartitempopupmenu.html": {
    "href": "api/notebook-sdk.commands.icommandapi.chartitempopupmenu.html",
    "title": "commands.ICommandApi.chartItemPopupMenu property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi > chartItemPopupMenu commands.ICommandApi.chartItemPopupMenu property Gets the area that represents the pop-up menu for chart items. Signature: readonly chartItemPopupMenu: IActionArea<IChartItemPopupMenuSystemGroups>; Returns: IActionArea < IChartItemPopupMenuSystemGroups > Introduced: version 1.4 Remarks The chartItemPopupMenu area supports only top-level groups, which correspond to sets of related actions that are separated by dividers in the menu."
  },
  "api/notebook-sdk.commands.icommandapi.chartpopupmenu.html": {
    "href": "api/notebook-sdk.commands.icommandapi.chartpopupmenu.html",
    "title": "commands.ICommandApi.chartPopupMenu property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi > chartPopupMenu commands.ICommandApi.chartPopupMenu property Warning: This API is now obsolete. Deprecated since version 1.4. commands.ICommandApi.chartPopupMenu has been renamed to commands.ICommandApi.chartItemPopupMenu <!-- --> . Gets the area that represents the pop-up menu for chart items. Signature: readonly chartPopupMenu: IActionArea<IChartPopupMenuSystemGroups>; Returns: IActionArea < IChartPopupMenuSystemGroups > Introduced: version 1.0 Remarks The chartPopupMenu area supports only top-level groups, which correspond to sets of related actions that are separated by dividers in the menu."
  },
  "api/notebook-sdk.commands.icommandapi.chartsurfacepopupmenu.html": {
    "href": "api/notebook-sdk.commands.icommandapi.chartsurfacepopupmenu.html",
    "title": "commands.ICommandApi.chartSurfacePopupMenu property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi > chartSurfacePopupMenu commands.ICommandApi.chartSurfacePopupMenu property Gets the area that represents the pop-up menu for the chart surface. Signature: readonly chartSurfacePopupMenu: IActionArea<IChartSurfacePopupMenuSystemGroups>; Returns: IActionArea < IChartSurfacePopupMenuSystemGroups > Introduced: version 1.4 Remarks The chartSurfacePopupMenu area supports only top-level groups, which correspond to sets of related actions that are separated by dividers in the menu."
  },
  "api/notebook-sdk.commands.icommandapi.createcommand.html": {
    "href": "api/notebook-sdk.commands.icommandapi.createcommand.html",
    "title": "commands.ICommandApi.createCommand() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi > createCommand commands.ICommandApi.createCommand() method Creates a command, and registers it with the application. Signature: createCommand<TCommandType extends CommandType>(config: ICommandConfig<TCommandType>): ICommand; Introduced: version 1.0 Type Parameters Parameter Type Description TCommandType extends CommandType The type of the command. Parameters Parameter Type Description config ICommandConfig <!-- --> <TCommandType> The information necessary for creating the command. Returns: ICommand The registered command. Exceptions Error if the config was not valid."
  },
  "api/notebook-sdk.commands.icommandapi.createtoolviewtogglecommand.html": {
    "href": "api/notebook-sdk.commands.icommandapi.createtoolviewtogglecommand.html",
    "title": "commands.ICommandApi.createToolViewToggleCommand() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi > createToolViewToggleCommand commands.ICommandApi.createToolViewToggleCommand() method Creates a command that can open and close a tool view, and registers it with the application. Signature: createToolViewToggleCommand(config: ICommandConfigBase, toolview: toolview.IToolView): ICommand; Introduced: version 1.0 Parameters Parameter Type Description config ICommandConfigBase The information necessary for creating the command. toolview toolview.IToolView The tool view that the command opens or closes. Returns: ICommand The registered command."
  },
  "api/notebook-sdk.commands.icommandapi.html": {
    "href": "api/notebook-sdk.commands.icommandapi.html",
    "title": "commands.ICommandApi interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi commands.ICommandApi interface A collection of methods and properties that allow custom commands to interact with i2 Notebook. Signature: interface ICommandApi Introduced: version 1.0 Properties Property Modifiers Type Description applicationRibbon readonly IApplicationRibbon Gets the area that represents the whole of the i2 Notebook application ribbon. chartItemPopupMenu readonly IActionArea <!-- --> < IChartItemPopupMenuSystemGroups <!-- --> > Gets the area that represents the pop-up menu for chart items. chartPopupMenu readonly IActionArea <!-- --> < IChartPopupMenuSystemGroups <!-- --> > Gets the area that represents the pop-up menu for chart items. chartSurfacePopupMenu readonly IActionArea <!-- --> < IChartSurfacePopupMenuSystemGroups <!-- --> > Gets the area that represents the pop-up menu for the chart surface. systemCommands readonly ISystemCommands Gets the command identifiers of the default system commands. Methods Method Description createCommand(config) Creates a command, and registers it with the application. createToolViewToggleCommand(config, toolview) Creates a command that can open and close a tool view, and registers it with the application. removeCommand(commandId) Unregisters and removes a command and all its actions from the application."
  },
  "api/notebook-sdk.commands.icommandapi.removecommand.html": {
    "href": "api/notebook-sdk.commands.icommandapi.removecommand.html",
    "title": "commands.ICommandApi.removeCommand() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi > removeCommand commands.ICommandApi.removeCommand() method Unregisters and removes a command and all its actions from the application. Signature: removeCommand(commandId: CommandId): void; Introduced: version 1.0 Parameters Parameter Type Description commandId CommandId The identifier of the command to remove. Returns: void"
  },
  "api/notebook-sdk.commands.icommandapi.systemcommands.html": {
    "href": "api/notebook-sdk.commands.icommandapi.systemcommands.html",
    "title": "commands.ICommandApi.systemCommands property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandApi > systemCommands commands.ICommandApi.systemCommands property Gets the command identifiers of the default system commands. Signature: readonly systemCommands: ISystemCommands; Returns: ISystemCommands Introduced: version 1.0 Remarks You can use these command identifiers to specify relative locations for your actions."
  },
  "api/notebook-sdk.commands.icommandconfig.html": {
    "href": "api/notebook-sdk.commands.icommandconfig.html",
    "title": "commands.ICommandConfig interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfig commands.ICommandConfig interface A set of information that is necessary in order to register an i2 Notebook command. Signature: interface ICommandConfig<TCommandType extends CommandType> extends ICommandConfigBase Extends: ICommandConfigBase Introduced: version 1.0 Type Parameters Parameter Type Description TCommandType extends CommandType The type of the command, which determines what payload it receives. Properties Property Modifiers Type Description icon readonly IIcon Gets the icon for the command. (Inherited from ICommandConfigBase <!-- --> ) id readonly CommandId Gets the identifier of the command, which must be a lower-case GUID. (Inherited from ICommandConfigBase <!-- --> ) keyboardHelp? readonly ICommandKeyboardHelp (Optional) Gets the keyboard help for the command. (Inherited from ICommandConfigBase <!-- --> ) name readonly string Gets the name of the command. For example, \"Quick Search\". (Inherited from ICommandConfigBase <!-- --> ) type readonly TCommandType Gets the type of the command. Methods Method Description onExecute(payload) Runs when the command is executed. onSurface(action, eventApi, signal)? (Optional) Runs when an action derived from the command is surfaced, enabling the command to configure the action in response to events."
  },
  "api/notebook-sdk.commands.icommandconfig.onexecute.html": {
    "href": "api/notebook-sdk.commands.icommandconfig.onexecute.html",
    "title": "commands.ICommandConfig.onExecute() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfig > onExecute commands.ICommandConfig.onExecute() method Runs when the command is executed. Signature: onExecute(payload: CommandPayloadMap[TCommandType]): void; Introduced: version 1.0 Parameters Parameter Type Description payload CommandPayloadMap <!-- --> [TCommandType] The payload that i2 Notebook provides to the command. Returns: void"
  },
  "api/notebook-sdk.commands.icommandconfig.onsurface.html": {
    "href": "api/notebook-sdk.commands.icommandconfig.onsurface.html",
    "title": "commands.ICommandConfig.onSurface() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfig > onSurface commands.ICommandConfig.onSurface() method Runs when an action derived from the command is surfaced, enabling the command to configure the action in response to events. Signature: onSurface?(action: IAction, eventApi: CommandEventsMap[TCommandType], signal: AbortSignal): void | (() => void); Introduced: version 1.0 Parameters Parameter Type Description action IAction The action being surfaced. eventApi CommandEventsMap <!-- --> [TCommandType] The events that the command can subscribe to. signal AbortSignal A signal that the application uses to tell the command that it is removing the action from the user interface. Returns: void | (() => void) A function that the application calls when it removes the action from the user interface. In its implementation, the command must unsubscribe from any events that it has subscribed to. Remarks If there is no implementation of onSurface() <!-- --> , the action is always enabled."
  },
  "api/notebook-sdk.commands.icommandconfig.type.html": {
    "href": "api/notebook-sdk.commands.icommandconfig.type.html",
    "title": "commands.ICommandConfig.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfig > type commands.ICommandConfig.type property Gets the type of the command. Signature: readonly type: TCommandType; Returns: TCommandType Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.icommandconfigbase.html": {
    "href": "api/notebook-sdk.commands.icommandconfigbase.html",
    "title": "commands.ICommandConfigBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfigBase commands.ICommandConfigBase interface A set of information that is common to all commands in i2 Notebook. Signature: interface ICommandConfigBase Introduced: version 1.0 Properties Property Modifiers Type Description icon readonly IIcon Gets the icon for the command. id readonly CommandId Gets the identifier of the command, which must be a lower-case GUID. keyboardHelp? readonly ICommandKeyboardHelp (Optional) Gets the keyboard help for the command. name readonly string Gets the name of the command. For example, \"Quick Search\"."
  },
  "api/notebook-sdk.commands.icommandconfigbase.icon.html": {
    "href": "api/notebook-sdk.commands.icommandconfigbase.icon.html",
    "title": "commands.ICommandConfigBase.icon property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfigBase > icon commands.ICommandConfigBase.icon property Gets the icon for the command. Signature: readonly icon: IIcon; Returns: IIcon Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.icommandconfigbase.id.html": {
    "href": "api/notebook-sdk.commands.icommandconfigbase.id.html",
    "title": "commands.ICommandConfigBase.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfigBase > id commands.ICommandConfigBase.id property Gets the identifier of the command, which must be a lower-case GUID. Signature: readonly id: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.icommandconfigbase.keyboardhelp.html": {
    "href": "api/notebook-sdk.commands.icommandconfigbase.keyboardhelp.html",
    "title": "commands.ICommandConfigBase.keyboardHelp property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfigBase > keyboardHelp commands.ICommandConfigBase.keyboardHelp property Gets the keyboard help for the command. Signature: readonly keyboardHelp?: ICommandKeyboardHelp; Returns: ICommandKeyboardHelp Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.icommandconfigbase.name.html": {
    "href": "api/notebook-sdk.commands.icommandconfigbase.name.html",
    "title": "commands.ICommandConfigBase.name property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandConfigBase > name commands.ICommandConfigBase.name property Gets the name of the command. For example, \"Quick Search\". Signature: readonly name: string; Returns: string Introduced: version 1.0 Remarks Typically, the name is displayed as the label of a button or a menu item."
  },
  "api/notebook-sdk.commands.icommandkeyboardhelp.category.html": {
    "href": "api/notebook-sdk.commands.icommandkeyboardhelp.category.html",
    "title": "commands.ICommandKeyboardHelp.category property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandKeyboardHelp > category commands.ICommandKeyboardHelp.category property Gets the category of the command in the keyboard help. Signature: readonly category: HelpCategory; Returns: HelpCategory Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.icommandkeyboardhelp.html": {
    "href": "api/notebook-sdk.commands.icommandkeyboardhelp.html",
    "title": "commands.ICommandKeyboardHelp interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandKeyboardHelp commands.ICommandKeyboardHelp interface An entry for a command in the i2 Notebook keyboard help. Signature: interface ICommandKeyboardHelp Introduced: version 1.0 Properties Property Modifiers Type Description category readonly HelpCategory Gets the category of the command in the keyboard help. keys readonly string[] Gets the shortcut keys of the command in the keyboard help. label readonly string Gets the label of the command in the keyboard help, which can be different from labels elsewhere. For example, \"Toggles Quick Search\"."
  },
  "api/notebook-sdk.commands.icommandkeyboardhelp.keys.html": {
    "href": "api/notebook-sdk.commands.icommandkeyboardhelp.keys.html",
    "title": "commands.ICommandKeyboardHelp.keys property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandKeyboardHelp > keys commands.ICommandKeyboardHelp.keys property Gets the shortcut keys of the command in the keyboard help. Signature: readonly keys: string[]; Returns: string[] Introduced: version 1.0 Remarks The value of this property is an array of key combinations, to support multiple combinations for a single command. Each key combination contains one or more machine-readable key names, separated by ' + <!-- --> ' to mean \"at the same time\", or a space to mean \"in sequence\". For example, ' a <!-- --> ', ' shift+a <!-- --> ', and ' a b c <!-- --> ' are all valid key combinations. The supported modifier keys are ' shift <!-- --> ' (as above), ' alt <!-- --> ', and ' mod <!-- --> ' (which maps to ' ctrl <!-- --> ' in Windows and ' meta <!-- --> '/' cmd <!-- --> ' in Mac OS). Some keys are referred to by name instead of the symbol on their keycaps; the full list is: ' backspace <!-- --> ', ' tab <!-- --> ', ' enter <!-- --> ', ' return <!-- --> ', ' capslock <!-- --> ', ' escape <!-- --> ', ' esc <!-- --> ', ' space <!-- --> ', ' pageup <!-- --> ', ' pagedown <!-- --> ', ' end <!-- --> ', ' home <!-- --> ', ' left <!-- --> ', ' up <!-- --> ', ' right <!-- --> ', ' down <!-- --> ', ' ins <!-- --> ', ' del <!-- --> ', ' plus <!-- --> '. All other keys, including special characters like / <!-- --> , $ <!-- --> , * <!-- --> , and = <!-- --> , are referred to by their keycap symbols. In all cases, key combinations are expressed in lowercase letters. For example, it is always shift+e and never E or shift+E <!-- --> ."
  },
  "api/notebook-sdk.commands.icommandkeyboardhelp.label.html": {
    "href": "api/notebook-sdk.commands.icommandkeyboardhelp.label.html",
    "title": "commands.ICommandKeyboardHelp.label property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ICommandKeyboardHelp > label commands.ICommandKeyboardHelp.label property Gets the label of the command in the keyboard help, which can be different from labels elsewhere. For example, \"Toggles Quick Search\". Signature: readonly label: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.idisseminatetabactionarea.html": {
    "href": "api/notebook-sdk.commands.idisseminatetabactionarea.html",
    "title": "commands.IDisseminateTabActionArea interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IDisseminateTabActionArea commands.IDisseminateTabActionArea interface An area that represents the Disseminate tab in the application ribbon, which contains system groups. Signature: interface IDisseminateTabActionArea extends IActionArea<IDisseminateTabSystemGroups> Extends: IActionArea <!-- --> < IDisseminateTabSystemGroups <!-- --> > Introduced: version 1.8 Properties Property Modifiers Type Description systemGroups readonly TSystemGroups Gets the system groups for the action area, which you can use to specify relative locations for your actions and groups. (Inherited from IActionArea <!-- --> ) Methods Method Description addGroup(group) Adds the specified group of actions to the user interface. (Inherited from IActionArea <!-- --> ) addOrGetGroup(group) Adds the specified group of actions to the user interface, or gets an existing group with the same identifier. (Inherited from IActionArea <!-- --> ) after(id) Locates the area of the user interface that appears immediately after a particular action or group of actions. (Inherited from IActionArea <!-- --> ) after(command) Locates the area of the user interface that appears immediately after the action that represents the specified command. (Inherited from IActionArea <!-- --> ) before(id) Locates the area of the user interface that appears immediately before a particular action or group of actions. (Inherited from IActionArea <!-- --> ) before(command) Locates the area of the user interface that appears immediately before the action that represents the specified command. (Inherited from IActionArea <!-- --> ) getGroup(id) Locates the area of the user interface that is occupied by a particular group of actions. (Inherited from IActionArea <!-- --> ) remove(id) Removes an action or group of actions from the user interface. (Inherited from IActionArea <!-- --> ) surfaceCommands(commandsOrCommandIds) Adds actions for the specified registered commands to the user interface. (Inherited from IActionArea <!-- --> )"
  },
  "api/notebook-sdk.commands.idisseminatetabsystemgroups.export.html": {
    "href": "api/notebook-sdk.commands.idisseminatetabsystemgroups.export.html",
    "title": "commands.IDisseminateTabSystemGroups.export property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IDisseminateTabSystemGroups > export commands.IDisseminateTabSystemGroups.export property Gets the identifier of the system action group named \"Export\". Signature: readonly export: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.idisseminatetabsystemgroups.html": {
    "href": "api/notebook-sdk.commands.idisseminatetabsystemgroups.html",
    "title": "commands.IDisseminateTabSystemGroups interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IDisseminateTabSystemGroups commands.IDisseminateTabSystemGroups interface A lookup table for the identifiers of the system action groups in the Disseminate tab. Signature: interface IDisseminateTabSystemGroups Introduced: version 1.8 Properties Property Modifiers Type Description export readonly GroupId Gets the identifier of the system action group named \"Export\"."
  },
  "api/notebook-sdk.commands.igroup.html": {
    "href": "api/notebook-sdk.commands.igroup.html",
    "title": "commands.IGroup interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IGroup commands.IGroup interface A group of actions in either the i2 Notebook application ribbon or a popup menu. Signature: interface IGroup extends IGroupBase Extends: IGroupBase Introduced: version 1.0 Properties Property Modifiers Type Description icon? readonly IIcon (Optional) Gets the icon of the group, which is displayed if the group is collapsed. id readonly GroupId Gets the identifier of the group, which should be a GUID. (Inherited from IGroupBase <!-- --> ) isCollapsed? readonly boolean (Optional) Indicates whether the group is initially expanded ( false ) or collapsed ( true ) in the user interface. (Inherited from IGroupBase <!-- --> ) label? readonly string (Optional) Gets the label of the group, which is displayed to users unless the group is both expanded and in a popup menu."
  },
  "api/notebook-sdk.commands.igroup.icon.html": {
    "href": "api/notebook-sdk.commands.igroup.icon.html",
    "title": "commands.IGroup.icon property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IGroup > icon commands.IGroup.icon property Gets the icon of the group, which is displayed if the group is collapsed. Signature: readonly icon?: IIcon; Returns: IIcon Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.igroup.label.html": {
    "href": "api/notebook-sdk.commands.igroup.label.html",
    "title": "commands.IGroup.label property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IGroup > label commands.IGroup.label property Gets the label of the group, which is displayed to users unless the group is both expanded and in a popup menu. Signature: readonly label?: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.igroupbase.html": {
    "href": "api/notebook-sdk.commands.igroupbase.html",
    "title": "commands.IGroupBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IGroupBase commands.IGroupBase interface A group of actions in i2 Notebook. Signature: interface IGroupBase Introduced: version 1.2 Properties Property Modifiers Type Description id readonly GroupId Gets the identifier of the group, which should be a GUID. isCollapsed? readonly boolean (Optional) Indicates whether the group is initially expanded ( false ) or collapsed ( true ) in the user interface."
  },
  "api/notebook-sdk.commands.igroupbase.id.html": {
    "href": "api/notebook-sdk.commands.igroupbase.id.html",
    "title": "commands.IGroupBase.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IGroupBase > id commands.IGroupBase.id property Gets the identifier of the group, which should be a GUID. Signature: readonly id: GroupId; Returns: GroupId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.igroupbase.iscollapsed.html": {
    "href": "api/notebook-sdk.commands.igroupbase.iscollapsed.html",
    "title": "commands.IGroupBase.isCollapsed property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IGroupBase > isCollapsed commands.IGroupBase.isCollapsed property Indicates whether the group is initially expanded ( false <!-- --> ) or collapsed ( true <!-- --> ) in the user interface. Signature: readonly isCollapsed?: boolean; Returns: boolean Introduced: version 1.5"
  },
  "api/notebook-sdk.commands.ihometabactionarea.html": {
    "href": "api/notebook-sdk.commands.ihometabactionarea.html",
    "title": "commands.IHomeTabActionArea interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabActionArea commands.IHomeTabActionArea interface An area that represents the Home tab in the application ribbon, which contains system groups. Signature: interface IHomeTabActionArea extends IActionArea<IHomeTabSystemGroups> Extends: IActionArea <!-- --> < IHomeTabSystemGroups <!-- --> > Introduced: version 1.6 Properties Property Modifiers Type Description systemGroups readonly TSystemGroups Gets the system groups for the action area, which you can use to specify relative locations for your actions and groups. (Inherited from IActionArea <!-- --> ) Methods Method Description addGroup(group) Adds the specified group of actions to the user interface. (Inherited from IActionArea <!-- --> ) addOrGetGroup(group) Adds the specified group of actions to the user interface, or gets an existing group with the same identifier. (Inherited from IActionArea <!-- --> ) after(id) Locates the area of the user interface that appears immediately after a particular action or group of actions. (Inherited from IActionArea <!-- --> ) after(command) Locates the area of the user interface that appears immediately after the action that represents the specified command. (Inherited from IActionArea <!-- --> ) before(id) Locates the area of the user interface that appears immediately before a particular action or group of actions. (Inherited from IActionArea <!-- --> ) before(command) Locates the area of the user interface that appears immediately before the action that represents the specified command. (Inherited from IActionArea <!-- --> ) getGroup(id) Locates the area of the user interface that is occupied by a particular group of actions. (Inherited from IActionArea <!-- --> ) remove(id) Removes an action or group of actions from the user interface. (Inherited from IActionArea <!-- --> ) surfaceCommands(commandsOrCommandIds) Adds actions for the specified registered commands to the user interface. (Inherited from IActionArea <!-- --> )"
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.arrange.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.arrange.html",
    "title": "commands.IHomeTabSystemGroups.arrange property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups > arrange commands.IHomeTabSystemGroups.arrange property Warning: This API is now obsolete. The \"arrange\" property has been renamed to \"layouts\". Use commands.IHomeTabSystemGroups.layouts instead. Gets the identifier of the system action group named \"Arrange\". Signature: readonly arrange: GroupId; Returns: GroupId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.chartmanagement.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.chartmanagement.html",
    "title": "commands.IHomeTabSystemGroups.chartManagement property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups > chartManagement commands.IHomeTabSystemGroups.chartManagement property Gets the identifier of the system action group named \"Manage\". Signature: readonly chartManagement: GroupId; Returns: GroupId Introduced: version 1.1"
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.clipboard.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.clipboard.html",
    "title": "commands.IHomeTabSystemGroups.clipboard property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups > clipboard commands.IHomeTabSystemGroups.clipboard property Gets the identifier of the system action group named \"Clipboard\". Signature: readonly clipboard: GroupId; Returns: GroupId Introduced: version 1.4"
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.groups.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.groups.html",
    "title": "commands.IHomeTabSystemGroups.groups property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups > groups commands.IHomeTabSystemGroups.groups property Gets the identifier of the system action group named \"Groups\". Signature: readonly groups: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.history.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.history.html",
    "title": "commands.IHomeTabSystemGroups.history property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups > history commands.IHomeTabSystemGroups.history property Gets the identifier of the system action group named \"History\". Signature: readonly history: GroupId; Returns: GroupId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.html",
    "title": "commands.IHomeTabSystemGroups interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups commands.IHomeTabSystemGroups interface A lookup table for the identifiers of the system action groups in the Home tab. Signature: interface IHomeTabSystemGroups Introduced: version 1.0 Properties Property Modifiers Type Description arrange readonly GroupId Gets the identifier of the system action group named \"Arrange\". chartManagement readonly GroupId Gets the identifier of the system action group named \"Manage\". clipboard readonly GroupId Gets the identifier of the system action group named \"Clipboard\". groups readonly GroupId Gets the identifier of the system action group named \"Groups\". history readonly GroupId Gets the identifier of the system action group named \"History\". layouts readonly GroupId Gets the identifier of the system action group named \"Layouts\". searchInfoStore readonly GroupId Gets the identifier of the system action group named \"Search Information Store\". select readonly GroupId Gets the identifier of the system action group named \"Select\"."
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.layouts.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.layouts.html",
    "title": "commands.IHomeTabSystemGroups.layouts property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups > layouts commands.IHomeTabSystemGroups.layouts property Gets the identifier of the system action group named \"Layouts\". Signature: readonly layouts: GroupId; Returns: GroupId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.searchinfostore.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.searchinfostore.html",
    "title": "commands.IHomeTabSystemGroups.searchInfoStore property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups > searchInfoStore commands.IHomeTabSystemGroups.searchInfoStore property Warning: This API is now obsolete. The Search Information Store group has moved to the Collect tab commands.ICollectTabSystemGroups.searchInfoStore <!-- --> . Gets the identifier of the system action group named \"Search Information Store\". Signature: readonly searchInfoStore: GroupId; Returns: GroupId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.ihometabsystemgroups.select.html": {
    "href": "api/notebook-sdk.commands.ihometabsystemgroups.select.html",
    "title": "commands.IHomeTabSystemGroups.select property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IHomeTabSystemGroups > select commands.IHomeTabSystemGroups.select property Gets the identifier of the system action group named \"Select\". Signature: readonly select: GroupId; Returns: GroupId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.iicon.html": {
    "href": "api/notebook-sdk.commands.iicon.html",
    "title": "commands.IIcon type",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IIcon commands.IIcon type An icon for a command or a group. Signature: type IIcon = IImageUrl | IInlineSvg; References: IImageUrl <!-- --> , IInlineSvg Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.iimageurl.html": {
    "href": "api/notebook-sdk.commands.iimageurl.html",
    "title": "commands.IImageUrl interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IImageUrl commands.IImageUrl interface An icon for a command or a group, specified by the URL of the image file. Signature: interface IImageUrl Introduced: version 1.0 Properties Property Modifiers Type Description src readonly string Gets the URL of the image file that contains the icon, which can be relative to the URL of the entry point JavaScript file. type readonly 'imageUrl' Gets the type of the icon."
  },
  "api/notebook-sdk.commands.iimageurl.src.html": {
    "href": "api/notebook-sdk.commands.iimageurl.src.html",
    "title": "commands.IImageUrl.src property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IImageUrl > src commands.IImageUrl.src property Gets the URL of the image file that contains the icon, which can be relative to the URL of the entry point JavaScript file. Signature: readonly src: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.iimageurl.type.html": {
    "href": "api/notebook-sdk.commands.iimageurl.type.html",
    "title": "commands.IImageUrl.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IImageUrl > type commands.IImageUrl.type property Gets the type of the icon. Signature: readonly type: 'imageUrl'; Returns: 'imageUrl' Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.iinlinesvg.html": {
    "href": "api/notebook-sdk.commands.iinlinesvg.html",
    "title": "commands.IInlineSvg interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IInlineSvg commands.IInlineSvg interface An icon for a command or a group, specified by a block of inline SVG code. Signature: interface IInlineSvg Introduced: version 1.0 Properties Property Modifiers Type Description svg readonly string Gets the SVG document fragment that defines the icon. type readonly 'inlineSvg' Gets the type of the icon."
  },
  "api/notebook-sdk.commands.iinlinesvg.svg.html": {
    "href": "api/notebook-sdk.commands.iinlinesvg.svg.html",
    "title": "commands.IInlineSvg.svg property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IInlineSvg > svg commands.IInlineSvg.svg property Gets the SVG document fragment that defines the icon. Signature: readonly svg: string; Returns: string Introduced: version 1.0 Remarks To create scalable SVG, use the viewBox attribute to define the aspect ratio and how to scale lengths and coordinates, relative to the space given to the icon in the user interface. Example 1 Instead of using fixed width and height attributes like this, which results in a fixed-size icon 100 pixels square: <svg width=\"100\" height=\"100\"> <rect x=\"10\" y=\"10\" width=\"80\" height=\"80\" /> </svg> Use the viewBox attribute to create a scalable icon with a fixed aspect ratio that grows to fill the available space: <svg viewBox=\"0 0 100 100\"> <rect x=\"10\" y=\"10\" width=\"80\" height=\"80\" /> </svg> Example 2 By default, i2 Notebook fills SVG icons to match the current theme. If you provide your icon with inline styling, then the theme is ignored and its appearance in the user interface is your responsibility. For example, this code creates an icon with a thematic fill color in all themes: <svg viewBox=\"0 0 100 100\"> <rect x=\"10\" y=\"10\" width=\"80\" height=\"80\" /> </svg> While this code creates a rectangular icon that is always red, regardless of the theme. <svg viewBox=\"0 0 100 100\"> <rect x=\"10\" y=\"10\" width=\"80\" height=\"80\" fill=\"red\"/> </svg>"
  },
  "api/notebook-sdk.commands.iinlinesvg.type.html": {
    "href": "api/notebook-sdk.commands.iinlinesvg.type.html",
    "title": "commands.IInlineSvg.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IInlineSvg > type commands.IInlineSvg.type property Gets the type of the icon. Signature: readonly type: 'inlineSvg'; Returns: 'inlineSvg' Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.imenugroup.html": {
    "href": "api/notebook-sdk.commands.imenugroup.html",
    "title": "commands.IMenuGroup interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IMenuGroup commands.IMenuGroup interface Warning: This API is now obsolete. Deprecated since version 1.5. Use commands.IGroup instead. A group of actions in a popup menu that do not have a label or an icon. Signature: interface IMenuGroup extends IGroupBase Extends: IGroupBase Introduced: version 1.2 Properties Property Modifiers Type Description id readonly GroupId Gets the identifier of the group, which should be a GUID. (Inherited from IGroupBase <!-- --> ) isCollapsed? readonly boolean (Optional) Indicates whether the group is initially expanded ( false ) or collapsed ( true ) in the user interface. (Inherited from IGroupBase <!-- --> )"
  },
  "api/notebook-sdk.commands.irecordscontext.entityrecords.html": {
    "href": "api/notebook-sdk.commands.irecordscontext.entityrecords.html",
    "title": "commands.IRecordsContext.entityRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRecordsContext > entityRecords commands.IRecordsContext.entityRecords property Gets all the entity records that are pertinent for a command in a particular context. Signature: readonly entityRecords: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartEntityRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartEntityRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.irecordscontext.html": {
    "href": "api/notebook-sdk.commands.irecordscontext.html",
    "title": "commands.IRecordsContext interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRecordsContext commands.IRecordsContext interface The records that are pertinent for a command that is surfaced in a particular area of the user interface. Signature: interface IRecordsContext Introduced: version 1.0 Properties Property Modifiers Type Description entityRecords readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartEntityRecord <!-- --> > Gets all the entity records that are pertinent for a command in a particular context. linkRecords readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartLinkRecord <!-- --> > Gets all the link records that are pertinent for a command in a particular context. records readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartRecord <!-- --> > Gets all the records that are pertinent for a command in a particular context."
  },
  "api/notebook-sdk.commands.irecordscontext.linkrecords.html": {
    "href": "api/notebook-sdk.commands.irecordscontext.linkrecords.html",
    "title": "commands.IRecordsContext.linkRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRecordsContext > linkRecords commands.IRecordsContext.linkRecords property Gets all the link records that are pertinent for a command in a particular context. Signature: readonly linkRecords: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartLinkRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartLinkRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.irecordscontext.records.html": {
    "href": "api/notebook-sdk.commands.irecordscontext.records.html",
    "title": "commands.IRecordsContext.records property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRecordsContext > records commands.IRecordsContext.records property Gets all the records that are pertinent for a command in a particular context. Signature: readonly records: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.irecordscontextevents.addeventlistener.html": {
    "href": "api/notebook-sdk.commands.irecordscontextevents.addeventlistener.html",
    "title": "commands.IRecordsContextEvents.addEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRecordsContextEvents > addEventListener commands.IRecordsContextEvents.addEventListener() method Adds an event listener for changes to the records in a particular context. Signature: addEventListener(type: 'recordscontextchange', listener: RecordsContextChangeListener, options?: app.ISubscriptionOptions): () => void; Introduced: version 1.0 Parameters Parameter Type Description type 'recordscontextchange' The type of event to subscribe to. listener RecordsContextChangeListener A function to handle the event. options app.ISubscriptionOptions (Optional) An object that controls the behavior of the listener. Returns: () => void A function that can be called to remove the listener."
  },
  "api/notebook-sdk.commands.irecordscontextevents.html": {
    "href": "api/notebook-sdk.commands.irecordscontextevents.html",
    "title": "commands.IRecordsContextEvents interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRecordsContextEvents commands.IRecordsContextEvents interface A collection of methods that set up listeners to run in response to record changes in a particular context. Signature: interface IRecordsContextEvents Introduced: version 1.0 Remarks Commands that are surfaced in different areas of the user interface apply to different sets of records. For example, a command surfaced in a pop-up menu might operate on different records from the same command surfaced in the application ribbon. Listening for the \"recordscontextchange\" event allows commands to respond to record changes in the areas that they care about. Methods Method Description addEventListener(type, listener, options) Adds an event listener for changes to the records in a particular context. removeEventListener(type, listener) Removes an event listener for changes to the records in a particular context."
  },
  "api/notebook-sdk.commands.irecordscontextevents.removeeventlistener.html": {
    "href": "api/notebook-sdk.commands.irecordscontextevents.removeeventlistener.html",
    "title": "commands.IRecordsContextEvents.removeEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRecordsContextEvents > removeEventListener commands.IRecordsContextEvents.removeEventListener() method Removes an event listener for changes to the records in a particular context. Signature: removeEventListener(type: 'recordscontextchange', listener: RecordsContextChangeListener): void; Introduced: version 1.0 Parameters Parameter Type Description type 'recordscontextchange' The type of event to unsubscribe from. listener RecordsContextChangeListener A function that was previously added as a listener. Returns: void"
  },
  "api/notebook-sdk.commands.iribbontabactionarea.html": {
    "href": "api/notebook-sdk.commands.iribbontabactionarea.html",
    "title": "commands.IRibbonTabActionArea interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRibbonTabActionArea commands.IRibbonTabActionArea interface An area that represents a custom tab in the application ribbon. Signature: interface IRibbonTabActionArea extends Omit<IActionArea<undefined>, 'systemGroups'> Extends: Omit< IActionArea <!-- --> <undefined>, 'systemGroups'> (Some inherited members may not be shown because they are not represented in the documentation.) Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.iribbontabconfig.html": {
    "href": "api/notebook-sdk.commands.iribbontabconfig.html",
    "title": "commands.IRibbonTabConfig interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRibbonTabConfig commands.IRibbonTabConfig interface A set of information for creating a tab in the application ribbon. Signature: interface IRibbonTabConfig Introduced: version 1.6 Properties Property Modifiers Type Description id readonly RibbonTabId Gets the identifier of the tab, which must be a lower-case GUID. label readonly string Gets the label for the tab. tooltip? readonly string (Optional) Gets the tooltip for the tab."
  },
  "api/notebook-sdk.commands.iribbontabconfig.id.html": {
    "href": "api/notebook-sdk.commands.iribbontabconfig.id.html",
    "title": "commands.IRibbonTabConfig.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRibbonTabConfig > id commands.IRibbonTabConfig.id property Gets the identifier of the tab, which must be a lower-case GUID. Signature: readonly id: RibbonTabId; Returns: RibbonTabId Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.iribbontabconfig.label.html": {
    "href": "api/notebook-sdk.commands.iribbontabconfig.label.html",
    "title": "commands.IRibbonTabConfig.label property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRibbonTabConfig > label commands.IRibbonTabConfig.label property Gets the label for the tab. Signature: readonly label: string; Returns: string Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.iribbontabconfig.tooltip.html": {
    "href": "api/notebook-sdk.commands.iribbontabconfig.tooltip.html",
    "title": "commands.IRibbonTabConfig.tooltip property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > IRibbonTabConfig > tooltip commands.IRibbonTabConfig.tooltip property Gets the tooltip for the tab. Signature: readonly tooltip?: string; Returns: string Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.isystemcommands.addtomap.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.addtomap.html",
    "title": "commands.ISystemCommands.addToMap property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > addToMap commands.ISystemCommands.addToMap property Gets the identifier of the system command that adds geospatial markers to the map from the current selection. Signature: readonly addToMap: CommandId; Returns: CommandId Introduced: version 1.1"
  },
  "api/notebook-sdk.commands.isystemcommands.chartsettings.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.chartsettings.html",
    "title": "commands.ISystemCommands.chartSettings property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > chartSettings commands.ISystemCommands.chartSettings property Gets the identifier of the system command that opens the chart settings dialog. Signature: readonly chartSettings: CommandId; Returns: CommandId Introduced: version 1.5"
  },
  "api/notebook-sdk.commands.isystemcommands.copy.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.copy.html",
    "title": "commands.ISystemCommands.copy property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > copy commands.ISystemCommands.copy property Gets the identifier of the system command that copies the selected elements to the clipboard. Signature: readonly copy: CommandId; Returns: CommandId Introduced: version 1.4"
  },
  "api/notebook-sdk.commands.isystemcommands.cut.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.cut.html",
    "title": "commands.ISystemCommands.cut property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > cut commands.ISystemCommands.cut property Gets the identifier of the system command that cuts the selected elements and copies them to the clipboard. Signature: readonly cut: CommandId; Returns: CommandId Introduced: version 1.4"
  },
  "api/notebook-sdk.commands.isystemcommands.deleteselected.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.deleteselected.html",
    "title": "commands.ISystemCommands.deleteSelected property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > deleteSelected commands.ISystemCommands.deleteSelected property Gets the identifier of the system command that deletes the currently selected elements. Signature: readonly deleteSelected: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.downloadrecords.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.downloadrecords.html",
    "title": "commands.ISystemCommands.downloadRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > downloadRecords commands.ISystemCommands.downloadRecords property Gets the identifier of the system command that allows users to download records in Excel format. Signature: readonly downloadRecords: CommandId; Returns: CommandId Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.isystemcommands.editelementlabel.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.editelementlabel.html",
    "title": "commands.ISystemCommands.editElementLabel property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > editElementLabel commands.ISystemCommands.editElementLabel property Gets the identifier of the system command that enables inline editing for the selected element's label. Signature: readonly editElementLabel: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.editgrouplabel.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.editgrouplabel.html",
    "title": "commands.ISystemCommands.editGroupLabel property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > editGroupLabel commands.ISystemCommands.editGroupLabel property Gets the identifier of the system command that enables inline editing for the selected group's label. Signature: readonly editGroupLabel: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.expand.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.expand.html",
    "title": "commands.ISystemCommands.expand property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > expand commands.ISystemCommands.expand property Gets the identifier of the system command that performs a one-level expand operation on the current selection. Signature: readonly expand: CommandId; Returns: CommandId Introduced: version 1.1"
  },
  "api/notebook-sdk.commands.isystemcommands.exportpdf.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.exportpdf.html",
    "title": "commands.ISystemCommands.exportPdf property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > exportPdf commands.ISystemCommands.exportPdf property Gets the identifier of the \"Export to PDF\" system command. Signature: readonly exportPdf: CommandId; Returns: CommandId Introduced: version 1.3"
  },
  "api/notebook-sdk.commands.isystemcommands.getpaths.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.getpaths.html",
    "title": "commands.ISystemCommands.getPaths property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > getPaths commands.ISystemCommands.getPaths property Gets the identifier of the \"Get paths\" system command. Signature: readonly getPaths: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.groupnodes.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.groupnodes.html",
    "title": "commands.ISystemCommands.groupNodes property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > groupNodes commands.ISystemCommands.groupNodes property Gets the identifier of the system command that adds selected nodes to a group. Signature: readonly groupNodes: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.html",
    "title": "commands.ISystemCommands interface",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands commands.ISystemCommands interface A lookup table for the command identifiers of the default system commands. Signature: interface ISystemCommands Introduced: version 1.0 Properties Property Modifiers Type Description addToMap readonly CommandId Gets the identifier of the system command that adds geospatial markers to the map from the current selection. chartSettings readonly CommandId Gets the identifier of the system command that opens the chart settings dialog. copy readonly CommandId Gets the identifier of the system command that copies the selected elements to the clipboard. cut readonly CommandId Gets the identifier of the system command that cuts the selected elements and copies them to the clipboard. deleteSelected readonly CommandId Gets the identifier of the system command that deletes the currently selected elements. downloadRecords readonly CommandId Gets the identifier of the system command that allows users to download records in Excel format. editElementLabel readonly CommandId Gets the identifier of the system command that enables inline editing for the selected element's label. editGroupLabel readonly CommandId Gets the identifier of the system command that enables inline editing for the selected group's label. expand readonly CommandId Gets the identifier of the system command that performs a one-level expand operation on the current selection. exportPdf readonly CommandId Gets the identifier of the \"Export to PDF\" system command. getPaths readonly CommandId Gets the identifier of the \"Get paths\" system command. groupNodes readonly CommandId Gets the identifier of the system command that adds selected nodes to a group. layoutCircular readonly CommandId Gets the identifier of the system command that performs a circular layout. layoutGrouped readonly CommandId Gets the identifier of the system command that performs a grouped layout. layoutMinimizeCrossedLinks readonly CommandId Gets the identifier of the system command that performs a minimize crossed links layout. layoutOrganization readonly CommandId Gets the identifier of the system command that performs an organization layout. layoutPacked readonly CommandId Gets the identifier of the system command that performs a packed layout. layoutPeacock readonly CommandId Gets the identifier of the system command that performs a peacock layout. maximizeGroups readonly CommandId Gets the identifier of the system command that maximizes selected groups in the chart. minimizeGroups readonly CommandId Gets the identifier of the system command that minimizes selected groups in the chart. openImporter readonly CommandId Gets the identifier of the system command that opens the i2 Notebook importer. openThreeSixtyView readonly CommandId Gets the identifier of the system command that opens a 360 view of the selected Information Store entity record. paste readonly CommandId Gets the identifier of the system command that pastes the contents of the clipboard. redo readonly CommandId Gets the identifier of the \"Redo\" system command. resetElementLabel readonly CommandId Gets the identifier of the system command that resets the selected elements' labels to their default values. resetGroupLabel readonly CommandId Gets the identifier of the system command that resets the selected groups' labels to their default values. saveChart readonly CommandId Gets the identifier of the system command that saves the current chart. selectAll readonly CommandId Gets the identifier of the system command that selects all elements on the chart. selectAttached readonly CommandId Gets the identifier of the system command that adds attached elements to the current selection. selectInvert readonly CommandId Gets the identifier of the system command that inverts chart selection. selectUnitedItems readonly CommandId Gets the identifier of the system command that selects united items. shareRecords readonly CommandId Gets the identifier of the system command that allows users to share records with each other. toggleChartingPreferences readonly CommandId Gets the identifier of the system command that toggles the charting preferences UI. toggleExpand readonly CommandId Gets the identifier of the system command that toggles the Expand-with-conditions UI. toggleExplore readonly CommandId Gets the identifier of the system command that toggles the explore selection UI. toggleExternalSearches readonly CommandId Gets the identifier of the system command that toggles the External Searches UI. toggleLists readonly CommandId Gets the identifier of the system command that toggles the lists UI. toggleMap readonly CommandId Gets the identifier of the system command that toggles the map UI. togglePalette readonly CommandId Gets the identifier of the system command that toggles the palette UI. toggleQuickSearch readonly CommandId Gets the identifier of the system command that toggles the Quick Search UI. toggleRecordInspector readonly CommandId Gets the identifier of the system command that toggles the Record Inspector UI. toggleStyling readonly CommandId Gets the identifier of the system command that toggles the style UI. toggleVisualQuery readonly CommandId Gets the identifier of the system command that toggles the Visual Query UI. undo readonly CommandId Gets the identifier of the \"Undo\" system command. ungroupNodes readonly CommandId Gets the identifier of the system command that removes selected nodes from their group."
  },
  "api/notebook-sdk.commands.isystemcommands.layoutcircular.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.layoutcircular.html",
    "title": "commands.ISystemCommands.layoutCircular property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > layoutCircular commands.ISystemCommands.layoutCircular property Gets the identifier of the system command that performs a circular layout. Signature: readonly layoutCircular: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.layoutgrouped.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.layoutgrouped.html",
    "title": "commands.ISystemCommands.layoutGrouped property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > layoutGrouped commands.ISystemCommands.layoutGrouped property Gets the identifier of the system command that performs a grouped layout. Signature: readonly layoutGrouped: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.layoutminimizecrossedlinks.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.layoutminimizecrossedlinks.html",
    "title": "commands.ISystemCommands.layoutMinimizeCrossedLinks property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > layoutMinimizeCrossedLinks commands.ISystemCommands.layoutMinimizeCrossedLinks property Gets the identifier of the system command that performs a minimize crossed links layout. Signature: readonly layoutMinimizeCrossedLinks: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.layoutorganization.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.layoutorganization.html",
    "title": "commands.ISystemCommands.layoutOrganization property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > layoutOrganization commands.ISystemCommands.layoutOrganization property Gets the identifier of the system command that performs an organization layout. Signature: readonly layoutOrganization: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.layoutpacked.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.layoutpacked.html",
    "title": "commands.ISystemCommands.layoutPacked property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > layoutPacked commands.ISystemCommands.layoutPacked property Gets the identifier of the system command that performs a packed layout. Signature: readonly layoutPacked: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.layoutpeacock.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.layoutpeacock.html",
    "title": "commands.ISystemCommands.layoutPeacock property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > layoutPeacock commands.ISystemCommands.layoutPeacock property Gets the identifier of the system command that performs a peacock layout. Signature: readonly layoutPeacock: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.maximizegroups.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.maximizegroups.html",
    "title": "commands.ISystemCommands.maximizeGroups property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > maximizeGroups commands.ISystemCommands.maximizeGroups property Gets the identifier of the system command that maximizes selected groups in the chart. Signature: readonly maximizeGroups: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.minimizegroups.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.minimizegroups.html",
    "title": "commands.ISystemCommands.minimizeGroups property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > minimizeGroups commands.ISystemCommands.minimizeGroups property Gets the identifier of the system command that minimizes selected groups in the chart. Signature: readonly minimizeGroups: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.openimporter.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.openimporter.html",
    "title": "commands.ISystemCommands.openImporter property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > openImporter commands.ISystemCommands.openImporter property Gets the identifier of the system command that opens the i2 Notebook importer. Signature: readonly openImporter: CommandId; Returns: CommandId Introduced: version 1.5"
  },
  "api/notebook-sdk.commands.isystemcommands.openthreesixtyview.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.openthreesixtyview.html",
    "title": "commands.ISystemCommands.openThreeSixtyView property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > openThreeSixtyView commands.ISystemCommands.openThreeSixtyView property Gets the identifier of the system command that opens a 360 view of the selected Information Store entity record. Signature: readonly openThreeSixtyView: CommandId; Returns: CommandId Introduced: version 1.2"
  },
  "api/notebook-sdk.commands.isystemcommands.paste.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.paste.html",
    "title": "commands.ISystemCommands.paste property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > paste commands.ISystemCommands.paste property Gets the identifier of the system command that pastes the contents of the clipboard. Signature: readonly paste: CommandId; Returns: CommandId Introduced: version 1.4"
  },
  "api/notebook-sdk.commands.isystemcommands.redo.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.redo.html",
    "title": "commands.ISystemCommands.redo property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > redo commands.ISystemCommands.redo property Gets the identifier of the \"Redo\" system command. Signature: readonly redo: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.resetelementlabel.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.resetelementlabel.html",
    "title": "commands.ISystemCommands.resetElementLabel property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > resetElementLabel commands.ISystemCommands.resetElementLabel property Gets the identifier of the system command that resets the selected elements' labels to their default values. Signature: readonly resetElementLabel: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.resetgrouplabel.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.resetgrouplabel.html",
    "title": "commands.ISystemCommands.resetGroupLabel property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > resetGroupLabel commands.ISystemCommands.resetGroupLabel property Gets the identifier of the system command that resets the selected groups' labels to their default values. Signature: readonly resetGroupLabel: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.isystemcommands.savechart.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.savechart.html",
    "title": "commands.ISystemCommands.saveChart property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > saveChart commands.ISystemCommands.saveChart property Gets the identifier of the system command that saves the current chart. Signature: readonly saveChart: CommandId; Returns: CommandId Introduced: version 1.1"
  },
  "api/notebook-sdk.commands.isystemcommands.selectall.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.selectall.html",
    "title": "commands.ISystemCommands.selectAll property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > selectAll commands.ISystemCommands.selectAll property Gets the identifier of the system command that selects all elements on the chart. Signature: readonly selectAll: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.selectattached.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.selectattached.html",
    "title": "commands.ISystemCommands.selectAttached property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > selectAttached commands.ISystemCommands.selectAttached property Gets the identifier of the system command that adds attached elements to the current selection. Signature: readonly selectAttached: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.selectinvert.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.selectinvert.html",
    "title": "commands.ISystemCommands.selectInvert property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > selectInvert commands.ISystemCommands.selectInvert property Gets the identifier of the system command that inverts chart selection. Signature: readonly selectInvert: CommandId; Returns: CommandId Introduced: version 1.2"
  },
  "api/notebook-sdk.commands.isystemcommands.selectuniteditems.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.selectuniteditems.html",
    "title": "commands.ISystemCommands.selectUnitedItems property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > selectUnitedItems commands.ISystemCommands.selectUnitedItems property Gets the identifier of the system command that selects united items. Signature: readonly selectUnitedItems: CommandId; Returns: CommandId Introduced: version 1.8 Remarks A united item is a entity or link that contains multiple records."
  },
  "api/notebook-sdk.commands.isystemcommands.sharerecords.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.sharerecords.html",
    "title": "commands.ISystemCommands.shareRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > shareRecords commands.ISystemCommands.shareRecords property Gets the identifier of the system command that allows users to share records with each other. Signature: readonly shareRecords: CommandId; Returns: CommandId Introduced: version 1.3"
  },
  "api/notebook-sdk.commands.isystemcommands.togglechartingpreferences.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.togglechartingpreferences.html",
    "title": "commands.ISystemCommands.toggleChartingPreferences property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleChartingPreferences commands.ISystemCommands.toggleChartingPreferences property Gets the identifier of the system command that toggles the charting preferences UI. Signature: readonly toggleChartingPreferences: CommandId; Returns: CommandId Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.isystemcommands.toggleexpand.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.toggleexpand.html",
    "title": "commands.ISystemCommands.toggleExpand property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleExpand commands.ISystemCommands.toggleExpand property Gets the identifier of the system command that toggles the Expand-with-conditions UI. Signature: readonly toggleExpand: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.toggleexplore.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.toggleexplore.html",
    "title": "commands.ISystemCommands.toggleExplore property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleExplore commands.ISystemCommands.toggleExplore property Gets the identifier of the system command that toggles the explore selection UI. Signature: readonly toggleExplore: CommandId; Returns: CommandId Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.isystemcommands.toggleexternalsearches.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.toggleexternalsearches.html",
    "title": "commands.ISystemCommands.toggleExternalSearches property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleExternalSearches commands.ISystemCommands.toggleExternalSearches property Gets the identifier of the system command that toggles the External Searches UI. Signature: readonly toggleExternalSearches: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.togglelists.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.togglelists.html",
    "title": "commands.ISystemCommands.toggleLists property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleLists commands.ISystemCommands.toggleLists property Gets the identifier of the system command that toggles the lists UI. Signature: readonly toggleLists: CommandId; Returns: CommandId Introduced: version 1.3"
  },
  "api/notebook-sdk.commands.isystemcommands.togglemap.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.togglemap.html",
    "title": "commands.ISystemCommands.toggleMap property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleMap commands.ISystemCommands.toggleMap property Gets the identifier of the system command that toggles the map UI. Signature: readonly toggleMap: CommandId; Returns: CommandId Introduced: version 1.1"
  },
  "api/notebook-sdk.commands.isystemcommands.togglepalette.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.togglepalette.html",
    "title": "commands.ISystemCommands.togglePalette property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > togglePalette commands.ISystemCommands.togglePalette property Gets the identifier of the system command that toggles the palette UI. Signature: readonly togglePalette: CommandId; Returns: CommandId Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.isystemcommands.togglequicksearch.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.togglequicksearch.html",
    "title": "commands.ISystemCommands.toggleQuickSearch property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleQuickSearch commands.ISystemCommands.toggleQuickSearch property Gets the identifier of the system command that toggles the Quick Search UI. Signature: readonly toggleQuickSearch: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.togglerecordinspector.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.togglerecordinspector.html",
    "title": "commands.ISystemCommands.toggleRecordInspector property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleRecordInspector commands.ISystemCommands.toggleRecordInspector property Gets the identifier of the system command that toggles the Record Inspector UI. Signature: readonly toggleRecordInspector: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.togglestyling.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.togglestyling.html",
    "title": "commands.ISystemCommands.toggleStyling property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleStyling commands.ISystemCommands.toggleStyling property Gets the identifier of the system command that toggles the style UI. Signature: readonly toggleStyling: CommandId; Returns: CommandId Introduced: version 1.2"
  },
  "api/notebook-sdk.commands.isystemcommands.togglevisualquery.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.togglevisualquery.html",
    "title": "commands.ISystemCommands.toggleVisualQuery property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > toggleVisualQuery commands.ISystemCommands.toggleVisualQuery property Gets the identifier of the system command that toggles the Visual Query UI. Signature: readonly toggleVisualQuery: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.undo.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.undo.html",
    "title": "commands.ISystemCommands.undo property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > undo commands.ISystemCommands.undo property Gets the identifier of the \"Undo\" system command. Signature: readonly undo: CommandId; Returns: CommandId Introduced: version 1.0"
  },
  "api/notebook-sdk.commands.isystemcommands.ungroupnodes.html": {
    "href": "api/notebook-sdk.commands.isystemcommands.ungroupnodes.html",
    "title": "commands.ISystemCommands.ungroupNodes property",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > ISystemCommands > ungroupNodes commands.ISystemCommands.ungroupNodes property Gets the identifier of the system command that removes selected nodes from their group. Signature: readonly ungroupNodes: CommandId; Returns: CommandId Introduced: version 1.8"
  },
  "api/notebook-sdk.commands.recordscontextchangelistener.html": {
    "href": "api/notebook-sdk.commands.recordscontextchangelistener.html",
    "title": "commands.RecordsContextChangeListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > RecordsContextChangeListener commands.RecordsContextChangeListener type A callback function that handles records context change events. Signature: type RecordsContextChangeListener = (recordsContext: IRecordsContext & app.IChangeSource) => void; References: IRecordsContext <!-- --> , app.IChangeSource Introduced: version 1.0 Parameters Parameter Description recordsContext The records that were pertinent in the context of the surfaced command at the moment the callback was invoked, and the source of the change to those records."
  },
  "api/notebook-sdk.commands.ribbontabid.html": {
    "href": "api/notebook-sdk.commands.ribbontabid.html",
    "title": "commands.RibbonTabId type",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > RibbonTabId commands.RibbonTabId type An identifier for a tab in the application ribbon. Signature: type RibbonTabId = string; Introduced: version 1.6"
  },
  "api/notebook-sdk.commands.tabspecifier.html": {
    "href": "api/notebook-sdk.commands.tabspecifier.html",
    "title": "commands.TabSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > commands > TabSpecifier commands.TabSpecifier type A common specifier for a tab in the application ribbon. Signature: type TabSpecifier = RibbonTabId | IRibbonTabActionArea | IHomeTabActionArea | ICollectTabActionArea | IAnalyzeTabActionArea | IDisseminateTabActionArea; References: RibbonTabId <!-- --> , IRibbonTabActionArea <!-- --> , IHomeTabActionArea <!-- --> , ICollectTabActionArea <!-- --> , IAnalyzeTabActionArea <!-- --> , IDisseminateTabActionArea Introduced: version 1.7"
  },
  "api/notebook-sdk.data.basetextdirection.html": {
    "href": "api/notebook-sdk.data.basetextdirection.html",
    "title": "data.BaseTextDirection type",
    "keywords": "Home > @i2analyze/notebook-sdk > data > BaseTextDirection data.BaseTextDirection type The direction of some bidirectional text, which describes how it should be wrapped with Unicode Control Characters (UCC). Signature: type BaseTextDirection = 'ltr' | 'rtl' | 'contextual' | 'inherit'; Introduced: version 1.0 Remarks The possible values for the direction are: contextual - Text is surrounded with LRE/RLE/PDF characters, depending on its contents. Text that looks to be left-to-right is surrounded with LRE-PDF, and text that looks to be right-to-left is surrounded with RLE-PDF. ltr - Text is surrounded with LRE-PDF, irrespective of the text contents. rtl - Text is surrounded with RLE-PDF, irrespective of the text contents. inherit - Text is not marked up at all, and we rely on inherited browser behavior."
  },
  "api/notebook-sdk.data.charlimitunits.html": {
    "href": "api/notebook-sdk.data.charlimitunits.html",
    "title": "data.CharLimitUnits type",
    "keywords": "Home > @i2analyze/notebook-sdk > data > CharLimitUnits data.CharLimitUnits type The units to use in constraints on the length of string values. Signature: type CharLimitUnits = 'utf8bytes' | 'utf16codeunits'; Introduced: version 1.0"
  },
  "api/notebook-sdk.data.html": {
    "href": "api/notebook-sdk.data.html",
    "title": "data namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > data data namespace The members of the data namespace determine how property and metadata values are stored and represented. Signature: export declare namespace data Introduced: version 1.0 Interfaces Interface Description ICharLimit A constraint on the length of a string value. IDecimal A decimal value. IFormatter A set of methods for formatting property values in i2 Notebook. IFormattingOptions A set of options for the formatting functions in IFormatter <!-- --> . IGeoPoint A position on a map. IGeoPointData A set of data for creating a geospatial position. IImage An image that might be displayed in the i2 Notebook application. IKeyedReadOnlyCollection A non-modifiable collection of objects, with efficient lookup by key. ILabelDetailsBase A set of information that is common to all labels. ILocalDate A date without an accompanying time or time zone. ILocalDateTime A date and a time without an accompanying time zone. ILocalTime A time without an accompanying date or time zone. IReadOnlyCollection A non-modifiable collection of objects. ITimeZone A time zone. IUser An i2 Notebook user. IUserAndDateAndTime A user and a point in time, typically representing when and by whom an action took place. IValueNotFetched A value that has not been fetched from the server. IZonedDateTime A date and time with an accompanying time zone. Type Aliases Type Alias Description BaseTextDirection The direction of some bidirectional text, which describes how it should be wrapped with Unicode Control Characters (UCC). CharLimitUnits The units to use in constraints on the length of string values. ILabelDetails A label for an element or a record. LinkDirection The direction of a link. LogicalType A logical type for the value of a record property. PropertyValue A value for a property of a record. TimeZoneId A time zone identifier."
  },
  "api/notebook-sdk.data.icharlimit.html": {
    "href": "api/notebook-sdk.data.icharlimit.html",
    "title": "data.ICharLimit interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ICharLimit data.ICharLimit interface A constraint on the length of a string value. Signature: interface ICharLimit Introduced: version 1.0 Properties Property Modifiers Type Description maxLength readonly number Gets the maximum length of the string. maxLengthUnits readonly CharLimitUnits Gets the units in which to interpret maxLength ."
  },
  "api/notebook-sdk.data.icharlimit.maxlength.html": {
    "href": "api/notebook-sdk.data.icharlimit.maxlength.html",
    "title": "data.ICharLimit.maxLength property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ICharLimit > maxLength data.ICharLimit.maxLength property Gets the maximum length of the string. Signature: readonly maxLength: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.icharlimit.maxlengthunits.html": {
    "href": "api/notebook-sdk.data.icharlimit.maxlengthunits.html",
    "title": "data.ICharLimit.maxLengthUnits property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ICharLimit > maxLengthUnits data.ICharLimit.maxLengthUnits property Gets the units in which to interpret maxLength <!-- --> . Signature: readonly maxLengthUnits: CharLimitUnits; Returns: CharLimitUnits Introduced: version 1.0"
  },
  "api/notebook-sdk.data.idecimal.asapproximatenumber.html": {
    "href": "api/notebook-sdk.data.idecimal.asapproximatenumber.html",
    "title": "data.IDecimal.asApproximateNumber() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IDecimal > asApproximateNumber data.IDecimal.asApproximateNumber() method Converts the decimal value to an approximate JavaScript number. Signature: asApproximateNumber(): number; Returns: number A number that approximates the original value. Introduced: version 1.0 Remarks Note: Significant precision can be lost in the conversion process."
  },
  "api/notebook-sdk.data.idecimal.html": {
    "href": "api/notebook-sdk.data.idecimal.html",
    "title": "data.IDecimal interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IDecimal data.IDecimal interface A decimal value. Signature: interface IDecimal Introduced: version 1.0 Remarks Decimals are large numbers represented with greater accuracy than floating point numbers. They can have up to 18 digits before the decimal separator, and 4 digits after it. Methods Method Description asApproximateNumber() Converts the decimal value to an approximate JavaScript number. toTransportString() Gets the decimal value as a string to be transported."
  },
  "api/notebook-sdk.data.idecimal.totransportstring.html": {
    "href": "api/notebook-sdk.data.idecimal.totransportstring.html",
    "title": "data.IDecimal.toTransportString() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IDecimal > toTransportString data.IDecimal.toTransportString() method Gets the decimal value as a string to be transported. Signature: toTransportString(): string; Returns: string A string representation of the value. Introduced: version 1.0 Remarks The string is intended for transport, not display. Use a data.IFormatter to produce a display string."
  },
  "api/notebook-sdk.data.iformatter.formatvalue.html": {
    "href": "api/notebook-sdk.data.iformatter.formatvalue.html",
    "title": "data.IFormatter.formatValue() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormatter > formatValue data.IFormatter.formatValue() method Formats a value as a string, using settings from the current locale as appropriate. Signature: formatValue(value: PropertyValue, options?: IFormattingOptions): string; Introduced: version 1.0 Parameters Parameter Type Description value PropertyValue The value to format. options IFormattingOptions (Optional) A set of options that control some aspects of the format. Returns: string A string representation of the formatted value."
  },
  "api/notebook-sdk.data.iformatter.formatvalueorfallback.html": {
    "href": "api/notebook-sdk.data.iformatter.formatvalueorfallback.html",
    "title": "data.IFormatter.formatValueOrFallback() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormatter > formatValueOrFallback data.IFormatter.formatValueOrFallback() method Formats a value as a string, falling back to localized \"No value\" text if the value is undefined <!-- --> . Signature: formatValueOrFallback(value: PropertyValue | undefined, options?: IFormattingOptions): string; Introduced: version 1.0 Parameters Parameter Type Description value PropertyValue | undefined The value to format. options IFormattingOptions (Optional) A set of options that control some aspects of the format. Returns: string A string representation of the formatted value."
  },
  "api/notebook-sdk.data.iformatter.formatvalueorundefined.html": {
    "href": "api/notebook-sdk.data.iformatter.formatvalueorundefined.html",
    "title": "data.IFormatter.formatValueOrUndefined() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormatter > formatValueOrUndefined data.IFormatter.formatValueOrUndefined() method Formats a value as a string, or returns undefined if the value is undefined <!-- --> . Signature: formatValueOrUndefined(value: PropertyValue | undefined, options?: IFormattingOptions): string | undefined; Introduced: version 1.0 Parameters Parameter Type Description value PropertyValue | undefined The value to format. options IFormattingOptions (Optional) A set of options that control some aspects of the format. Returns: string | undefined A string representation of the formatted value, or undefined if value is undefined <!-- --> ."
  },
  "api/notebook-sdk.data.iformatter.html": {
    "href": "api/notebook-sdk.data.iformatter.html",
    "title": "data.IFormatter interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormatter data.IFormatter interface A set of methods for formatting property values in i2 Notebook. Signature: interface IFormatter Introduced: version 1.0 Remarks For consistency with the rest of the i2 Notebook application, it is important that plug-ins use the methods here rather than manipulating values themselves. These methods automatically use the appropriate formatting and translation locales, and use the same formatting rules as the rest of i2 Notebook. Methods Method Description formatValue(value, options) Formats a value as a string, using settings from the current locale as appropriate. formatValueOrFallback(value, options) Formats a value as a string, falling back to localized \"No value\" text if the value is undefined . formatValueOrUndefined(value, options) Formats a value as a string, or returns undefined if the value is undefined . wrapForBidi(value, mode, forceTextDirection) Wraps an input string in invisible Unicode Control Characters (LRE, RLE, PDF) to provide correct bidirectional behavior for the specified text direction. wrapForBidi(value, mode, forceTextDirection) Wraps an input string in invisible Unicode Control Characters (LRE, RLE, PDF) to provide correct bidirectional behavior for the specified text direction."
  },
  "api/notebook-sdk.data.iformatter.wrapforbidi.html": {
    "href": "api/notebook-sdk.data.iformatter.wrapforbidi.html",
    "title": "data.IFormatter.wrapForBidi() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormatter > wrapForBidi data.IFormatter.wrapForBidi() method Wraps an input string in invisible Unicode Control Characters (LRE, RLE, PDF) to provide correct bidirectional behavior for the specified text direction. Signature: wrapForBidi(value: string, mode: 'raw' | 'wrapParens' | 'wrapSingleQuotes' | 'wrapDoubleQuotes', forceTextDirection?: BaseTextDirection): string; Introduced: version 1.0 Parameters Parameter Type Description value string The string to wrap. mode 'raw' | 'wrapParens' | 'wrapSingleQuotes' | 'wrapDoubleQuotes' An indication of whether to put the string between parentheses, single quotes, or double quotes before bidi wrapping takes place. forceTextDirection BaseTextDirection (Optional) The text direction to use, overriding the application-wide, user-configured direction. Returns: string A string wrapped as specified by mode and forceTextDirection <!-- --> . Remarks For a plug-in that deals with bidirectional text, it is sometimes necessary to provide assistance to the browser so that it keeps text together correctly. This method provides an easy way to wrap strings with appropriate control characters, based on the application-wide, user-configurable base text direction and the text itself. For example, the English text \"(optional)\" might get rendered as \")optional)\" in a right-to-left page, because of the way browsers treat 'weak' Unicode characters such as parentheses. Wrapping the text with control characters, as in \"LRE(optional)PDF\" <!-- --> , tells the browser to treat the whole string as a single piece of left-to-right text. Anything that should be treated as a single run of text must be passed directly to this method. Do not, for example, call the method to wrap text and then put parentheses around the text - the parentheses must be wrapped too. You can direct this method to put parentheses or quotes around your string before wrapping it with Unicode Control Characters by specifying different values for the mode parameter. If you need to use other characters, add them manually and then use the raw wrapping mode."
  },
  "api/notebook-sdk.data.iformatter.wrapforbidi_1.html": {
    "href": "api/notebook-sdk.data.iformatter.wrapforbidi_1.html",
    "title": "data.IFormatter.wrapForBidi() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormatter > wrapForBidi data.IFormatter.wrapForBidi() method Wraps an input string in invisible Unicode Control Characters (LRE, RLE, PDF) to provide correct bidirectional behavior for the specified text direction. Signature: wrapForBidi(value: string | undefined, mode: 'raw' | 'wrapParens' | 'wrapSingleQuotes' | 'wrapDoubleQuotes', forceTextDirection?: BaseTextDirection): string | undefined; Parameters Parameter Type Description value string | undefined The string to wrap. mode 'raw' | 'wrapParens' | 'wrapSingleQuotes' | 'wrapDoubleQuotes' An indication of whether to put the string between parentheses, single quotes, or double quotes before bidi wrapping takes place. forceTextDirection BaseTextDirection (Optional) The text direction to use, overriding the application-wide, user-configured direction. Returns: string | undefined A string wrapped as specified by mode and forceTextDirection <!-- --> . Remarks For a plug-in that deals with bidirectional text, it is sometimes necessary to provide assistance to the browser so that it keeps text together correctly. This method provides an easy way to wrap strings with appropriate control characters, based on the application-wide, user-configurable base text direction and the text itself. For example, the English text \"(optional)\" might get rendered as \")optional)\" in a right-to-left page, because of the way browsers treat 'weak' Unicode characters such as parentheses. Wrapping the text with control characters, as in \"LRE(optional)PDF\" <!-- --> , tells the browser to treat the whole string as a single piece of left-to-right text. Anything that should be treated as a single run of text must be passed directly to this method. Do not, for example, call the method to wrap text and then put parentheses around the text - the parentheses must be wrapped too. You can direct this method to put parentheses or quotes around your string before wrapping it with Unicode Control Characters by specifying different values for the mode parameter. If you need to use other characters, add them manually and then use the raw wrapping mode."
  },
  "api/notebook-sdk.data.iformattingoptions.html": {
    "href": "api/notebook-sdk.data.iformattingoptions.html",
    "title": "data.IFormattingOptions interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormattingOptions data.IFormattingOptions interface A set of options for the formatting functions in IFormatter <!-- --> . Signature: interface IFormattingOptions Introduced: version 1.0 Properties Property Modifiers Type Description showMillis? readonly 'never' | 'always' | 'ifpresent' (Optional) Gets a value indicating whether to show milliseconds in formatted time and date-time values. useGrouping? readonly boolean (Optional) Indicates whether numbers should be formatted with or without grouping separators."
  },
  "api/notebook-sdk.data.iformattingoptions.showmillis.html": {
    "href": "api/notebook-sdk.data.iformattingoptions.showmillis.html",
    "title": "data.IFormattingOptions.showMillis property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormattingOptions > showMillis data.IFormattingOptions.showMillis property Gets a value indicating whether to show milliseconds in formatted time and date-time values. Signature: readonly showMillis?: 'never' | 'always' | 'ifpresent'; Returns: 'never' | 'always' | 'ifpresent' Default value: 'ifpresent' Introduced: version 1.0 Remarks Use 'always' to add milliseconds to the output in all circumstances (even if the milliseconds value is zero); 'never' to suppress milliseconds from the output (even if the value is non-zero); and 'ifpresent' to add milliseconds to the output only if the milliseconds value is non-zero."
  },
  "api/notebook-sdk.data.iformattingoptions.usegrouping.html": {
    "href": "api/notebook-sdk.data.iformattingoptions.usegrouping.html",
    "title": "data.IFormattingOptions.useGrouping property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IFormattingOptions > useGrouping data.IFormattingOptions.useGrouping property Indicates whether numbers should be formatted with or without grouping separators. Signature: readonly useGrouping?: boolean; Returns: boolean Default value: true Introduced: version 1.0 Remarks Grouping separators are sometimes called \"thousands separators\", but some locales use groupings at intervals other than thousands. Common grouping separators include spaces, commas, and periods."
  },
  "api/notebook-sdk.data.igeopoint.html": {
    "href": "api/notebook-sdk.data.igeopoint.html",
    "title": "data.IGeoPoint interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IGeoPoint data.IGeoPoint interface A position on a map. Signature: interface IGeoPoint Introduced: version 1.0 Properties Property Modifiers Type Description latitude readonly number Gets the latitude of the position, in degrees north. longitude readonly number Gets the longitude of the position, in degrees east. type readonly 'point' Gets the type of the position."
  },
  "api/notebook-sdk.data.igeopoint.latitude.html": {
    "href": "api/notebook-sdk.data.igeopoint.latitude.html",
    "title": "data.IGeoPoint.latitude property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IGeoPoint > latitude data.IGeoPoint.latitude property Gets the latitude of the position, in degrees north. Signature: readonly latitude: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.igeopoint.longitude.html": {
    "href": "api/notebook-sdk.data.igeopoint.longitude.html",
    "title": "data.IGeoPoint.longitude property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IGeoPoint > longitude data.IGeoPoint.longitude property Gets the longitude of the position, in degrees east. Signature: readonly longitude: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.igeopoint.type.html": {
    "href": "api/notebook-sdk.data.igeopoint.type.html",
    "title": "data.IGeoPoint.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IGeoPoint > type data.IGeoPoint.type property Gets the type of the position. Signature: readonly type: 'point'; Returns: 'point' Introduced: version 1.0"
  },
  "api/notebook-sdk.data.igeopointdata.html": {
    "href": "api/notebook-sdk.data.igeopointdata.html",
    "title": "data.IGeoPointData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IGeoPointData data.IGeoPointData interface A set of data for creating a geospatial position. Signature: interface IGeoPointData Introduced: version 1.1 Properties Property Modifiers Type Description latitude readonly number Gets the latitude of the new position, in degrees north. longitude readonly number Gets the longitude of the new position, in degrees east."
  },
  "api/notebook-sdk.data.igeopointdata.latitude.html": {
    "href": "api/notebook-sdk.data.igeopointdata.latitude.html",
    "title": "data.IGeoPointData.latitude property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IGeoPointData > latitude data.IGeoPointData.latitude property Gets the latitude of the new position, in degrees north. Signature: readonly latitude: number; Returns: number Introduced: version 1.1"
  },
  "api/notebook-sdk.data.igeopointdata.longitude.html": {
    "href": "api/notebook-sdk.data.igeopointdata.longitude.html",
    "title": "data.IGeoPointData.longitude property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IGeoPointData > longitude data.IGeoPointData.longitude property Gets the longitude of the new position, in degrees east. Signature: readonly longitude: number; Returns: number Introduced: version 1.1"
  },
  "api/notebook-sdk.data.iimage.description.html": {
    "href": "api/notebook-sdk.data.iimage.description.html",
    "title": "data.IImage.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IImage > description data.IImage.description property Gets a description of the image to use as alternative text, for example. Signature: readonly description: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.data.iimage.href.html": {
    "href": "api/notebook-sdk.data.iimage.href.html",
    "title": "data.IImage.href property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IImage > href data.IImage.href property Gets the URL of the image. Signature: readonly href: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.data.iimage.html": {
    "href": "api/notebook-sdk.data.iimage.html",
    "title": "data.IImage interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IImage data.IImage interface An image that might be displayed in the i2 Notebook application. Signature: interface IImage Introduced: version 1.0 Properties Property Modifiers Type Description description readonly string Gets a description of the image to use as alternative text, for example. href readonly string Gets the URL of the image."
  },
  "api/notebook-sdk.data.ikeyedreadonlycollection.entries.html": {
    "href": "api/notebook-sdk.data.ikeyedreadonlycollection.entries.html",
    "title": "data.IKeyedReadOnlyCollection.entries() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IKeyedReadOnlyCollection > entries data.IKeyedReadOnlyCollection.entries() method Retrieves an iterator over all the objects in the collection. Signature: entries(): Iterable<[K, V]>; Returns: Iterable<[K, V]> An iterable collection in which the keys are of type K and the values are of type V <!-- --> . Introduced: version 1.3"
  },
  "api/notebook-sdk.data.ikeyedreadonlycollection.get.html": {
    "href": "api/notebook-sdk.data.ikeyedreadonlycollection.get.html",
    "title": "data.IKeyedReadOnlyCollection.get() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IKeyedReadOnlyCollection > get data.IKeyedReadOnlyCollection.get() method Retrieves the object associated with the specified key. Signature: get(key: K): V | undefined; Introduced: version 1.0 Parameters Parameter Type Description key K The key of the object to return from the collection. Returns: V | undefined The corresponding object, or undefined if the object is not in the collection."
  },
  "api/notebook-sdk.data.ikeyedreadonlycollection.has.html": {
    "href": "api/notebook-sdk.data.ikeyedreadonlycollection.has.html",
    "title": "data.IKeyedReadOnlyCollection.has() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IKeyedReadOnlyCollection > has data.IKeyedReadOnlyCollection.has() method Tests whether an object with the specified key exists. Signature: has(key: K): boolean; Introduced: version 1.0 Parameters Parameter Type Description key K The key of the object to check for presence in the collection. Returns: boolean true if the object exists in the collection; false otherwise."
  },
  "api/notebook-sdk.data.ikeyedreadonlycollection.html": {
    "href": "api/notebook-sdk.data.ikeyedreadonlycollection.html",
    "title": "data.IKeyedReadOnlyCollection interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IKeyedReadOnlyCollection data.IKeyedReadOnlyCollection interface A non-modifiable collection of objects, with efficient lookup by key. Signature: interface IKeyedReadOnlyCollection<K, V> extends IReadOnlyCollection<V> Extends: IReadOnlyCollection <!-- --> <V> Introduced: version 1.0 Type Parameters Parameter Type Description K any The type of the keys for the collection. V any The type of the objects in the collection. Properties Property Modifiers Type Description size readonly number Gets the number of objects in the collection. (Inherited from IReadOnlyCollection <!-- --> ) Methods Method Description [Symbol.iterator]() Returns an object that can be used to iterate over all objects in the collection. (Inherited from IReadOnlyCollection <!-- --> ) entries() Retrieves an iterator over all the objects in the collection. every(predicate) Tests whether all objects in the collection satisfy a predicate. (Inherited from IReadOnlyCollection <!-- --> ) filter(predicate) Returns a new collection with all objects that satisfy a typeguard. (Inherited from IReadOnlyCollection <!-- --> ) filter(predicate) Returns a new collection with all objects that satisfy a predicate. (Inherited from IReadOnlyCollection <!-- --> ) find(predicate) Returns the first object in the collection that satisfies a predicate. (Inherited from IReadOnlyCollection <!-- --> ) firstOrDefault(defaultValue) Returns the first object in the collection, or a default object if the collection is empty. (Inherited from IReadOnlyCollection <!-- --> ) get(key) Retrieves the object associated with the specified key. has(key) Tests whether an object with the specified key exists. includes(v) Tests whether a collection includes an object. (Inherited from IReadOnlyCollection <!-- --> ) isEmpty() Executes firstOrDefault to see if the collection has any elements. If the collection has elements, returns false. Otherwise, returns true. (Inherited from IReadOnlyCollection <!-- --> ) map(callbackfn) Returns a new collection populated with the results of calling a function on each object. (Inherited from IReadOnlyCollection <!-- --> ) reduce(callbackfn, initialValue) Executes a reducer function on each object in the collection, to reduce it to a single object. (Inherited from IReadOnlyCollection <!-- --> ) reduceRight(callbackfn, initialValue) Executes a reducer function on each object in the collection in right-to-left order. (Inherited from IReadOnlyCollection <!-- --> ) some(predicate) Tests whether at least one object in the collection satisfies a predicate. (Inherited from IReadOnlyCollection <!-- --> ) toArray() Returns a new, read-only array that contains all the objects in the collection. (Inherited from IReadOnlyCollection <!-- --> )"
  },
  "api/notebook-sdk.data.ilabeldetails.html": {
    "href": "api/notebook-sdk.data.ilabeldetails.html",
    "title": "data.ILabelDetails type",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILabelDetails data.ILabelDetails type Warning: This API is now obsolete. Deprecated since version 1.5. Use data.ILabelDetailsBase <!-- --> , records.IRecordLabelDetails <!-- --> , or visual.IElementLabelDetails instead. A label for an element or a record. Signature: type ILabelDetails = ILabelDetailsBase; References: ILabelDetailsBase Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilabeldetailsbase.haslabel.html": {
    "href": "api/notebook-sdk.data.ilabeldetailsbase.haslabel.html",
    "title": "data.ILabelDetailsBase.hasLabel property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILabelDetailsBase > hasLabel data.ILabelDetailsBase.hasLabel property Indicates whether the label is not empty. Signature: readonly hasLabel: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilabeldetailsbase.html": {
    "href": "api/notebook-sdk.data.ilabeldetailsbase.html",
    "title": "data.ILabelDetailsBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILabelDetailsBase data.ILabelDetailsBase interface A set of information that is common to all labels. Signature: interface ILabelDetailsBase Introduced: version 1.5 Properties Property Modifiers Type Description hasLabel readonly boolean Indicates whether the label is not empty. labelOrEmpty readonly string Gets the label or, if the label is empty, an empty string. labelOrFallback readonly string Gets the label or, if the label is empty, a standard fallback string such as ' <!-- --> < <!-- --> No value <!-- --> > <!-- --> '."
  },
  "api/notebook-sdk.data.ilabeldetailsbase.labelorempty.html": {
    "href": "api/notebook-sdk.data.ilabeldetailsbase.labelorempty.html",
    "title": "data.ILabelDetailsBase.labelOrEmpty property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILabelDetailsBase > labelOrEmpty data.ILabelDetailsBase.labelOrEmpty property Gets the label or, if the label is empty, an empty string. Signature: readonly labelOrEmpty: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilabeldetailsbase.labelorfallback.html": {
    "href": "api/notebook-sdk.data.ilabeldetailsbase.labelorfallback.html",
    "title": "data.ILabelDetailsBase.labelOrFallback property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILabelDetailsBase > labelOrFallback data.ILabelDetailsBase.labelOrFallback property Gets the label or, if the label is empty, a standard fallback string such as ' <!-- --> < <!-- --> No value <!-- --> > <!-- --> '. Signature: readonly labelOrFallback: string; Returns: string Introduced: version 1.0 Remarks To distinguish between a label that's been set and a fallback string, inspect hasLabel <!-- --> ."
  },
  "api/notebook-sdk.data.ilocaldate.day.html": {
    "href": "api/notebook-sdk.data.ilocaldate.day.html",
    "title": "data.ILocalDate.day property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDate > day data.ILocalDate.day property Gets the day of the month as a value from 1-31 inclusive. Signature: readonly day: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaldate.html": {
    "href": "api/notebook-sdk.data.ilocaldate.html",
    "title": "data.ILocalDate interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDate data.ILocalDate interface A date without an accompanying time or time zone. Signature: interface ILocalDate Introduced: version 1.0 Properties Property Modifiers Type Description day readonly number Gets the day of the month as a value from 1-31 inclusive. month readonly number Gets the month of the year as a value from 1-12 inclusive. year readonly number Gets the year. Methods Method Description toJSDate() Gets the date as a JavaScript Date object."
  },
  "api/notebook-sdk.data.ilocaldate.month.html": {
    "href": "api/notebook-sdk.data.ilocaldate.month.html",
    "title": "data.ILocalDate.month property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDate > month data.ILocalDate.month property Gets the month of the year as a value from 1-12 inclusive. Signature: readonly month: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaldate.tojsdate.html": {
    "href": "api/notebook-sdk.data.ilocaldate.tojsdate.html",
    "title": "data.ILocalDate.toJSDate() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDate > toJSDate data.ILocalDate.toJSDate() method Gets the date as a JavaScript Date object. Signature: toJSDate(): Date; Returns: Date The date, as a Date <!-- --> . Introduced: version 1.0 Remarks The time in the Date object is set to midnight on the date in question, in the local time zone. This behavior is equivalent to the expression new Date(year, month, day) in JavaScript."
  },
  "api/notebook-sdk.data.ilocaldate.year.html": {
    "href": "api/notebook-sdk.data.ilocaldate.year.html",
    "title": "data.ILocalDate.year property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDate > year data.ILocalDate.year property Gets the year. Signature: readonly year: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaldatetime.date.html": {
    "href": "api/notebook-sdk.data.ilocaldatetime.date.html",
    "title": "data.ILocalDateTime.date property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDateTime > date data.ILocalDateTime.date property Gets the date. Signature: readonly date: ILocalDate; Returns: ILocalDate Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaldatetime.html": {
    "href": "api/notebook-sdk.data.ilocaldatetime.html",
    "title": "data.ILocalDateTime interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDateTime data.ILocalDateTime interface A date and a time without an accompanying time zone. Signature: interface ILocalDateTime Introduced: version 1.0 Properties Property Modifiers Type Description date readonly ILocalDate Gets the date. time readonly ILocalTime Gets the time. Methods Method Description toJSDate() Gets the date and time as a JavaScript Date object."
  },
  "api/notebook-sdk.data.ilocaldatetime.time.html": {
    "href": "api/notebook-sdk.data.ilocaldatetime.time.html",
    "title": "data.ILocalDateTime.time property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDateTime > time data.ILocalDateTime.time property Gets the time. Signature: readonly time: ILocalTime; Returns: ILocalTime Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaldatetime.tojsdate.html": {
    "href": "api/notebook-sdk.data.ilocaldatetime.tojsdate.html",
    "title": "data.ILocalDateTime.toJSDate() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalDateTime > toJSDate data.ILocalDateTime.toJSDate() method Gets the date and time as a JavaScript Date object. Signature: toJSDate(): Date; Returns: Date The date and time, as a Date <!-- --> . Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaltime.hour.html": {
    "href": "api/notebook-sdk.data.ilocaltime.hour.html",
    "title": "data.ILocalTime.hour property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalTime > hour data.ILocalTime.hour property Gets the hour as an integer from 0-23 inclusive. Signature: readonly hour: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaltime.html": {
    "href": "api/notebook-sdk.data.ilocaltime.html",
    "title": "data.ILocalTime interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalTime data.ILocalTime interface A time without an accompanying date or time zone. Signature: interface ILocalTime Introduced: version 1.0 Properties Property Modifiers Type Description hour readonly number Gets the hour as an integer from 0-23 inclusive. milli readonly number Gets the milliseconds of the second as an integer from 0-999 inclusive. minute readonly number Gets the minutes of the hour as an integer from 0-59 inclusive. second readonly number Gets the seconds of the minute as an integer from 0-59 inclusive. Methods Method Description toJSDate() Gets the time as a JavaScript Date object."
  },
  "api/notebook-sdk.data.ilocaltime.milli.html": {
    "href": "api/notebook-sdk.data.ilocaltime.milli.html",
    "title": "data.ILocalTime.milli property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalTime > milli data.ILocalTime.milli property Gets the milliseconds of the second as an integer from 0-999 inclusive. Signature: readonly milli: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaltime.minute.html": {
    "href": "api/notebook-sdk.data.ilocaltime.minute.html",
    "title": "data.ILocalTime.minute property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalTime > minute data.ILocalTime.minute property Gets the minutes of the hour as an integer from 0-59 inclusive. Signature: readonly minute: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaltime.second.html": {
    "href": "api/notebook-sdk.data.ilocaltime.second.html",
    "title": "data.ILocalTime.second property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalTime > second data.ILocalTime.second property Gets the seconds of the minute as an integer from 0-59 inclusive. Signature: readonly second: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ilocaltime.tojsdate.html": {
    "href": "api/notebook-sdk.data.ilocaltime.tojsdate.html",
    "title": "data.ILocalTime.toJSDate() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ILocalTime > toJSDate data.ILocalTime.toJSDate() method Gets the time as a JavaScript Date object. Signature: toJSDate(): Date; Returns: Date The time, as a Date <!-- --> . Introduced: version 1.0 Remarks The date in the Date object is set to the start of the UNIX epoch: January 1st, 1970. This behavior is equivalent to the expression new Date(1970, 0, 1, hour, minute, second, milli) in JavaScript."
  },
  "api/notebook-sdk.data.ireadonlycollection._symbol.iterator_.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection._symbol.iterator_.html",
    "title": "data.IReadOnlyCollection.[Symbol.iterator]() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > [Symbol.iterator] data.IReadOnlyCollection.[Symbol.iterator]() method Returns an object that can be used to iterate over all objects in the collection. Signature: [Symbol.iterator](): Iterator<V>; Returns: Iterator<V> An iterator over the collection. Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ireadonlycollection.every.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.every.html",
    "title": "data.IReadOnlyCollection.every() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > every data.IReadOnlyCollection.every() method Tests whether all objects in the collection satisfy a predicate. Signature: every(predicate: (v: V) => boolean): boolean; Introduced: version 1.0 Parameters Parameter Type Description predicate (v: V) => boolean A predicate function to apply to each object. Returns: boolean true if the predicate is satisfied for all objects (or the collection is empty); false otherwise."
  },
  "api/notebook-sdk.data.ireadonlycollection.filter.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.filter.html",
    "title": "data.IReadOnlyCollection.filter() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > filter data.IReadOnlyCollection.filter() method Returns a new collection with all objects that satisfy a typeguard. Signature: filter<U extends V>(predicate: (v: V) => v is U): IReadOnlyCollection<U>; Introduced: version 1.0 Type Parameters Parameter Type Description U extends V The type of the objects in the new collection. Parameters Parameter Type Description predicate (v: V) => v is U A predicate function to apply to each object. Returns: IReadOnlyCollection <!-- --> <U> The new collection."
  },
  "api/notebook-sdk.data.ireadonlycollection.filter_1.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.filter_1.html",
    "title": "data.IReadOnlyCollection.filter() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > filter data.IReadOnlyCollection.filter() method Returns a new collection with all objects that satisfy a predicate. Signature: filter(predicate: (v: V) => boolean): IReadOnlyCollection<V>; Introduced: version 1.0 Parameters Parameter Type Description predicate (v: V) => boolean A predicate function to apply to each object. Returns: IReadOnlyCollection <!-- --> <V> The new collection."
  },
  "api/notebook-sdk.data.ireadonlycollection.find.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.find.html",
    "title": "data.IReadOnlyCollection.find() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > find data.IReadOnlyCollection.find() method Returns the first object in the collection that satisfies a predicate. Signature: find(predicate: (v: V) => boolean): V | undefined; Introduced: version 1.0 Parameters Parameter Type Description predicate (v: V) => boolean A predicate function to apply to each object. Returns: V | undefined The found object, or undefined if no object was found."
  },
  "api/notebook-sdk.data.ireadonlycollection.firstordefault.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.firstordefault.html",
    "title": "data.IReadOnlyCollection.firstOrDefault() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > firstOrDefault data.IReadOnlyCollection.firstOrDefault() method Returns the first object in the collection, or a default object if the collection is empty. Signature: firstOrDefault<U>(defaultValue: U): V | U; Introduced: version 1.0 Type Parameters Parameter Type Description U any The type of the default object. Parameters Parameter Type Description defaultValue U The object to return if the collection is empty. Returns: V | U The first object in the collection, or the default object if the collection is empty."
  },
  "api/notebook-sdk.data.ireadonlycollection.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.html",
    "title": "data.IReadOnlyCollection interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection data.IReadOnlyCollection interface A non-modifiable collection of objects. Signature: interface IReadOnlyCollection<V> Introduced: version 1.0 Type Parameters Parameter Type Description V any The type of the objects in the collection. Properties Property Modifiers Type Description size readonly number Gets the number of objects in the collection. Methods Method Description [Symbol.iterator]() Returns an object that can be used to iterate over all objects in the collection. every(predicate) Tests whether all objects in the collection satisfy a predicate. filter(predicate) Returns a new collection with all objects that satisfy a typeguard. filter(predicate) Returns a new collection with all objects that satisfy a predicate. find(predicate) Returns the first object in the collection that satisfies a predicate. firstOrDefault(defaultValue) Returns the first object in the collection, or a default object if the collection is empty. includes(v) Tests whether a collection includes an object. isEmpty() Executes firstOrDefault to see if the collection has any elements. If the collection has elements, returns false. Otherwise, returns true. map(callbackfn) Returns a new collection populated with the results of calling a function on each object. reduce(callbackfn, initialValue) Executes a reducer function on each object in the collection, to reduce it to a single object. reduceRight(callbackfn, initialValue) Executes a reducer function on each object in the collection in right-to-left order. some(predicate) Tests whether at least one object in the collection satisfies a predicate. toArray() Returns a new, read-only array that contains all the objects in the collection."
  },
  "api/notebook-sdk.data.ireadonlycollection.includes.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.includes.html",
    "title": "data.IReadOnlyCollection.includes() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > includes data.IReadOnlyCollection.includes() method Tests whether a collection includes an object. Signature: includes(v: V): boolean; Introduced: version 1.0 Parameters Parameter Type Description v V The object to search for. Returns: boolean true if the collection include the object; false otherwise."
  },
  "api/notebook-sdk.data.ireadonlycollection.isempty.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.isempty.html",
    "title": "data.IReadOnlyCollection.isEmpty() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > isEmpty data.IReadOnlyCollection.isEmpty() method Executes firstOrDefault to see if the collection has any elements. If the collection has elements, returns false. Otherwise, returns true. Signature: isEmpty(): boolean; Returns: boolean A boolean indicating whether the collection is empty. Introduced: version 1.8"
  },
  "api/notebook-sdk.data.ireadonlycollection.map.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.map.html",
    "title": "data.IReadOnlyCollection.map() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > map data.IReadOnlyCollection.map() method Returns a new collection populated with the results of calling a function on each object. Signature: map<U>(callbackfn: (v: V) => U): IReadOnlyCollection<U>; Introduced: version 1.0 Type Parameters Parameter Type Description U any The type of the objects in the new collection. Parameters Parameter Type Description callbackfn (v: V) => U A function to call on each object in the collection. Returns: IReadOnlyCollection <!-- --> <U> The new collection."
  },
  "api/notebook-sdk.data.ireadonlycollection.reduce.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.reduce.html",
    "title": "data.IReadOnlyCollection.reduce() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > reduce data.IReadOnlyCollection.reduce() method Executes a reducer function on each object in the collection, to reduce it to a single object. Signature: reduce<U>(callbackfn: (previousValue: U, currentValue: V, currentIndex: number) => U, initialValue: U): U; Introduced: version 1.0 Type Parameters Parameter Type Description U any The type of the single object. Parameters Parameter Type Description callbackfn (previousValue: U, currentValue: V, currentIndex: number) => U A function to apply against an accumulator and each object in the collection. initialValue U The single object to return, in its initial state. Returns: U An object that represents the reduced collection."
  },
  "api/notebook-sdk.data.ireadonlycollection.reduceright.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.reduceright.html",
    "title": "data.IReadOnlyCollection.reduceRight() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > reduceRight data.IReadOnlyCollection.reduceRight() method Executes a reducer function on each object in the collection in right-to-left order. Signature: reduceRight<U>(callbackfn: (previousValue: U, currentValue: V, currentIndex: number) => U, initialValue: U): U; Introduced: version 1.0 Type Parameters Parameter Type Description U any The type of the single object. Parameters Parameter Type Description callbackfn (previousValue: U, currentValue: V, currentIndex: number) => U A function to apply against an accumulator and each object in the collection. initialValue U The single object to return, in its initial state. Returns: U An object that represents the reduced collection."
  },
  "api/notebook-sdk.data.ireadonlycollection.size.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.size.html",
    "title": "data.IReadOnlyCollection.size property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > size data.IReadOnlyCollection.size property Gets the number of objects in the collection. Signature: readonly size: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.ireadonlycollection.some.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.some.html",
    "title": "data.IReadOnlyCollection.some() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > some data.IReadOnlyCollection.some() method Tests whether at least one object in the collection satisfies a predicate. Signature: some(predicate: (v: V) => boolean): boolean; Introduced: version 1.0 Parameters Parameter Type Description predicate (v: V) => boolean A predicate function to apply to each object. Returns: boolean true if the predicate is satisfied for at least one object; false otherwise (or if the collection is empty)."
  },
  "api/notebook-sdk.data.ireadonlycollection.toarray.html": {
    "href": "api/notebook-sdk.data.ireadonlycollection.toarray.html",
    "title": "data.IReadOnlyCollection.toArray() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IReadOnlyCollection > toArray data.IReadOnlyCollection.toArray() method Returns a new, read-only array that contains all the objects in the collection. Signature: toArray(): readonly V[]; Returns: readonly V[] The new array. Introduced: version 1.5"
  },
  "api/notebook-sdk.data.itimezone.fulldisplayname.html": {
    "href": "api/notebook-sdk.data.itimezone.fulldisplayname.html",
    "title": "data.ITimeZone.fullDisplayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ITimeZone > fullDisplayName data.ITimeZone.fullDisplayName property Gets the full display name of the time zone, which might be displayed to users. Signature: readonly fullDisplayName: string; Returns: string Introduced: version 1.0 Remarks Examples of full display names include ' ‪‪(GMT)‬ ‎‪United Kingdom Time [Europe/London]‬ <!-- --> ' and ' (GMT-05:00)‬ ‎‪New York Time‬‬ <!-- --> '."
  },
  "api/notebook-sdk.data.itimezone.getshortdisplayname.html": {
    "href": "api/notebook-sdk.data.itimezone.getshortdisplayname.html",
    "title": "data.ITimeZone.getShortDisplayName() method",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ITimeZone > getShortDisplayName data.ITimeZone.getShortDisplayName() method Gets the short display name of the time zone, which might be displayed to users. Signature: getShortDisplayName(isDst?: boolean): string; Introduced: version 1.0 Parameters Parameter Type Description isDst boolean (Optional) true to indicate that daylight saving time is in operation; false otherwise. Returns: string The short display name of the time zone. Remarks Examples of short display names include ' GMT <!-- --> ' or ' GMT+1 <!-- --> ' (for DST)."
  },
  "api/notebook-sdk.data.itimezone.html": {
    "href": "api/notebook-sdk.data.itimezone.html",
    "title": "data.ITimeZone interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ITimeZone data.ITimeZone interface A time zone. Signature: interface ITimeZone Introduced: version 1.0 Properties Property Modifiers Type Description fullDisplayName readonly string Gets the full display name of the time zone, which might be displayed to users. id readonly TimeZoneId Gets the identifier of the time zone. rawUtcOffset readonly number Gets the raw offset of the time zone from UTC, in whole seconds. Methods Method Description getShortDisplayName(isDst) Gets the short display name of the time zone, which might be displayed to users."
  },
  "api/notebook-sdk.data.itimezone.id.html": {
    "href": "api/notebook-sdk.data.itimezone.id.html",
    "title": "data.ITimeZone.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ITimeZone > id data.ITimeZone.id property Gets the identifier of the time zone. Signature: readonly id: TimeZoneId; Returns: TimeZoneId Introduced: version 1.0"
  },
  "api/notebook-sdk.data.itimezone.rawutcoffset.html": {
    "href": "api/notebook-sdk.data.itimezone.rawutcoffset.html",
    "title": "data.ITimeZone.rawUtcOffset property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > ITimeZone > rawUtcOffset data.ITimeZone.rawUtcOffset property Gets the raw offset of the time zone from UTC, in whole seconds. Signature: readonly rawUtcOffset: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.data.iuser.displayname.html": {
    "href": "api/notebook-sdk.data.iuser.displayname.html",
    "title": "data.IUser.displayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IUser > displayName data.IUser.displayName property Gets the display name of the user. Signature: readonly displayName: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.data.iuser.html": {
    "href": "api/notebook-sdk.data.iuser.html",
    "title": "data.IUser interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IUser data.IUser interface An i2 Notebook user. Signature: interface IUser Introduced: version 1.0 Properties Property Modifiers Type Description displayName readonly string Gets the display name of the user. principalName readonly string Gets the principal name (username) of the user."
  },
  "api/notebook-sdk.data.iuser.principalname.html": {
    "href": "api/notebook-sdk.data.iuser.principalname.html",
    "title": "data.IUser.principalName property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IUser > principalName data.IUser.principalName property Gets the principal name (username) of the user. Signature: readonly principalName: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.data.iuseranddateandtime.at.html": {
    "href": "api/notebook-sdk.data.iuseranddateandtime.at.html",
    "title": "data.IUserAndDateAndTime.at property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IUserAndDateAndTime > at data.IUserAndDateAndTime.at property Gets the time at which the action occurred. Signature: readonly at: IZonedDateTime; Returns: IZonedDateTime Introduced: version 1.0"
  },
  "api/notebook-sdk.data.iuseranddateandtime.by.html": {
    "href": "api/notebook-sdk.data.iuseranddateandtime.by.html",
    "title": "data.IUserAndDateAndTime.by property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IUserAndDateAndTime > by data.IUserAndDateAndTime.by property Gets the user who performed the action. Signature: readonly by: IUser; Returns: IUser Introduced: version 1.0"
  },
  "api/notebook-sdk.data.iuseranddateandtime.html": {
    "href": "api/notebook-sdk.data.iuseranddateandtime.html",
    "title": "data.IUserAndDateAndTime interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IUserAndDateAndTime data.IUserAndDateAndTime interface A user and a point in time, typically representing when and by whom an action took place. Signature: interface IUserAndDateAndTime Introduced: version 1.0 Properties Property Modifiers Type Description at readonly IZonedDateTime Gets the time at which the action occurred. by readonly IUser Gets the user who performed the action."
  },
  "api/notebook-sdk.data.ivaluenotfetched.html": {
    "href": "api/notebook-sdk.data.ivaluenotfetched.html",
    "title": "data.IValueNotFetched interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IValueNotFetched data.IValueNotFetched interface A value that has not been fetched from the server. Signature: interface IValueNotFetched Introduced: version 1.0 Remarks The server typically provides a \"not-fetched\" value when the actual value must be requested explicitly due to size or other factors. Properties Property Modifiers Type Description valueNotFetched readonly true Gets a Boolean indicating that the value was not fetched."
  },
  "api/notebook-sdk.data.ivaluenotfetched.valuenotfetched.html": {
    "href": "api/notebook-sdk.data.ivaluenotfetched.valuenotfetched.html",
    "title": "data.IValueNotFetched.valueNotFetched property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IValueNotFetched > valueNotFetched data.IValueNotFetched.valueNotFetched property Gets a Boolean indicating that the value was not fetched. Signature: readonly valueNotFetched: true; Returns: true Introduced: version 1.0"
  },
  "api/notebook-sdk.data.izoneddatetime.datetime.html": {
    "href": "api/notebook-sdk.data.izoneddatetime.datetime.html",
    "title": "data.IZonedDateTime.dateTime property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IZonedDateTime > dateTime data.IZonedDateTime.dateTime property Gets the date and time. Signature: readonly dateTime: ILocalDateTime; Returns: ILocalDateTime Introduced: version 1.0"
  },
  "api/notebook-sdk.data.izoneddatetime.html": {
    "href": "api/notebook-sdk.data.izoneddatetime.html",
    "title": "data.IZonedDateTime interface",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IZonedDateTime data.IZonedDateTime interface A date and time with an accompanying time zone. Signature: interface IZonedDateTime Introduced: version 1.0 Properties Property Modifiers Type Description dateTime readonly ILocalDateTime Gets the date and time. isDst readonly boolean Indicates whether daylight saving time is in operation. timeZone readonly ITimeZone Gets the time zone."
  },
  "api/notebook-sdk.data.izoneddatetime.isdst.html": {
    "href": "api/notebook-sdk.data.izoneddatetime.isdst.html",
    "title": "data.IZonedDateTime.isDst property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IZonedDateTime > isDst data.IZonedDateTime.isDst property Indicates whether daylight saving time is in operation. Signature: readonly isDst: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.data.izoneddatetime.timezone.html": {
    "href": "api/notebook-sdk.data.izoneddatetime.timezone.html",
    "title": "data.IZonedDateTime.timeZone property",
    "keywords": "Home > @i2analyze/notebook-sdk > data > IZonedDateTime > timeZone data.IZonedDateTime.timeZone property Gets the time zone. Signature: readonly timeZone: ITimeZone; Returns: ITimeZone Introduced: version 1.0"
  },
  "api/notebook-sdk.data.linkdirection.html": {
    "href": "api/notebook-sdk.data.linkdirection.html",
    "title": "data.LinkDirection type",
    "keywords": "Home > @i2analyze/notebook-sdk > data > LinkDirection data.LinkDirection type The direction of a link. Signature: type LinkDirection = 'none' | 'with' | 'against' | 'both'; Introduced: version 1.0"
  },
  "api/notebook-sdk.data.logicaltype.html": {
    "href": "api/notebook-sdk.data.logicaltype.html",
    "title": "data.LogicalType type",
    "keywords": "Home > @i2analyze/notebook-sdk > data > LogicalType data.LogicalType type A logical type for the value of a record property. Signature: type LogicalType = /** A single-line text string. */ 'singleLineString' /** A date with no associated time. */ | 'date' /** A time with no associated date. */ | 'time' /** A date-and-time value. */ | 'dateAndTime' /** A true/false value. */ | 'boolean' /** An integer value. */ | 'integer' /** A double-precision (64-bit) floating point value. */ | 'double' /** A decimal value that is stored accurately without rounding. */ | 'decimal' /** A multiple-line text string. */ | 'multipleLineString' /** A value that is selected from a list. */ | 'selectedFromList' /** A value that is suggested from a list. */ | 'suggestedFromList' /** A geospatial value. */ | 'geospatial'; Introduced: version 1.0"
  },
  "api/notebook-sdk.data.propertyvalue.html": {
    "href": "api/notebook-sdk.data.propertyvalue.html",
    "title": "data.PropertyValue type",
    "keywords": "Home > @i2analyze/notebook-sdk > data > PropertyValue data.PropertyValue type A value for a property of a record. Signature: type PropertyValue = boolean | number | string | ILocalDate | ILocalTime | IZonedDateTime | IGeoPoint | IDecimal; References: ILocalDate <!-- --> , ILocalTime <!-- --> , IZonedDateTime <!-- --> , IGeoPoint <!-- --> , IDecimal Introduced: version 1.0 Remarks Property values are constrained to the types that are listed in the definition."
  },
  "api/notebook-sdk.data.timezoneid.html": {
    "href": "api/notebook-sdk.data.timezoneid.html",
    "title": "data.TimeZoneId type",
    "keywords": "Home > @i2analyze/notebook-sdk > data > TimeZoneId data.TimeZoneId type A time zone identifier. Signature: type TimeZoneId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.dialog.dialogactionid.html": {
    "href": "api/notebook-sdk.dialog.dialogactionid.html",
    "title": "dialog.DialogActionId type",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > DialogActionId dialog.DialogActionId type An identifier of a dialog action. Signature: type DialogActionId = string; Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.dialogactionlistener.html": {
    "href": "api/notebook-sdk.dialog.dialogactionlistener.html",
    "title": "dialog.DialogActionListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > DialogActionListener dialog.DialogActionListener type A callback function that handles dialog action events. Signature: type DialogActionListener = (actionId: DialogActionId) => void; References: DialogActionId Introduced: version 1.4 Parameters Parameter Description actionId The identifier of the clicked button."
  },
  "api/notebook-sdk.dialog.dialogeventmap.action.html": {
    "href": "api/notebook-sdk.dialog.dialogeventmap.action.html",
    "title": "dialog.DialogEventMap.action property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > DialogEventMap > action dialog.DialogEventMap.action property Gets the type of the callback method that listens for \"action\" events. Signature: readonly action: DialogActionListener; Returns: DialogActionListener Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.dialogeventmap.html": {
    "href": "api/notebook-sdk.dialog.dialogeventmap.html",
    "title": "dialog.DialogEventMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > DialogEventMap dialog.DialogEventMap interface A mapping of dialog event types to their listener types. Signature: interface DialogEventMap extends app.ApplicationEventMap Extends: app.ApplicationEventMap Introduced: version 1.0 Properties Property Modifiers Type Description action readonly DialogActionListener Gets the type of the callback method that listens for \"action\" events. chartchange readonly ChangeListener Gets the type of the callback method that listens for \"chartchange\" events. (Inherited from ChartEventMap <!-- --> ) chartschemachange readonly ChartSchemaChangeListener Gets the type of the callback method that listens for \"chartschemachange\" events. (Inherited from ChartEventMap <!-- --> ) chartselectionchange readonly SelectionListener Gets the type of the callback method that listens for \"chartselectionchange\" events. (Inherited from ChartEventMap <!-- --> ) chartviewchange readonly ViewListener Gets the type of the callback method that listens for \"chartviewchange\" events. (Inherited from ChartEventMap <!-- --> )"
  },
  "api/notebook-sdk.dialog.dialogeventoptionsmap.action.html": {
    "href": "api/notebook-sdk.dialog.dialogeventoptionsmap.action.html",
    "title": "dialog.DialogEventOptionsMap.action property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > DialogEventOptionsMap > action dialog.DialogEventOptionsMap.action property Gets the type of the object that provides control over \"action\" event listeners. Signature: readonly action: app.ITransactionOptions; Returns: app.ITransactionOptions Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.dialogeventoptionsmap.html": {
    "href": "api/notebook-sdk.dialog.dialogeventoptionsmap.html",
    "title": "dialog.DialogEventOptionsMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > DialogEventOptionsMap dialog.DialogEventOptionsMap interface A mapping of dialog event types to their listener options types. Signature: interface DialogEventOptionsMap extends app.ApplicationEventOptionsMap Extends: app.ApplicationEventOptionsMap Introduced: version 1.4 Properties Property Modifiers Type Description action readonly app.ITransactionOptions Gets the type of the object that provides control over \"action\" event listeners. chartchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartschemachange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartschemachange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartselectionchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartselectionchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartviewchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartviewchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> )"
  },
  "api/notebook-sdk.dialog.dialogsize.html": {
    "href": "api/notebook-sdk.dialog.dialogsize.html",
    "title": "dialog.DialogSize type",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > DialogSize dialog.DialogSize type A size for a dialog window. Signature: type DialogSize = 'small' | 'medium' | 'large'; Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.html": {
    "href": "api/notebook-sdk.dialog.html",
    "title": "dialog namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog dialog namespace The members of the dialog namespace enable you to create and display dialog windows from your plug-ins that are modal with respect to the whole i2 Notebook application. Signature: export declare namespace dialog Introduced: version 1.4 Interfaces Interface Description DialogEventMap A mapping of dialog event types to their listener types. DialogEventOptionsMap A mapping of dialog event types to their listener options types. IDialogAction An action for a dialog window. IDialogActionConfig A set of information for creating or modifying a dialog action. IDialogApi A collection of methods and properties that allow plug-in dialogs to interact with i2 Notebook. IDialogConfig A set of information for creating a dialog. ISystemDialogActions A lookup table for the identifiers of the standard dialog action. Type Aliases Type Alias Description DialogActionId An identifier of a dialog action. DialogActionListener A callback function that handles dialog action events. DialogSize A size for a dialog window."
  },
  "api/notebook-sdk.dialog.idialogaction.html": {
    "href": "api/notebook-sdk.dialog.idialogaction.html",
    "title": "dialog.IDialogAction interface",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogAction dialog.IDialogAction interface An action for a dialog window. Signature: interface IDialogAction extends IDialogActionConfig Extends: IDialogActionConfig Introduced: version 1.4 Properties Property Modifiers Type Description enabled? readonly boolean (Optional) Indicates whether the action is enabled. (Inherited from IDialogActionConfig <!-- --> ) id readonly DialogActionId Gets the identifier of the action. label? readonly string (Optional) Gets the label for the action. (Inherited from IDialogActionConfig <!-- --> )"
  },
  "api/notebook-sdk.dialog.idialogaction.id.html": {
    "href": "api/notebook-sdk.dialog.idialogaction.id.html",
    "title": "dialog.IDialogAction.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogAction > id dialog.IDialogAction.id property Gets the identifier of the action. Signature: readonly id: DialogActionId; Returns: DialogActionId Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.idialogactionconfig.enabled.html": {
    "href": "api/notebook-sdk.dialog.idialogactionconfig.enabled.html",
    "title": "dialog.IDialogActionConfig.enabled property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogActionConfig > enabled dialog.IDialogActionConfig.enabled property Indicates whether the action is enabled. Signature: readonly enabled?: boolean; Returns: boolean Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.idialogactionconfig.html": {
    "href": "api/notebook-sdk.dialog.idialogactionconfig.html",
    "title": "dialog.IDialogActionConfig interface",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogActionConfig dialog.IDialogActionConfig interface A set of information for creating or modifying a dialog action. Signature: interface IDialogActionConfig Introduced: version 1.4 Properties Property Modifiers Type Description enabled? readonly boolean (Optional) Indicates whether the action is enabled. label? readonly string (Optional) Gets the label for the action."
  },
  "api/notebook-sdk.dialog.idialogactionconfig.label.html": {
    "href": "api/notebook-sdk.dialog.idialogactionconfig.label.html",
    "title": "dialog.IDialogActionConfig.label property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogActionConfig > label dialog.IDialogActionConfig.label property Gets the label for the action. Signature: readonly label?: string; Returns: string Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.idialogapi.addeventlistener.html": {
    "href": "api/notebook-sdk.dialog.idialogapi.addeventlistener.html",
    "title": "dialog.IDialogApi.addEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogApi > addEventListener dialog.IDialogApi.addEventListener() method Adds a listener for events that might affect the dialog. Signature: addEventListener<K extends keyof DialogEventMap>(type: K, listener: DialogEventMap[K], options?: DialogEventOptionsMap[K]): () => void; Introduced: version 1.4 Type Parameters Parameter Type Description K extends keyof DialogEventMap The type of event to subscribe to. Parameters Parameter Type Description type K The type of event to subscribe to. listener DialogEventMap <!-- --> [K] A function to handle the event. options DialogEventOptionsMap <!-- --> [K] (Optional) An object that controls the behavior of the listener. Returns: () => void A function that can be called to remove the listener."
  },
  "api/notebook-sdk.dialog.idialogapi.close.html": {
    "href": "api/notebook-sdk.dialog.idialogapi.close.html",
    "title": "dialog.IDialogApi.close() method",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogApi > close dialog.IDialogApi.close() method Closes the dialog without submitting it. Signature: close(): void; Returns: void Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.idialogapi.getinitialvalue.html": {
    "href": "api/notebook-sdk.dialog.idialogapi.getinitialvalue.html",
    "title": "dialog.IDialogApi.getInitialValue() method",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogApi > getInitialValue dialog.IDialogApi.getInitialValue() method Gets the data for populating the dialog when it's displayed. Signature: getInitialValue<TInitialize>(): TInitialize; Returns: TInitialize See above. Introduced: version 1.4 Type Parameters Parameter Type Description TInitialize any The type of the data for populating the dialog."
  },
  "api/notebook-sdk.dialog.idialogapi.html": {
    "href": "api/notebook-sdk.dialog.idialogapi.html",
    "title": "dialog.IDialogApi interface",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogApi dialog.IDialogApi interface A collection of methods and properties that allow plug-in dialogs to interact with i2 Notebook. Signature: interface IDialogApi extends app.IApplication Extends: app.IApplication Introduced: version 1.4 Properties Property Modifiers Type Description allTimeZones readonly data.IKeyedReadOnlyCollection <!-- --> < data.TimeZoneId <!-- --> , data.ITimeZone <!-- --> > Gets a list of all the valid time zones, in the same order as they appear in the application. (Inherited from IApplication <!-- --> ) locale readonly ILocale Gets the locale in which the application is operating. (Inherited from IApplication <!-- --> ) metadataTimeZone readonly data.ITimeZone Gets the time zone that the application assumes date and time values in metadata to have. (Inherited from IApplication <!-- --> ) serverComponents readonly IServerComponents Gets information about the i2 Analyze components that are deployed on the application server. (Inherited from IApplication <!-- --> ) systemActions readonly dialog.ISystemDialogActions Gets the identifiers of the system dialog actions. (Inherited from IApplication <!-- --> ) theme readonly ITheme Gets the current theme of the application. (Inherited from IApplication <!-- --> ) user readonly IUserAndPermissions Gets the logged-in user of the application. (Inherited from IApplication <!-- --> ) Methods Method Description addEventListener(type, listener, options) Adds a listener for events that might affect the dialog. close() Closes the dialog without submitting it. getInitialValue() Gets the data for populating the dialog when it's displayed. removeEventListener(type, listener) Removes a listener for events that might affect the dialog. runTrackedMutations(mutationHandler, responseHandler, options) Queues a function that performs tracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. (Inherited from IApplication <!-- --> ) runTrackedMutations(mutationHandler, options) Queues a function that performs tracked mutations on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) runTransaction(handler, options) Queues a function that performs read-only work on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) runUntrackedMutations(mutationHandler, responseHandler, options) Queues a function that performs untracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. (Inherited from IApplication <!-- --> ) runUntrackedMutations(mutationHandler, options) Queues a function that performs untracked mutations on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) submitAndClose(value) Submits and closes the dialog. updateAction(id, config) Updates the label or the enabled state of the specified dialog action."
  },
  "api/notebook-sdk.dialog.idialogapi.removeeventlistener.html": {
    "href": "api/notebook-sdk.dialog.idialogapi.removeeventlistener.html",
    "title": "dialog.IDialogApi.removeEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogApi > removeEventListener dialog.IDialogApi.removeEventListener() method Removes a listener for events that might affect the dialog. Signature: removeEventListener<K extends keyof DialogEventMap>(type: K, listener: DialogEventMap[K]): void; Introduced: version 1.4 Type Parameters Parameter Type Description K extends keyof DialogEventMap The type of event to unsubscribe from. Parameters Parameter Type Description type K The type of event to unsubscribe from. listener DialogEventMap <!-- --> [K] A function that was previously added as a listener. Returns: void"
  },
  "api/notebook-sdk.dialog.idialogapi.submitandclose.html": {
    "href": "api/notebook-sdk.dialog.idialogapi.submitandclose.html",
    "title": "dialog.IDialogApi.submitAndClose() method",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogApi > submitAndClose dialog.IDialogApi.submitAndClose() method Submits and closes the dialog. Signature: submitAndClose<TResult>(value: TResult): void; Introduced: version 1.4 Type Parameters Parameter Type Description TResult any The type of the data that the dialog returns. Parameters Parameter Type Description value TResult The value that's submitted when the dialog is closed. Returns: void"
  },
  "api/notebook-sdk.dialog.idialogapi.updateaction.html": {
    "href": "api/notebook-sdk.dialog.idialogapi.updateaction.html",
    "title": "dialog.IDialogApi.updateAction() method",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogApi > updateAction dialog.IDialogApi.updateAction() method Updates the label or the enabled state of the specified dialog action. Signature: updateAction(id: DialogActionId, config: IDialogActionConfig): void; Introduced: version 1.4 Parameters Parameter Type Description id DialogActionId The identifier of the action to update. config IDialogActionConfig The new configuration for the specified action. Returns: void"
  },
  "api/notebook-sdk.dialog.idialogconfig.actions.html": {
    "href": "api/notebook-sdk.dialog.idialogconfig.actions.html",
    "title": "dialog.IDialogConfig.actions property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogConfig > actions dialog.IDialogConfig.actions property Gets the action buttons that appear at the bottom of the dialog, below the content. Signature: readonly actions: (DialogActionId | IDialogAction)[]; Returns: ( DialogActionId | IDialogAction )[] Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.idialogconfig.html": {
    "href": "api/notebook-sdk.dialog.idialogconfig.html",
    "title": "dialog.IDialogConfig interface",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogConfig dialog.IDialogConfig interface A set of information for creating a dialog. Signature: interface IDialogConfig<TInitialize> Introduced: version 1.4 Type Parameters Parameter Type Description TInitialize any The type of the data that's used for populating the dialog when it's displayed. Properties Property Modifiers Type Description actions readonly ( DialogActionId | IDialogAction <!-- --> )[] Gets the action buttons that appear at the bottom of the dialog, below the content. initialValue? readonly TInitialize (Optional) Gets the data for populating the dialog when it's first displayed. name readonly string Gets the title of the dialog, which appears as a heading in the user interface. path readonly string Gets the path to the content to host in the dialog, relative to the plug-in entry point. size readonly DialogSize Gets the size of the dialog."
  },
  "api/notebook-sdk.dialog.idialogconfig.initialvalue.html": {
    "href": "api/notebook-sdk.dialog.idialogconfig.initialvalue.html",
    "title": "dialog.IDialogConfig.initialValue property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogConfig > initialValue dialog.IDialogConfig.initialValue property Gets the data for populating the dialog when it's first displayed. Signature: readonly initialValue?: TInitialize; Returns: TInitialize Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.idialogconfig.name.html": {
    "href": "api/notebook-sdk.dialog.idialogconfig.name.html",
    "title": "dialog.IDialogConfig.name property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogConfig > name dialog.IDialogConfig.name property Gets the title of the dialog, which appears as a heading in the user interface. Signature: readonly name: string; Returns: string Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.idialogconfig.path.html": {
    "href": "api/notebook-sdk.dialog.idialogconfig.path.html",
    "title": "dialog.IDialogConfig.path property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogConfig > path dialog.IDialogConfig.path property Gets the path to the content to host in the dialog, relative to the plug-in entry point. Signature: readonly path: string; Returns: string Introduced: version 1.4 Remarks For example, if path is ' ./ <!-- --> ', then the server uses the folder that contains the entry point."
  },
  "api/notebook-sdk.dialog.idialogconfig.size.html": {
    "href": "api/notebook-sdk.dialog.idialogconfig.size.html",
    "title": "dialog.IDialogConfig.size property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > IDialogConfig > size dialog.IDialogConfig.size property Gets the size of the dialog. Signature: readonly size: DialogSize; Returns: DialogSize Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.isystemdialogactions.cancel.html": {
    "href": "api/notebook-sdk.dialog.isystemdialogactions.cancel.html",
    "title": "dialog.ISystemDialogActions.cancel property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > ISystemDialogActions > cancel dialog.ISystemDialogActions.cancel property Gets the identifier of the \"cancel\" action. Signature: readonly cancel: DialogActionId; Returns: DialogActionId Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.isystemdialogactions.close.html": {
    "href": "api/notebook-sdk.dialog.isystemdialogactions.close.html",
    "title": "dialog.ISystemDialogActions.close property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > ISystemDialogActions > close dialog.ISystemDialogActions.close property Gets the identifier of the \"close\" action. Signature: readonly close: DialogActionId; Returns: DialogActionId Introduced: version 1.4"
  },
  "api/notebook-sdk.dialog.isystemdialogactions.html": {
    "href": "api/notebook-sdk.dialog.isystemdialogactions.html",
    "title": "dialog.ISystemDialogActions interface",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > ISystemDialogActions dialog.ISystemDialogActions interface A lookup table for the identifiers of the standard dialog action. Signature: interface ISystemDialogActions Introduced: version 1.4 Properties Property Modifiers Type Description cancel readonly DialogActionId Gets the identifier of the \"cancel\" action. close readonly DialogActionId Gets the identifier of the \"close\" action. submit readonly DialogActionId Gets the identifier of the \"submit\" action."
  },
  "api/notebook-sdk.dialog.isystemdialogactions.submit.html": {
    "href": "api/notebook-sdk.dialog.isystemdialogactions.submit.html",
    "title": "dialog.ISystemDialogActions.submit property",
    "keywords": "Home > @i2analyze/notebook-sdk > dialog > ISystemDialogActions > submit dialog.ISystemDialogActions.submit property Gets the identifier of the \"submit\" action. Signature: readonly submit: DialogActionId; Returns: DialogActionId Introduced: version 1.4"
  },
  "api/notebook-sdk.getdialogapi.html": {
    "href": "api/notebook-sdk.getdialogapi.html",
    "title": "getDialogApi() function",
    "keywords": "Home > @i2analyze/notebook-sdk > getDialogApi getDialogApi() function Retrieves the plug-in dialog API. Signature: export declare function getDialogApi(): Promise<dialog.IDialogApi>; Returns: Promise< dialog.IDialogApi <!-- --> > A promise that resolves to the dialog API. Introduced: version 1.4 Exceptions Error (through the promise) if the version of the SDK was incompatible with the deployed version of i2 Notebook."
  },
  "api/notebook-sdk.getentrypointapi.html": {
    "href": "api/notebook-sdk.getentrypointapi.html",
    "title": "getEntryPointApi() function",
    "keywords": "Home > @i2analyze/notebook-sdk > getEntryPointApi getEntryPointApi() function Retrieves the plug-in entry point API. Signature: export declare function getEntryPointApi(pluginId: string): Promise<IEntryPointApi>; Introduced: version 1.0 Parameters Parameter Type Description pluginId string The plug-in identifier, which must match the identifier in the plug-in manifest file. Returns: Promise< IEntryPointApi <!-- --> > A promise that resolves to the entry point API. Exceptions Error (through the promise) if the version of the SDK was incompatible with the deployed version of i2 Notebook, or if pluginId does not appear in the manifest."
  },
  "api/notebook-sdk.gettoolviewapi.html": {
    "href": "api/notebook-sdk.gettoolviewapi.html",
    "title": "getToolViewApi() function",
    "keywords": "Home > @i2analyze/notebook-sdk > getToolViewApi getToolViewApi() function Retrieves the plug-in tool view API. Signature: export declare function getToolViewApi(): Promise<toolview.IToolViewApi>; Returns: Promise< toolview.IToolViewApi <!-- --> > A promise that resolves to the tool view API. Introduced: version 1.0 Exceptions Error (through the promise) if the version of the SDK was incompatible with the deployed version of i2 Notebook."
  },
  "api/notebook-sdk.html": {
    "href": "api/notebook-sdk.html",
    "title": "notebook-sdk package",
    "keywords": "Home > @i2analyze/notebook-sdk notebook-sdk package The i2 Notebook Web SDK package, which contains all the functionality you need to create plug-ins for the i2 Notebook web client. Functions Function Description getDialogApi() Retrieves the plug-in dialog API. getEntryPointApi(pluginId) Retrieves the plug-in entry point API. getToolViewApi() Retrieves the plug-in tool view API. Interfaces Interface Description IEntryPointApi The core API that the i2 Notebook application makes available to plug-in entry points. ILogger A diagnostic logger that i2 Notebook plug-ins can use. NotebookStatic A global notebook object that plug-in code can use to access the entry point API. Namespaces Namespace Description app The members of the app namespace enable handling for events that take place during the lifetime of the i2 Notebook application, and provide access to top-level data such as user and locale information. chart The members of the chart namespace provide access to the contents of charts in the i2 Notebook web client, and enable handling of the events that arise as a result of changes to those contents. commands The members of the commands namespace allow you to integrate the commands that you create in your plug-ins with the i2 Notebook user interface. data The members of the data namespace determine how property and metadata values are stored and represented. dialog The members of the dialog namespace enable you to create and display dialog windows from your plug-ins that are modal with respect to the whole i2 Notebook application. records The members of the records namespace provide access to the contents of records in the i2 Notebook web client. schema The members of the schema namespace provide access to the specifications that govern the structure of records in the i2 Notebook web client. Schemas determine what properties records can contain; place constraints on notes, source identifiers, and source references; and describe the security model that controls access to records. toolview The members of the toolview namespace enable you to integrate the tool views that you write for your plug-ins with the i2 Notebook application. visual The members of the visual namespace provide control over the visible representations of the records that i2 Notebook charts contain. Type Aliases Type Alias Description LogLevel The logging level, or severity, of log messages."
  },
  "api/notebook-sdk.ientrypointapi.commands.html": {
    "href": "api/notebook-sdk.ientrypointapi.commands.html",
    "title": "IEntryPointApi.commands property",
    "keywords": "Home > @i2analyze/notebook-sdk > IEntryPointApi > commands IEntryPointApi.commands property Gets the core API for custom commands. Signature: readonly commands: commands.ICommandApi; Returns: commands.ICommandApi Introduced: version 1.0"
  },
  "api/notebook-sdk.ientrypointapi.createtoolview.html": {
    "href": "api/notebook-sdk.ientrypointapi.createtoolview.html",
    "title": "IEntryPointApi.createToolView() method",
    "keywords": "Home > @i2analyze/notebook-sdk > IEntryPointApi > createToolView IEntryPointApi.createToolView() method Warning: This API is now obsolete. Deprecated since version 1.3. Use createToolView(IToolViewConfig) instead. Creates and returns a tool view with the specified name and content. Signature: createToolView(name: string, path: string): toolview.IToolView; Introduced: version 1.0 Parameters Parameter Type Description name string The name of the tool view, which appears as a heading in the user interface. path string The path to the content to host in the tool view, relative to the plug-in entry point. For example, setting path to ' ./ ' makes the server use the folder that contains the entry point. Returns: toolview.IToolView The new tool view."
  },
  "api/notebook-sdk.ientrypointapi.createtoolview_1.html": {
    "href": "api/notebook-sdk.ientrypointapi.createtoolview_1.html",
    "title": "IEntryPointApi.createToolView() method",
    "keywords": "Home > @i2analyze/notebook-sdk > IEntryPointApi > createToolView IEntryPointApi.createToolView() method Creates and returns a tool view with the specified configuration. Signature: createToolView(config: toolview.IToolViewConfig): toolview.IToolView; Introduced: version 1.3 Parameters Parameter Type Description config toolview.IToolViewConfig The information for creating the tool view, including its default size and position. Returns: toolview.IToolView The new tool view."
  },
  "api/notebook-sdk.ientrypointapi.formatter.html": {
    "href": "api/notebook-sdk.ientrypointapi.formatter.html",
    "title": "IEntryPointApi.formatter property",
    "keywords": "Home > @i2analyze/notebook-sdk > IEntryPointApi > formatter IEntryPointApi.formatter property Gets an object that can be used to perform locale-sensitive string-formatting operations. Signature: readonly formatter: data.IFormatter; Returns: data.IFormatter Introduced: version 1.0"
  },
  "api/notebook-sdk.ientrypointapi.html": {
    "href": "api/notebook-sdk.ientrypointapi.html",
    "title": "IEntryPointApi interface",
    "keywords": "Home > @i2analyze/notebook-sdk > IEntryPointApi IEntryPointApi interface The core API that the i2 Notebook application makes available to plug-in entry points. Signature: export interface IEntryPointApi extends app.IApplication Extends: app.IApplication Introduced: version 1.0 Properties Property Modifiers Type Description allTimeZones readonly data.IKeyedReadOnlyCollection <!-- --> < data.TimeZoneId <!-- --> , data.ITimeZone <!-- --> > Gets a list of all the valid time zones, in the same order as they appear in the application. (Inherited from IApplication <!-- --> ) commands readonly commands.ICommandApi Gets the core API for custom commands. formatter readonly data.IFormatter Gets an object that can be used to perform locale-sensitive string-formatting operations. locale readonly ILocale Gets the locale in which the application is operating. (Inherited from IApplication <!-- --> ) logger readonly ILogger Gets an object that can be used to perform plug-in logging operations. metadataTimeZone readonly data.ITimeZone Gets the time zone that the application assumes date and time values in metadata to have. (Inherited from IApplication <!-- --> ) serverComponents readonly IServerComponents Gets information about the i2 Analyze components that are deployed on the application server. (Inherited from IApplication <!-- --> ) systemActions readonly dialog.ISystemDialogActions Gets the identifiers of the system dialog actions. (Inherited from IApplication <!-- --> ) theme readonly ITheme Gets the current theme of the application. (Inherited from IApplication <!-- --> ) user readonly IUserAndPermissions Gets the logged-in user of the application. (Inherited from IApplication <!-- --> ) Methods Method Description addEventListener(type, listener, options) Adds an event listener. See app.ApplicationEventMap for the available events. (Inherited from IApplicationEvents <!-- --> ) createToolView(name, path) Creates and returns a tool view with the specified name and content. createToolView(config) Creates and returns a tool view with the specified configuration. initializationComplete() Allows plug-ins to indicate when their registrations are complete, so that the i2 Notebook user interface can start. removeEventListener(type, listener) Removes an event listener. See app.ApplicationEventMap for the available events. (Inherited from IApplicationEvents <!-- --> ) runTrackedMutations(mutationHandler, responseHandler, options) Queues a function that performs tracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. (Inherited from IApplication <!-- --> ) runTrackedMutations(mutationHandler, options) Queues a function that performs tracked mutations on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) runTransaction(handler, options) Queues a function that performs read-only work on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) runUntrackedMutations(mutationHandler, responseHandler, options) Queues a function that performs untracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. (Inherited from IApplication <!-- --> ) runUntrackedMutations(mutationHandler, options) Queues a function that performs untracked mutations on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) showDialog(config) Creates and displays a modal dialog with the specified configuration."
  },
  "api/notebook-sdk.ientrypointapi.initializationcomplete.html": {
    "href": "api/notebook-sdk.ientrypointapi.initializationcomplete.html",
    "title": "IEntryPointApi.initializationComplete() method",
    "keywords": "Home > @i2analyze/notebook-sdk > IEntryPointApi > initializationComplete IEntryPointApi.initializationComplete() method Allows plug-ins to indicate when their registrations are complete, so that the i2 Notebook user interface can start. Signature: initializationComplete(): void; Returns: void Introduced: version 1.0 Remarks If a plug-in does not call this method after completing registration, i2 Notebook abandons its attempt to load it."
  },
  "api/notebook-sdk.ientrypointapi.logger.html": {
    "href": "api/notebook-sdk.ientrypointapi.logger.html",
    "title": "IEntryPointApi.logger property",
    "keywords": "Home > @i2analyze/notebook-sdk > IEntryPointApi > logger IEntryPointApi.logger property Gets an object that can be used to perform plug-in logging operations. Signature: readonly logger: ILogger; Returns: ILogger Introduced: version 1.0"
  },
  "api/notebook-sdk.ientrypointapi.showdialog.html": {
    "href": "api/notebook-sdk.ientrypointapi.showdialog.html",
    "title": "IEntryPointApi.showDialog() method",
    "keywords": "Home > @i2analyze/notebook-sdk > IEntryPointApi > showDialog IEntryPointApi.showDialog() method Creates and displays a modal dialog with the specified configuration. Signature: showDialog<TResult, TInitialize>(config: dialog.IDialogConfig<TInitialize>): Promise<TResult>; Introduced: version 1.4 Type Parameters Parameter Type Description TResult any The type of the data that the dialog returns when it's submitted. TInitialize any The type of the data that's used to populate the dialog when it's displayed. Parameters Parameter Type Description config dialog.IDialogConfig <!-- --> <TInitialize> The information for creating the dialog, including its size and its buttons. Returns: Promise<TResult> The value submitted from the dialog."
  },
  "api/notebook-sdk.ilogger.debug.html": {
    "href": "api/notebook-sdk.ilogger.debug.html",
    "title": "ILogger.debug() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > debug ILogger.debug() method Logs a message at 'debug' level. Signature: debug(message: string): void; Introduced: version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/notebook-sdk.ilogger.debug_1.html": {
    "href": "api/notebook-sdk.ilogger.debug_1.html",
    "title": "ILogger.debug() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > debug ILogger.debug() method Logs a formatted message at 'debug' level. Signature: debug(format: string, ...args: unknown[]): void; Introduced: version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/notebook-sdk.ilogger.error.html": {
    "href": "api/notebook-sdk.ilogger.error.html",
    "title": "ILogger.error() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > error ILogger.error() method Logs a message at 'error' level. Signature: error(message: string): void; Introduced: version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/notebook-sdk.ilogger.error_1.html": {
    "href": "api/notebook-sdk.ilogger.error_1.html",
    "title": "ILogger.error() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > error ILogger.error() method Logs a formatted message at 'error' level. Signature: error(format: string, ...args: unknown[]): void; Introduced: version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/notebook-sdk.ilogger.html": {
    "href": "api/notebook-sdk.ilogger.html",
    "title": "ILogger interface",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger ILogger interface A diagnostic logger that i2 Notebook plug-ins can use. Signature: export interface ILogger Introduced: version 1.0 Remarks In formatted message strings, ' %d <!-- --> ' is a numeric representation of the parameter, ' %j <!-- --> ' is a JSON representation of the parameter, and ' %s <!-- --> ' is a string representation of the parameter. Any extra parameters are interpreted automatically as ' %s <!-- --> '. The default logging level is info <!-- --> . Methods Method Description debug(message) Logs a message at 'debug' level. debug(format, args) Logs a formatted message at 'debug' level. error(message) Logs a message at 'error' level. error(format, args) Logs a formatted message at 'error' level. info(message) Logs a message at 'info' level. info(format, args) Logs a formatted message at 'info' level. setLogLevel(level) Sets the minimum level, or severity, of messages that will be emitted. warn(message) Logs a message at 'warn' level. warn(format, args) Logs a formatted message at 'warn' level."
  },
  "api/notebook-sdk.ilogger.info.html": {
    "href": "api/notebook-sdk.ilogger.info.html",
    "title": "ILogger.info() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > info ILogger.info() method Logs a message at 'info' level. Signature: info(message: string): void; Introduced: version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/notebook-sdk.ilogger.info_1.html": {
    "href": "api/notebook-sdk.ilogger.info_1.html",
    "title": "ILogger.info() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > info ILogger.info() method Logs a formatted message at 'info' level. Signature: info(format: string, ...args: unknown[]): void; Introduced: version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/notebook-sdk.ilogger.setloglevel.html": {
    "href": "api/notebook-sdk.ilogger.setloglevel.html",
    "title": "ILogger.setLogLevel() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > setLogLevel ILogger.setLogLevel() method Sets the minimum level, or severity, of messages that will be emitted. Signature: setLogLevel(level: LogLevel): void; Introduced: version 1.0 Parameters Parameter Type Description level LogLevel The minimum logging level to set. Returns: void"
  },
  "api/notebook-sdk.ilogger.warn.html": {
    "href": "api/notebook-sdk.ilogger.warn.html",
    "title": "ILogger.warn() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > warn ILogger.warn() method Logs a message at 'warn' level. Signature: warn(message: string): void; Introduced: version 1.0 Parameters Parameter Type Description message string A message to log. The message is a plain message, not a formatted one. Returns: void"
  },
  "api/notebook-sdk.ilogger.warn_1.html": {
    "href": "api/notebook-sdk.ilogger.warn_1.html",
    "title": "ILogger.warn() method",
    "keywords": "Home > @i2analyze/notebook-sdk > ILogger > warn ILogger.warn() method Logs a formatted message at 'warn' level. Signature: warn(format: string, ...args: unknown[]): void; Introduced: version 1.0 Parameters Parameter Type Description format string A formatted message to log. args unknown[] The arguments for the formatted message. Returns: void"
  },
  "api/notebook-sdk.loglevel.html": {
    "href": "api/notebook-sdk.loglevel.html",
    "title": "LogLevel type",
    "keywords": "Home > @i2analyze/notebook-sdk > LogLevel LogLevel type The logging level, or severity, of log messages. Signature: export declare type LogLevel = 'error' | 'warn' | 'info' | 'debug'; Introduced: version 1.0 Remarks The possible values for the logging level are hierarchical. The default logging level is info <!-- --> ."
  },
  "api/notebook-sdk.notebookstatic.getentrypointapi.html": {
    "href": "api/notebook-sdk.notebookstatic.getentrypointapi.html",
    "title": "NotebookStatic.getEntryPointApi() method",
    "keywords": "Home > @i2analyze/notebook-sdk > NotebookStatic > getEntryPointApi NotebookStatic.getEntryPointApi() method Retrieves the specified version of the plug-in entry point API. Signature: getEntryPointApi(pluginId: string, apiVersion: '1.0' | '1.1' | '1.2' | '1.3' | '1.4' | '1.5' | '1.6' | '1.7' | '1.8'): Promise<IEntryPointApi>; Introduced: version 1.0 Parameters Parameter Type Description pluginId string The plug-in identifier, which must match the identifier in the plug-in manifest file. apiVersion '1.0' | '1.1' | '1.2' | '1.3' | '1.4' | '1.5' | '1.6' | '1.7' | '1.8' The required version of the API, as major.minor ; for example, '1.0' . Use the same major.minor as the version of the SDK. Returns: Promise< IEntryPointApi <!-- --> > A promise that resolves to the requested entry point API. Exceptions Error (through the promise) if apiVersion was incompatible with the deployed version of i2 Notebook, or if pluginId does not appear in the manifest."
  },
  "api/notebook-sdk.notebookstatic.html": {
    "href": "api/notebook-sdk.notebookstatic.html",
    "title": "NotebookStatic interface",
    "keywords": "Home > @i2analyze/notebook-sdk > NotebookStatic NotebookStatic interface A global notebook object that plug-in code can use to access the entry point API. Signature: export interface NotebookStatic Introduced: version 1.0 Remarks This object is typically used by plug-in entry points that have not bundled the SDK package and imported getEntryPointApi() directly. Methods Method Description getEntryPointApi(pluginId, apiVersion) Retrieves the specified version of the plug-in entry point API."
  },
  "api/notebook-sdk.records.analyzerecordid.html": {
    "href": "api/notebook-sdk.records.analyzerecordid.html",
    "title": "records.AnalyzeRecordId type",
    "keywords": "Home > @i2analyze/notebook-sdk > records > AnalyzeRecordId records.AnalyzeRecordId type The identifier of a record in i2 Analyze. Signature: type AnalyzeRecordId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.records.html": {
    "href": "api/notebook-sdk.records.html",
    "title": "records namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > records records namespace The members of the records namespace provide access to the contents of records in the i2 Notebook web client. Signature: export declare namespace records Introduced: version 1.0 Interfaces Interface Description IChartEntityRecord An entity record. IChartLinkRecord A link record. IChartRecordBase A set of information and functionality that is common to all records in i2 Notebook. INote A note for a record. INoteData A set of data for creating a note. IRecordLabelDetails A label for a record. ISecuritySetting A set of dimension values for a record, from a particular security dimension. ISecuritySettingData A set of data for creating a security setting. ISourceIdentifier A source identifier for a record. ISourceIdentifierData A set of data for creating a source identifier. ISourceReference A source reference for a record. ISourceReferenceData A set of data for creating a source reference. Type Aliases Type Alias Description AnalyzeRecordId The identifier of a record in i2 Analyze. IChartRecord An entity record or a link record. NoteId The identifier of a note. SourceReferenceId The identifier of a source reference."
  },
  "api/notebook-sdk.records.ichartentityrecord.html": {
    "href": "api/notebook-sdk.records.ichartentityrecord.html",
    "title": "records.IChartEntityRecord interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartEntityRecord records.IChartEntityRecord interface An entity record. Signature: interface IChartEntityRecord extends IChartRecordBase Extends: IChartRecordBase Introduced: version 1.0 Properties Property Modifiers Type Description element readonly visual.IElement Gets the chart element to which the record belongs. (Inherited from IChartRecordBase <!-- --> ) firstUploaded readonly data.IUserAndDateAndTime | undefined Gets information about when and by whom the record was first uploaded. (Inherited from IChartRecordBase <!-- --> ) hasUnfetchedProperties readonly boolean Indicates whether there are properties on the record whose values have not been fetched from the server. (Inherited from IChartRecordBase <!-- --> ) id readonly AnalyzeRecordId Gets the identifier of the record. (Inherited from IChartRecordBase <!-- --> ) image? readonly data.IImage (Optional) Gets an image that represents the record. (Inherited from IChartRecordBase <!-- --> ) isInfoStore readonly boolean Indicates whether the record existed in the Information Store at the time of its addition to the chart. (Inherited from IChartRecordBase <!-- --> ) itemType readonly schema.IChartEntityType Gets the type of the entity record. labelOrFallback readonly string Gets the label of the record or, if there is no label, an application-standard fallback string such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> '. (Inherited from IChartRecordBase <!-- --> ) lastUploaded readonly data.IUserAndDateAndTime | undefined Gets information about when and by whom the record was last uploaded. (Inherited from IChartRecordBase <!-- --> ) linkRecords readonly data.IKeyedReadOnlyCollection <!-- --> < AnalyzeRecordId <!-- --> , IChartLinkRecord <!-- --> > Gets all the link records that are connected to the entity record. notes readonly data.IKeyedReadOnlyCollection <!-- --> < NoteId <!-- --> , INote <!-- --> > Gets the notes of the record. (Inherited from IChartRecordBase <!-- --> ) security readonly data.IKeyedReadOnlyCollection <!-- --> < schema.SecurityDimensionId <!-- --> , ISecuritySetting <!-- --> > Gets the security settings of the record. (Inherited from IChartRecordBase <!-- --> ) sourceIdentifiers readonly data.IReadOnlyCollection <!-- --> < ISourceIdentifier <!-- --> > Gets the source identifiers of the record. (Inherited from IChartRecordBase <!-- --> ) sourceReferences readonly data.IKeyedReadOnlyCollection <!-- --> < SourceReferenceId <!-- --> , ISourceReference <!-- --> > Gets the source references of the record. (Inherited from IChartRecordBase <!-- --> ) Methods Method Description get360ViewUrl() Gets a URL for displaying the record in a 360 view, if the record and the server support it. (Inherited from IChartRecordBase <!-- --> ) getLabelDetails() Gets the label for the record, together with information about whether the label has a genuine value. (Inherited from IChartRecordBase <!-- --> ) getProperty(propertyType) Gets the property value for the specified property type. (Inherited from IChartRecordBase <!-- --> ) getUnfetchedPropertyTypes() Gets the property types of the properties on the record whose values have not been fetched. (Inherited from IChartRecordBase <!-- --> ) isEntity() Tests whether the record is an entity record; functions as a TypeScript typeguard. (Inherited from IChartRecordBase <!-- --> ) isLink() Tests whether the record is a link record; functions as a TypeScript typeguard. (Inherited from IChartRecordBase <!-- --> ) isValueUnfetched(property) Indicates whether the specified property value has been fetched from the server. (Inherited from IChartRecordBase <!-- --> )"
  },
  "api/notebook-sdk.records.ichartentityrecord.itemtype.html": {
    "href": "api/notebook-sdk.records.ichartentityrecord.itemtype.html",
    "title": "records.IChartEntityRecord.itemType property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartEntityRecord > itemType records.IChartEntityRecord.itemType property Gets the type of the entity record. Signature: readonly itemType: schema.IChartEntityType; Returns: schema.IChartEntityType Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartentityrecord.linkrecords.html": {
    "href": "api/notebook-sdk.records.ichartentityrecord.linkrecords.html",
    "title": "records.IChartEntityRecord.linkRecords property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartEntityRecord > linkRecords records.IChartEntityRecord.linkRecords property Gets all the link records that are connected to the entity record. Signature: readonly linkRecords: data.IKeyedReadOnlyCollection<AnalyzeRecordId, IChartLinkRecord>; Returns: data.IKeyedReadOnlyCollection < AnalyzeRecordId , IChartLinkRecord > Introduced: version 1.1"
  },
  "api/notebook-sdk.records.ichartlinkrecord.fromend.html": {
    "href": "api/notebook-sdk.records.ichartlinkrecord.fromend.html",
    "title": "records.IChartLinkRecord.fromEnd property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartLinkRecord > fromEnd records.IChartLinkRecord.fromEnd property Gets the record at the 'from' end of the link. Signature: readonly fromEnd: IChartEntityRecord; Returns: IChartEntityRecord Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartlinkrecord.html": {
    "href": "api/notebook-sdk.records.ichartlinkrecord.html",
    "title": "records.IChartLinkRecord interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartLinkRecord records.IChartLinkRecord interface A link record. Signature: interface IChartLinkRecord extends IChartRecordBase Extends: IChartRecordBase Introduced: version 1.0 Properties Property Modifiers Type Description element readonly visual.IElement Gets the chart element to which the record belongs. (Inherited from IChartRecordBase <!-- --> ) firstUploaded readonly data.IUserAndDateAndTime | undefined Gets information about when and by whom the record was first uploaded. (Inherited from IChartRecordBase <!-- --> ) fromEnd readonly IChartEntityRecord Gets the record at the 'from' end of the link. hasUnfetchedProperties readonly boolean Indicates whether there are properties on the record whose values have not been fetched from the server. (Inherited from IChartRecordBase <!-- --> ) id readonly AnalyzeRecordId Gets the identifier of the record. (Inherited from IChartRecordBase <!-- --> ) image? readonly data.IImage (Optional) Gets an image that represents the record. (Inherited from IChartRecordBase <!-- --> ) isInfoStore readonly boolean Indicates whether the record existed in the Information Store at the time of its addition to the chart. (Inherited from IChartRecordBase <!-- --> ) itemType readonly schema.IChartLinkType Gets the type of the link record. labelOrFallback readonly string Gets the label of the record or, if there is no label, an application-standard fallback string such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> '. (Inherited from IChartRecordBase <!-- --> ) lastUploaded readonly data.IUserAndDateAndTime | undefined Gets information about when and by whom the record was last uploaded. (Inherited from IChartRecordBase <!-- --> ) linkDirection readonly data.LinkDirection Gets the direction of the link. notes readonly data.IKeyedReadOnlyCollection <!-- --> < NoteId <!-- --> , INote <!-- --> > Gets the notes of the record. (Inherited from IChartRecordBase <!-- --> ) security readonly data.IKeyedReadOnlyCollection <!-- --> < schema.SecurityDimensionId <!-- --> , ISecuritySetting <!-- --> > Gets the security settings of the record. (Inherited from IChartRecordBase <!-- --> ) sourceIdentifiers readonly data.IReadOnlyCollection <!-- --> < ISourceIdentifier <!-- --> > Gets the source identifiers of the record. (Inherited from IChartRecordBase <!-- --> ) sourceReferences readonly data.IKeyedReadOnlyCollection <!-- --> < SourceReferenceId <!-- --> , ISourceReference <!-- --> > Gets the source references of the record. (Inherited from IChartRecordBase <!-- --> ) toEnd readonly IChartEntityRecord Gets the record at the 'to' end of the link. Methods Method Description get360ViewUrl() Gets a URL for displaying the record in a 360 view, if the record and the server support it. (Inherited from IChartRecordBase <!-- --> ) getLabelDetails() Gets the label for the record, together with information about whether the label has a genuine value. (Inherited from IChartRecordBase <!-- --> ) getProperty(propertyType) Gets the property value for the specified property type. (Inherited from IChartRecordBase <!-- --> ) getUnfetchedPropertyTypes() Gets the property types of the properties on the record whose values have not been fetched. (Inherited from IChartRecordBase <!-- --> ) isEntity() Tests whether the record is an entity record; functions as a TypeScript typeguard. (Inherited from IChartRecordBase <!-- --> ) isLink() Tests whether the record is a link record; functions as a TypeScript typeguard. (Inherited from IChartRecordBase <!-- --> ) isValueUnfetched(property) Indicates whether the specified property value has been fetched from the server. (Inherited from IChartRecordBase <!-- --> )"
  },
  "api/notebook-sdk.records.ichartlinkrecord.itemtype.html": {
    "href": "api/notebook-sdk.records.ichartlinkrecord.itemtype.html",
    "title": "records.IChartLinkRecord.itemType property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartLinkRecord > itemType records.IChartLinkRecord.itemType property Gets the type of the link record. Signature: readonly itemType: schema.IChartLinkType; Returns: schema.IChartLinkType Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartlinkrecord.linkdirection.html": {
    "href": "api/notebook-sdk.records.ichartlinkrecord.linkdirection.html",
    "title": "records.IChartLinkRecord.linkDirection property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartLinkRecord > linkDirection records.IChartLinkRecord.linkDirection property Gets the direction of the link. Signature: readonly linkDirection: data.LinkDirection; Returns: data.LinkDirection Introduced: version 1.0 Remarks The value is expressed relative to the natural direction implied by the 'from' and 'to' ends."
  },
  "api/notebook-sdk.records.ichartlinkrecord.toend.html": {
    "href": "api/notebook-sdk.records.ichartlinkrecord.toend.html",
    "title": "records.IChartLinkRecord.toEnd property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartLinkRecord > toEnd records.IChartLinkRecord.toEnd property Gets the record at the 'to' end of the link. Signature: readonly toEnd: IChartEntityRecord; Returns: IChartEntityRecord Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecord.html": {
    "href": "api/notebook-sdk.records.ichartrecord.html",
    "title": "records.IChartRecord type",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecord records.IChartRecord type An entity record or a link record. Signature: type IChartRecord = IChartEntityRecord | IChartLinkRecord; References: IChartEntityRecord <!-- --> , IChartLinkRecord Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.element.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.element.html",
    "title": "records.IChartRecordBase.element property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > element records.IChartRecordBase.element property Gets the chart element to which the record belongs. Signature: readonly element: visual.IElement; Returns: visual.IElement Introduced: version 1.2"
  },
  "api/notebook-sdk.records.ichartrecordbase.firstuploaded.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.firstuploaded.html",
    "title": "records.IChartRecordBase.firstUploaded property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > firstUploaded records.IChartRecordBase.firstUploaded property Gets information about when and by whom the record was first uploaded. Signature: readonly firstUploaded: data.IUserAndDateAndTime | undefined; Returns: data.IUserAndDateAndTime | undefined Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.get360viewurl.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.get360viewurl.html",
    "title": "records.IChartRecordBase.get360ViewUrl() method",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > get360ViewUrl records.IChartRecordBase.get360ViewUrl() method Gets a URL for displaying the record in a 360 view, if the record and the server support it. Signature: get360ViewUrl(): string | undefined; Returns: string | undefined The URL of the 360 view, or undefined <!-- --> . Introduced: version 1.0 Remarks To support a 360 view, the record must be an entity record, and it must come from the current Information Store."
  },
  "api/notebook-sdk.records.ichartrecordbase.getlabeldetails.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.getlabeldetails.html",
    "title": "records.IChartRecordBase.getLabelDetails() method",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > getLabelDetails records.IChartRecordBase.getLabelDetails() method Gets the label for the record, together with information about whether the label has a genuine value. Signature: getLabelDetails(): IRecordLabelDetails; Returns: IRecordLabelDetails The label (or a fallback string) and an indication of whether the label is real. Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.getproperty.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.getproperty.html",
    "title": "records.IChartRecordBase.getProperty() method",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > getProperty records.IChartRecordBase.getProperty() method Gets the property value for the specified property type. Signature: getProperty(propertyType: schema.PropertyTypeSpecifier): data.PropertyValue | data.IValueNotFetched | undefined; Introduced: version 1.0 Parameters Parameter Type Description propertyType schema.PropertyTypeSpecifier The property type or property type identifier of the value to retrieve. Returns: data.PropertyValue | data.IValueNotFetched | undefined The property value or, if not present, undefined <!-- --> ."
  },
  "api/notebook-sdk.records.ichartrecordbase.getunfetchedpropertytypes.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.getunfetchedpropertytypes.html",
    "title": "records.IChartRecordBase.getUnfetchedPropertyTypes() method",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > getUnfetchedPropertyTypes records.IChartRecordBase.getUnfetchedPropertyTypes() method Gets the property types of the properties on the record whose values have not been fetched. Signature: getUnfetchedPropertyTypes(): data.IReadOnlyCollection<schema.IChartPropertyType>; Returns: data.IReadOnlyCollection <!-- --> < schema.IChartPropertyType <!-- --> > A collection of property types whose values have not been fetched. Introduced: version 1.0 Remarks Some property values might not be fetched immediately from the server, due to size or other factors."
  },
  "api/notebook-sdk.records.ichartrecordbase.hasunfetchedproperties.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.hasunfetchedproperties.html",
    "title": "records.IChartRecordBase.hasUnfetchedProperties property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > hasUnfetchedProperties records.IChartRecordBase.hasUnfetchedProperties property Indicates whether there are properties on the record whose values have not been fetched from the server. Signature: readonly hasUnfetchedProperties: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.html",
    "title": "records.IChartRecordBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase records.IChartRecordBase interface A set of information and functionality that is common to all records in i2 Notebook. Signature: interface IChartRecordBase Introduced: version 1.0 Properties Property Modifiers Type Description element readonly visual.IElement Gets the chart element to which the record belongs. firstUploaded readonly data.IUserAndDateAndTime | undefined Gets information about when and by whom the record was first uploaded. hasUnfetchedProperties readonly boolean Indicates whether there are properties on the record whose values have not been fetched from the server. id readonly AnalyzeRecordId Gets the identifier of the record. image? readonly data.IImage (Optional) Gets an image that represents the record. isInfoStore readonly boolean Indicates whether the record existed in the Information Store at the time of its addition to the chart. itemType readonly schema.IChartItemType Gets the item type of the record. labelOrFallback readonly string Gets the label of the record or, if there is no label, an application-standard fallback string such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> '. lastUploaded readonly data.IUserAndDateAndTime | undefined Gets information about when and by whom the record was last uploaded. notes readonly data.IKeyedReadOnlyCollection <!-- --> < NoteId <!-- --> , INote <!-- --> > Gets the notes of the record. security readonly data.IKeyedReadOnlyCollection <!-- --> < schema.SecurityDimensionId <!-- --> , ISecuritySetting <!-- --> > Gets the security settings of the record. sourceIdentifiers readonly data.IReadOnlyCollection <!-- --> < ISourceIdentifier <!-- --> > Gets the source identifiers of the record. sourceReferences readonly data.IKeyedReadOnlyCollection <!-- --> < SourceReferenceId <!-- --> , ISourceReference <!-- --> > Gets the source references of the record. Methods Method Description get360ViewUrl() Gets a URL for displaying the record in a 360 view, if the record and the server support it. getLabelDetails() Gets the label for the record, together with information about whether the label has a genuine value. getProperty(propertyType) Gets the property value for the specified property type. getUnfetchedPropertyTypes() Gets the property types of the properties on the record whose values have not been fetched. isEntity() Tests whether the record is an entity record; functions as a TypeScript typeguard. isLink() Tests whether the record is a link record; functions as a TypeScript typeguard. isValueUnfetched(property) Indicates whether the specified property value has been fetched from the server."
  },
  "api/notebook-sdk.records.ichartrecordbase.id.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.id.html",
    "title": "records.IChartRecordBase.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > id records.IChartRecordBase.id property Gets the identifier of the record. Signature: readonly id: AnalyzeRecordId; Returns: AnalyzeRecordId Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.image.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.image.html",
    "title": "records.IChartRecordBase.image property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > image records.IChartRecordBase.image property Gets an image that represents the record. Signature: readonly image?: data.IImage; Returns: data.IImage Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.isentity.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.isentity.html",
    "title": "records.IChartRecordBase.isEntity() method",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > isEntity records.IChartRecordBase.isEntity() method Tests whether the record is an entity record; functions as a TypeScript typeguard. Signature: isEntity(): this is IChartEntityRecord; Returns: this is IChartEntityRecord true if the record is an entity record; false otherwise. Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.isinfostore.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.isinfostore.html",
    "title": "records.IChartRecordBase.isInfoStore property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > isInfoStore records.IChartRecordBase.isInfoStore property Indicates whether the record existed in the Information Store at the time of its addition to the chart. Signature: readonly isInfoStore: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.islink.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.islink.html",
    "title": "records.IChartRecordBase.isLink() method",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > isLink records.IChartRecordBase.isLink() method Tests whether the record is a link record; functions as a TypeScript typeguard. Signature: isLink(): this is IChartLinkRecord; Returns: this is IChartLinkRecord true if the record is a link record; false otherwise. Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.isvalueunfetched.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.isvalueunfetched.html",
    "title": "records.IChartRecordBase.isValueUnfetched() method",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > isValueUnfetched records.IChartRecordBase.isValueUnfetched() method Indicates whether the specified property value has been fetched from the server. Signature: isValueUnfetched(property: data.PropertyValue | data.IValueNotFetched | undefined): property is data.IValueNotFetched; Introduced: version 1.0 Parameters Parameter Type Description property data.PropertyValue | data.IValueNotFetched | undefined The property value to test. Returns: property is data.IValueNotFetched true if the property value is unfetched; false otherwise."
  },
  "api/notebook-sdk.records.ichartrecordbase.itemtype.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.itemtype.html",
    "title": "records.IChartRecordBase.itemType property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > itemType records.IChartRecordBase.itemType property Gets the item type of the record. Signature: readonly itemType: schema.IChartItemType; Returns: schema.IChartItemType Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.labelorfallback.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.labelorfallback.html",
    "title": "records.IChartRecordBase.labelOrFallback property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > labelOrFallback records.IChartRecordBase.labelOrFallback property Gets the label of the record or, if there is no label, an application-standard fallback string such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> '. Signature: readonly labelOrFallback: string; Returns: string Introduced: version 1.0 Remarks When a record has no label, it is a common pattern to display something in the user interface to indicate the fact, instead of just a blank space. i2 Notebook contains a standard piece of translated fallback text such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> ' that the application uses in those scenarios. If you need to know whether there was actually a label, because you want to handle the no-label case differently, call getLabelDetails() instead."
  },
  "api/notebook-sdk.records.ichartrecordbase.lastuploaded.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.lastuploaded.html",
    "title": "records.IChartRecordBase.lastUploaded property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > lastUploaded records.IChartRecordBase.lastUploaded property Gets information about when and by whom the record was last uploaded. Signature: readonly lastUploaded: data.IUserAndDateAndTime | undefined; Returns: data.IUserAndDateAndTime | undefined Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.notes.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.notes.html",
    "title": "records.IChartRecordBase.notes property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > notes records.IChartRecordBase.notes property Gets the notes of the record. Signature: readonly notes: data.IKeyedReadOnlyCollection<NoteId, INote>; Returns: data.IKeyedReadOnlyCollection < NoteId , INote > Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.security.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.security.html",
    "title": "records.IChartRecordBase.security property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > security records.IChartRecordBase.security property Gets the security settings of the record. Signature: readonly security: data.IKeyedReadOnlyCollection<schema.SecurityDimensionId, ISecuritySetting>; Returns: data.IKeyedReadOnlyCollection < schema.SecurityDimensionId , ISecuritySetting > Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.sourceidentifiers.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.sourceidentifiers.html",
    "title": "records.IChartRecordBase.sourceIdentifiers property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > sourceIdentifiers records.IChartRecordBase.sourceIdentifiers property Gets the source identifiers of the record. Signature: readonly sourceIdentifiers: data.IReadOnlyCollection<ISourceIdentifier>; Returns: data.IReadOnlyCollection < ISourceIdentifier > Introduced: version 1.0"
  },
  "api/notebook-sdk.records.ichartrecordbase.sourcereferences.html": {
    "href": "api/notebook-sdk.records.ichartrecordbase.sourcereferences.html",
    "title": "records.IChartRecordBase.sourceReferences property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IChartRecordBase > sourceReferences records.IChartRecordBase.sourceReferences property Gets the source references of the record. Signature: readonly sourceReferences: data.IKeyedReadOnlyCollection<SourceReferenceId, ISourceReference>; Returns: data.IKeyedReadOnlyCollection < SourceReferenceId , ISourceReference > Introduced: version 1.0"
  },
  "api/notebook-sdk.records.inote.contents.html": {
    "href": "api/notebook-sdk.records.inote.contents.html",
    "title": "records.INote.contents property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > INote > contents records.INote.contents property Gets the contents of the note. Signature: readonly contents: string; Returns: string Introduced: version 1.0 Remarks See schema.INotesSchema for constraints on the contents of notes."
  },
  "api/notebook-sdk.records.inote.creator.html": {
    "href": "api/notebook-sdk.records.inote.creator.html",
    "title": "records.INote.creator property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > INote > creator records.INote.creator property Gets the creator of the note. Signature: readonly creator: data.IUser; Returns: data.IUser Introduced: version 1.0"
  },
  "api/notebook-sdk.records.inote.firstuploaded.html": {
    "href": "api/notebook-sdk.records.inote.firstuploaded.html",
    "title": "records.INote.firstUploaded property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > INote > firstUploaded records.INote.firstUploaded property Gets information about when and by whom the note was first uploaded. Signature: readonly firstUploaded: data.IUserAndDateAndTime | undefined; Returns: data.IUserAndDateAndTime | undefined Introduced: version 1.0"
  },
  "api/notebook-sdk.records.inote.html": {
    "href": "api/notebook-sdk.records.inote.html",
    "title": "records.INote interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > INote records.INote interface A note for a record. Signature: interface INote Introduced: version 1.0 Properties Property Modifiers Type Description contents readonly string Gets the contents of the note. creator readonly data.IUser Gets the creator of the note. firstUploaded readonly data.IUserAndDateAndTime | undefined Gets information about when and by whom the note was first uploaded. id readonly NoteId Gets the identifier of the note. lastUploaded readonly data.IUserAndDateAndTime | undefined Gets information about when and by whom the note was last uploaded."
  },
  "api/notebook-sdk.records.inote.id.html": {
    "href": "api/notebook-sdk.records.inote.id.html",
    "title": "records.INote.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > INote > id records.INote.id property Gets the identifier of the note. Signature: readonly id: NoteId; Returns: NoteId Introduced: version 1.0"
  },
  "api/notebook-sdk.records.inote.lastuploaded.html": {
    "href": "api/notebook-sdk.records.inote.lastuploaded.html",
    "title": "records.INote.lastUploaded property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > INote > lastUploaded records.INote.lastUploaded property Gets information about when and by whom the note was last uploaded. Signature: readonly lastUploaded: data.IUserAndDateAndTime | undefined; Returns: data.IUserAndDateAndTime | undefined Introduced: version 1.0"
  },
  "api/notebook-sdk.records.inotedata.contents.html": {
    "href": "api/notebook-sdk.records.inotedata.contents.html",
    "title": "records.INoteData.contents property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > INoteData > contents records.INoteData.contents property Gets the contents of the new note. Signature: readonly contents: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.records.inotedata.html": {
    "href": "api/notebook-sdk.records.inotedata.html",
    "title": "records.INoteData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > INoteData records.INoteData interface A set of data for creating a note. Signature: interface INoteData Introduced: version 1.1 Properties Property Modifiers Type Description contents readonly string Gets the contents of the new note."
  },
  "api/notebook-sdk.records.irecordlabeldetails.html": {
    "href": "api/notebook-sdk.records.irecordlabeldetails.html",
    "title": "records.IRecordLabelDetails interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > IRecordLabelDetails records.IRecordLabelDetails interface A label for a record. Signature: interface IRecordLabelDetails extends data.ILabelDetailsBase Extends: data.ILabelDetailsBase Introduced: version 1.5 Properties Property Modifiers Type Description hasLabel readonly boolean Indicates whether the label is not empty. (Inherited from ILabelDetailsBase <!-- --> ) labelOrEmpty readonly string Gets the label or, if the label is empty, an empty string. (Inherited from ILabelDetailsBase <!-- --> ) labelOrFallback readonly string Gets the label or, if the label is empty, a standard fallback string such as ' <!-- --> < <!-- --> No value <!-- --> > <!-- --> '. (Inherited from ILabelDetailsBase <!-- --> )"
  },
  "api/notebook-sdk.records.isecuritysetting.dimension.html": {
    "href": "api/notebook-sdk.records.isecuritysetting.dimension.html",
    "title": "records.ISecuritySetting.dimension property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISecuritySetting > dimension records.ISecuritySetting.dimension property Gets the security dimension that the dimension values come from. Signature: readonly dimension: schema.ISecurityDimension; Returns: schema.ISecurityDimension Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isecuritysetting.html": {
    "href": "api/notebook-sdk.records.isecuritysetting.html",
    "title": "records.ISecuritySetting interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISecuritySetting records.ISecuritySetting interface A set of dimension values for a record, from a particular security dimension. Signature: interface ISecuritySetting Introduced: version 1.0 Properties Property Modifiers Type Description dimension readonly schema.ISecurityDimension Gets the security dimension that the dimension values come from. values readonly data.IReadOnlyCollection <!-- --> < schema.ISecurityDimensionValue <!-- --> > Gets the security dimension values."
  },
  "api/notebook-sdk.records.isecuritysetting.values.html": {
    "href": "api/notebook-sdk.records.isecuritysetting.values.html",
    "title": "records.ISecuritySetting.values property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISecuritySetting > values records.ISecuritySetting.values property Gets the security dimension values. Signature: readonly values: data.IReadOnlyCollection<schema.ISecurityDimensionValue>; Returns: data.IReadOnlyCollection < schema.ISecurityDimensionValue > Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isecuritysettingdata.dimension.html": {
    "href": "api/notebook-sdk.records.isecuritysettingdata.dimension.html",
    "title": "records.ISecuritySettingData.dimension property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISecuritySettingData > dimension records.ISecuritySettingData.dimension property Gets or sets the security dimension for the new security setting. Signature: dimension: schema.SecurityDimensionId | schema.ISecurityDimension; Returns: schema.SecurityDimensionId | schema.ISecurityDimension Introduced: version 1.1"
  },
  "api/notebook-sdk.records.isecuritysettingdata.html": {
    "href": "api/notebook-sdk.records.isecuritysettingdata.html",
    "title": "records.ISecuritySettingData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISecuritySettingData records.ISecuritySettingData interface A set of data for creating a security setting. Signature: interface ISecuritySettingData Introduced: version 1.1 Properties Property Modifiers Type Description dimension schema.SecurityDimensionId | schema.ISecurityDimension Gets or sets the security dimension for the new security setting. values readonly ( schema.SecurityDimensionValueId | schema.ISecurityDimensionValue <!-- --> )[] Gets or sets the dimension values for the new security setting."
  },
  "api/notebook-sdk.records.isecuritysettingdata.values.html": {
    "href": "api/notebook-sdk.records.isecuritysettingdata.values.html",
    "title": "records.ISecuritySettingData.values property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISecuritySettingData > values records.ISecuritySettingData.values property Gets or sets the dimension values for the new security setting. Signature: values: readonly (schema.SecurityDimensionValueId | schema.ISecurityDimensionValue)[]; Returns: readonly ( schema.SecurityDimensionValueId | schema.ISecurityDimensionValue )[] Introduced: version 1.1"
  },
  "api/notebook-sdk.records.isourceidentifier.html": {
    "href": "api/notebook-sdk.records.isourceidentifier.html",
    "title": "records.ISourceIdentifier interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceIdentifier records.ISourceIdentifier interface A source identifier for a record. Signature: interface ISourceIdentifier Introduced: version 1.0 Remarks A source identifier contains information that can locate data from which the record was derived in its original source. Properties Property Modifiers Type Description key readonly string[] Gets the values that make up the source identifier key. type readonly string Gets the type of the source identifier."
  },
  "api/notebook-sdk.records.isourceidentifier.key.html": {
    "href": "api/notebook-sdk.records.isourceidentifier.key.html",
    "title": "records.ISourceIdentifier.key property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceIdentifier > key records.ISourceIdentifier.key property Gets the values that make up the source identifier key. Signature: readonly key: string[]; Returns: string[] Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isourceidentifier.type.html": {
    "href": "api/notebook-sdk.records.isourceidentifier.type.html",
    "title": "records.ISourceIdentifier.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceIdentifier > type records.ISourceIdentifier.type property Gets the type of the source identifier. Signature: readonly type: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isourceidentifierdata.html": {
    "href": "api/notebook-sdk.records.isourceidentifierdata.html",
    "title": "records.ISourceIdentifierData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceIdentifierData records.ISourceIdentifierData interface A set of data for creating a source identifier. Signature: interface ISourceIdentifierData Introduced: version 1.1 Properties Property Modifiers Type Description key readonly string[] Gets the values that make up the new source identifier key. type readonly string Gets the type of the new source identifier."
  },
  "api/notebook-sdk.records.isourceidentifierdata.key.html": {
    "href": "api/notebook-sdk.records.isourceidentifierdata.key.html",
    "title": "records.ISourceIdentifierData.key property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceIdentifierData > key records.ISourceIdentifierData.key property Gets the values that make up the new source identifier key. Signature: readonly key: string[]; Returns: string[] Introduced: version 1.1"
  },
  "api/notebook-sdk.records.isourceidentifierdata.type.html": {
    "href": "api/notebook-sdk.records.isourceidentifierdata.type.html",
    "title": "records.ISourceIdentifierData.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceIdentifierData > type records.ISourceIdentifierData.type property Gets the type of the new source identifier. Signature: readonly type: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.records.isourcereference.description.html": {
    "href": "api/notebook-sdk.records.isourcereference.description.html",
    "title": "records.ISourceReference.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference > description records.ISourceReference.description property Gets the description of the source that the source reference describes. Signature: readonly description?: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isourcereference.html": {
    "href": "api/notebook-sdk.records.isourcereference.html",
    "title": "records.ISourceReference interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference records.ISourceReference interface A source reference for a record. Signature: interface ISourceReference Introduced: version 1.0 Remarks A source reference contains information about a source from which data in the record was derived. Properties Property Modifiers Type Description description? readonly string (Optional) Gets the description of the source that the source reference describes. id readonly SourceReferenceId Gets the identifier of the source reference. imageUrl? readonly string (Optional) Gets the URL of an image of the source that the source reference describes. isReadOnly readonly boolean Indicates whether the source reference is read-only. location? readonly string (Optional) Gets the location of the source that the source reference describes. locationIsUrl readonly boolean Indicates whether it makes sense to show location as a hyperlink. name readonly string Gets the name of the source that the source reference describes. type? readonly string (Optional) Gets the type of the source that the source reference describes."
  },
  "api/notebook-sdk.records.isourcereference.id.html": {
    "href": "api/notebook-sdk.records.isourcereference.id.html",
    "title": "records.ISourceReference.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference > id records.ISourceReference.id property Gets the identifier of the source reference. Signature: readonly id: SourceReferenceId; Returns: SourceReferenceId Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isourcereference.imageurl.html": {
    "href": "api/notebook-sdk.records.isourcereference.imageurl.html",
    "title": "records.ISourceReference.imageUrl property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference > imageUrl records.ISourceReference.imageUrl property Gets the URL of an image of the source that the source reference describes. Signature: readonly imageUrl?: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isourcereference.isreadonly.html": {
    "href": "api/notebook-sdk.records.isourcereference.isreadonly.html",
    "title": "records.ISourceReference.isReadOnly property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference > isReadOnly records.ISourceReference.isReadOnly property Indicates whether the source reference is read-only. Signature: readonly isReadOnly: boolean; Returns: boolean Introduced: version 1.8"
  },
  "api/notebook-sdk.records.isourcereference.location.html": {
    "href": "api/notebook-sdk.records.isourcereference.location.html",
    "title": "records.ISourceReference.location property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference > location records.ISourceReference.location property Gets the location of the source that the source reference describes. Signature: readonly location?: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isourcereference.locationisurl.html": {
    "href": "api/notebook-sdk.records.isourcereference.locationisurl.html",
    "title": "records.ISourceReference.locationIsUrl property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference > locationIsUrl records.ISourceReference.locationIsUrl property Indicates whether it makes sense to show location as a hyperlink. Signature: readonly locationIsUrl: boolean; Returns: boolean Introduced: version 1.0 Remarks This property is true if location is a valid URL that a plug-in can make available to users, in the same way that the i2 Notebook Record Inspector presents source reference locations."
  },
  "api/notebook-sdk.records.isourcereference.name.html": {
    "href": "api/notebook-sdk.records.isourcereference.name.html",
    "title": "records.ISourceReference.name property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference > name records.ISourceReference.name property Gets the name of the source that the source reference describes. Signature: readonly name: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isourcereference.type.html": {
    "href": "api/notebook-sdk.records.isourcereference.type.html",
    "title": "records.ISourceReference.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReference > type records.ISourceReference.type property Gets the type of the source that the source reference describes. Signature: readonly type?: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.records.isourcereferencedata.description.html": {
    "href": "api/notebook-sdk.records.isourcereferencedata.description.html",
    "title": "records.ISourceReferenceData.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReferenceData > description records.ISourceReferenceData.description property Gets the description of the source that the new source reference describes. Signature: readonly description?: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.records.isourcereferencedata.html": {
    "href": "api/notebook-sdk.records.isourcereferencedata.html",
    "title": "records.ISourceReferenceData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReferenceData records.ISourceReferenceData interface A set of data for creating a source reference. Signature: interface ISourceReferenceData Introduced: version 1.1 Properties Property Modifiers Type Description description? readonly string (Optional) Gets the description of the source that the new source reference describes. imageUrl? readonly string (Optional) Gets the URL of an image of the source that the new source reference describes. location? readonly string (Optional) Gets the location of the source that the new source reference describes. name readonly string Gets the name of the source that the new source reference describes. type? readonly string (Optional) Gets the type of the source that the new source reference describes."
  },
  "api/notebook-sdk.records.isourcereferencedata.imageurl.html": {
    "href": "api/notebook-sdk.records.isourcereferencedata.imageurl.html",
    "title": "records.ISourceReferenceData.imageUrl property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReferenceData > imageUrl records.ISourceReferenceData.imageUrl property Gets the URL of an image of the source that the new source reference describes. Signature: readonly imageUrl?: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.records.isourcereferencedata.location.html": {
    "href": "api/notebook-sdk.records.isourcereferencedata.location.html",
    "title": "records.ISourceReferenceData.location property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReferenceData > location records.ISourceReferenceData.location property Gets the location of the source that the new source reference describes. Signature: readonly location?: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.records.isourcereferencedata.name.html": {
    "href": "api/notebook-sdk.records.isourcereferencedata.name.html",
    "title": "records.ISourceReferenceData.name property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReferenceData > name records.ISourceReferenceData.name property Gets the name of the source that the new source reference describes. Signature: readonly name: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.records.isourcereferencedata.type.html": {
    "href": "api/notebook-sdk.records.isourcereferencedata.type.html",
    "title": "records.ISourceReferenceData.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > records > ISourceReferenceData > type records.ISourceReferenceData.type property Gets the type of the source that the new source reference describes. Signature: readonly type?: string; Returns: string Introduced: version 1.1"
  },
  "api/notebook-sdk.records.noteid.html": {
    "href": "api/notebook-sdk.records.noteid.html",
    "title": "records.NoteId type",
    "keywords": "Home > @i2analyze/notebook-sdk > records > NoteId records.NoteId type The identifier of a note. Signature: type NoteId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.records.sourcereferenceid.html": {
    "href": "api/notebook-sdk.records.sourcereferenceid.html",
    "title": "records.SourceReferenceId type",
    "keywords": "Home > @i2analyze/notebook-sdk > records > SourceReferenceId records.SourceReferenceId type The identifier of a source reference. Signature: type SourceReferenceId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.analyzeitemtypeid.html": {
    "href": "api/notebook-sdk.schema.analyzeitemtypeid.html",
    "title": "schema.AnalyzeItemTypeId type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > AnalyzeItemTypeId schema.AnalyzeItemTypeId type An identifier of an item type in the i2 Analyze schema. Signature: type AnalyzeItemTypeId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.analyzepropertytypeid.html": {
    "href": "api/notebook-sdk.schema.analyzepropertytypeid.html",
    "title": "schema.AnalyzePropertyTypeId type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > AnalyzePropertyTypeId schema.AnalyzePropertyTypeId type An identifier of a property type in the i2 Analyze schema. Signature: type AnalyzePropertyTypeId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.chartitemtypeid.html": {
    "href": "api/notebook-sdk.schema.chartitemtypeid.html",
    "title": "schema.ChartItemTypeId type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ChartItemTypeId schema.ChartItemTypeId type An identifier of an item type in a chart schema. Signature: type ChartItemTypeId = number; Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.chartitemtypespecifier.html": {
    "href": "api/notebook-sdk.schema.chartitemtypespecifier.html",
    "title": "schema.ChartItemTypeSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ChartItemTypeSpecifier schema.ChartItemTypeSpecifier type A common specifier for a chart item type. Signature: type ChartItemTypeSpecifier = ChartItemTypeId | IChartItemType; References: ChartItemTypeId <!-- --> , IChartItemType Introduced: version 1.3"
  },
  "api/notebook-sdk.schema.chartpropertytypeid.html": {
    "href": "api/notebook-sdk.schema.chartpropertytypeid.html",
    "title": "schema.ChartPropertyTypeId type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ChartPropertyTypeId schema.ChartPropertyTypeId type An identifier of a property type in a chart schema. Signature: type ChartPropertyTypeId = number; Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.customlogicaltype.html": {
    "href": "api/notebook-sdk.schema.customlogicaltype.html",
    "title": "schema.CustomLogicalType type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > CustomLogicalType schema.CustomLogicalType type A logical type for the value of a custom record property. Signature: type CustomLogicalType = Omit<data.LogicalType, 'selectedFromList' | 'suggestedFromList'>; References: data.LogicalType Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.html": {
    "href": "api/notebook-sdk.schema.html",
    "title": "schema namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > schema schema namespace The members of the schema namespace provide access to the specifications that govern the structure of records in the i2 Notebook web client. Schemas determine what properties records can contain; place constraints on notes, source identifiers, and source references; and describe the security model that controls access to records. Signature: export declare namespace schema Introduced: version 1.0 Interfaces Interface Description IChartEntityType An entity type. IChartEntityTypeData A set of data for creating a custom entity type. IChartItemTypeBase A set of information that is common to all item types in i2 Notebook. IChartItemTypeDataBase A set of data that is common to creating all custom item types. IChartLinkType A link type. IChartLinkTypeData A set of data for creating a custom link type. IChartPropertyLabelPart A part of a label that consists of a property value. IChartPropertyType A property type. IChartSchema A chart schema, which defines the types of the records and properties that can appear on charts in the i2 Notebook web client. IChartSchemaChange A change that has occurred to an i2 Notebook chart schema. IItemTypeEditor A set of methods for modifying a custom item type. ILiteralLabelPart A part of a label that consists of a literal string. INotesSchema A schema for notes, which places constraints on their use. IPendingItemType An item type that has been created in a transaction handler, but has not yet been added to a chart's schema. IPendingPropertyType A custom property type that has been created in a transaction handler, but has not yet been added to a chart schema. IPossibleValue A possible value for a property whose property type has a string-based logical type. IPropertyTypeData A set of data for creating a custom property type. IPropertyTypeEditor A set of methods for modifying a custom property type. IPropertyTypesEditor A set of methods for adding and modifying custom property types on schema and custom item types. ISchemaInfo Information about a schema in an i2 Analyze deployment. ISecurityDimension A security dimension. ISecurityDimensionValue A security dimension value. ISecuritySchema A security schema, which defines the available security dimensions and their dimension values. ISourceIdentifiersSchema A schema for source identifiers, which places constraints on their use. ISourceReferenceSchema A schema for source references, which places constraints on their use. ISourceReferenceSelectedFromValueType A type that represents the constraints on a selected-from string value in a source reference. ISourceReferenceStringValueType A type that represents the constraints on a single-line string value in a source reference. ISourceReferenceSuggestedFromValueType A type that represents the constraints on a suggested-from string value in a source reference. IStringLimitedValueType A type that represents the constraints on a string value in a source reference. Type Aliases Type Alias Description AnalyzeItemTypeId An identifier of an item type in the i2 Analyze schema. AnalyzePropertyTypeId An identifier of a property type in the i2 Analyze schema. ChartItemTypeId An identifier of an item type in a chart schema. ChartItemTypeSpecifier A common specifier for a chart item type. ChartPropertyTypeId An identifier of a property type in a chart schema. CustomLogicalType A logical type for the value of a custom record property. IChartItemType An entity type or a link type. ILabelPart A part of a label definition. ISourceReferenceValueType A type for the value of a field in a source reference. ItemTypeSpecifier A common specifier for an item type. PropertyTypeSpecifier A common specifier for a chart property type. SchemaType The type of a schema. SecurityDimensionId An identifier of a security dimension. SecurityDimensionValueId The identifier of a security dimension value."
  },
  "api/notebook-sdk.schema.ichartentitytype.html": {
    "href": "api/notebook-sdk.schema.ichartentitytype.html",
    "title": "schema.IChartEntityType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartEntityType schema.IChartEntityType interface An entity type. Signature: interface IChartEntityType extends IChartItemTypeBase Extends: IChartItemTypeBase Introduced: version 1.0 Properties Property Modifiers Type Description analyzeId? readonly AnalyzeItemTypeId (Optional) Gets the identifier of the item type in the i2 Analyze schema, if it has one. (Inherited from IChartItemTypeBase <!-- --> ) description readonly string Gets the description of the item type. (Inherited from IChartItemTypeBase <!-- --> ) displayName readonly string Gets the display name of the item type. (Inherited from IChartItemTypeBase <!-- --> ) id readonly ChartItemTypeId Gets the identifier of the item type. (Inherited from IChartItemTypeBase <!-- --> ) image readonly data.IImage Gets the image that represents records that have the entity type. isCustom readonly boolean Indicates whether the item type is a custom type. (Inherited from IChartItemTypeBase <!-- --> ) isInfoStore readonly boolean Indicates whether the item type is defined in the Information Store schema. (Inherited from IChartItemTypeBase <!-- --> ) isOrphaned readonly boolean Indicates whether the item type is orphaned - that is, it does not have a counterpart in the i2 Analyze schema. (Inherited from IChartItemTypeBase <!-- --> ) labelDefinition readonly data.IReadOnlyCollection <!-- --> < ILabelPart <!-- --> > Gets the label definition for the item type, which describes how record labels are formed. (Inherited from IChartItemTypeBase <!-- --> ) origin readonly ISchemaInfo Gets information about the schema where the type definition is located. (Inherited from IChartItemTypeBase <!-- --> ) propertyTypes readonly data.IKeyedReadOnlyCollection <!-- --> < ChartPropertyTypeId <!-- --> , IChartPropertyType <!-- --> > Gets all the property types of the item type. (Inherited from IChartItemTypeBase <!-- --> ) semanticTypeId readonly string Gets the identifier of the semantic type of the item type. (Inherited from IChartItemTypeBase <!-- --> ) sourceReferenceSchema readonly ISourceReferenceSchema Gets the source reference schema for the item type. (Inherited from IChartItemTypeBase <!-- --> ) Methods Method Description getPropertyType(analyzePropertyTypeId) Gets the property type that has the specified i2 Analyze type identifier. (Inherited from IChartItemTypeBase <!-- --> ) isEntityType() Tests whether the item type is an entity item type; functions as a TypeScript typeguard. (Inherited from IChartItemTypeBase <!-- --> ) isLinkType() Tests whether the item type is a link item type; functions as a TypeScript typeguard. (Inherited from IChartItemTypeBase <!-- --> )"
  },
  "api/notebook-sdk.schema.ichartentitytype.image.html": {
    "href": "api/notebook-sdk.schema.ichartentitytype.image.html",
    "title": "schema.IChartEntityType.image property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartEntityType > image schema.IChartEntityType.image property Gets the image that represents records that have the entity type. Signature: readonly image: data.IImage; Returns: data.IImage Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartentitytypedata.html": {
    "href": "api/notebook-sdk.schema.ichartentitytypedata.html",
    "title": "schema.IChartEntityTypeData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartEntityTypeData schema.IChartEntityTypeData interface A set of data for creating a custom entity type. Signature: interface IChartEntityTypeData extends IChartItemTypeDataBase Extends: IChartItemTypeDataBase Introduced: version 1.6 Properties Property Modifiers Type Description displayName readonly string Gets the display name for the custom item type. (Inherited from IChartItemTypeDataBase <!-- --> ) icon readonly string Gets the name of the icon for the custom entity type. propertyTypes? readonly Iterable< IPropertyTypeData <!-- --> > (Optional) Gets the property types for the custom item type. (Inherited from IChartItemTypeDataBase <!-- --> )"
  },
  "api/notebook-sdk.schema.ichartentitytypedata.icon.html": {
    "href": "api/notebook-sdk.schema.ichartentitytypedata.icon.html",
    "title": "schema.IChartEntityTypeData.icon property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartEntityTypeData > icon schema.IChartEntityTypeData.icon property Gets the name of the icon for the custom entity type. Signature: readonly icon: string; Returns: string Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ichartitemtype.html": {
    "href": "api/notebook-sdk.schema.ichartitemtype.html",
    "title": "schema.IChartItemType type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemType schema.IChartItemType type An entity type or a link type. Signature: type IChartItemType = IChartEntityType | IChartLinkType; References: IChartEntityType <!-- --> , IChartLinkType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.analyzeid.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.analyzeid.html",
    "title": "schema.IChartItemTypeBase.analyzeId property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > analyzeId schema.IChartItemTypeBase.analyzeId property Gets the identifier of the item type in the i2 Analyze schema, if it has one. Signature: readonly analyzeId?: AnalyzeItemTypeId; Returns: AnalyzeItemTypeId Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.description.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.description.html",
    "title": "schema.IChartItemTypeBase.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > description schema.IChartItemTypeBase.description property Gets the description of the item type. Signature: readonly description: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.displayname.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.displayname.html",
    "title": "schema.IChartItemTypeBase.displayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > displayName schema.IChartItemTypeBase.displayName property Gets the display name of the item type. Signature: readonly displayName: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.getpropertytype.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.getpropertytype.html",
    "title": "schema.IChartItemTypeBase.getPropertyType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > getPropertyType schema.IChartItemTypeBase.getPropertyType() method Gets the property type that has the specified i2 Analyze type identifier. Signature: getPropertyType(analyzePropertyTypeId: AnalyzePropertyTypeId): IChartPropertyType; Introduced: version 1.2 Parameters Parameter Type Description analyzePropertyTypeId AnalyzePropertyTypeId An i2 Analyze property type identifier. Returns: IChartPropertyType The requested property type. Exceptions VerbatimError if the item type does not contain a property type that has the specified i2 Analyze type identifier."
  },
  "api/notebook-sdk.schema.ichartitemtypebase.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.html",
    "title": "schema.IChartItemTypeBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase schema.IChartItemTypeBase interface A set of information that is common to all item types in i2 Notebook. Signature: interface IChartItemTypeBase Introduced: version 1.0 Properties Property Modifiers Type Description analyzeId? readonly AnalyzeItemTypeId (Optional) Gets the identifier of the item type in the i2 Analyze schema, if it has one. description readonly string Gets the description of the item type. displayName readonly string Gets the display name of the item type. id readonly ChartItemTypeId Gets the identifier of the item type. isCustom readonly boolean Indicates whether the item type is a custom type. isInfoStore readonly boolean Indicates whether the item type is defined in the Information Store schema. isOrphaned readonly boolean Indicates whether the item type is orphaned - that is, it does not have a counterpart in the i2 Analyze schema. labelDefinition readonly data.IReadOnlyCollection <!-- --> < ILabelPart <!-- --> > Gets the label definition for the item type, which describes how record labels are formed. origin readonly ISchemaInfo Gets information about the schema where the type definition is located. propertyTypes readonly data.IKeyedReadOnlyCollection <!-- --> < ChartPropertyTypeId <!-- --> , IChartPropertyType <!-- --> > Gets all the property types of the item type. semanticTypeId readonly string Gets the identifier of the semantic type of the item type. sourceReferenceSchema readonly ISourceReferenceSchema Gets the source reference schema for the item type. Methods Method Description getPropertyType(analyzePropertyTypeId) Gets the property type that has the specified i2 Analyze type identifier. isEntityType() Tests whether the item type is an entity item type; functions as a TypeScript typeguard. isLinkType() Tests whether the item type is a link item type; functions as a TypeScript typeguard."
  },
  "api/notebook-sdk.schema.ichartitemtypebase.id.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.id.html",
    "title": "schema.IChartItemTypeBase.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > id schema.IChartItemTypeBase.id property Gets the identifier of the item type. Signature: readonly id: ChartItemTypeId; Returns: ChartItemTypeId Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.iscustom.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.iscustom.html",
    "title": "schema.IChartItemTypeBase.isCustom property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > isCustom schema.IChartItemTypeBase.isCustom property Indicates whether the item type is a custom type. Signature: readonly isCustom: boolean; Returns: boolean Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.isentitytype.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.isentitytype.html",
    "title": "schema.IChartItemTypeBase.isEntityType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > isEntityType schema.IChartItemTypeBase.isEntityType() method Tests whether the item type is an entity item type; functions as a TypeScript typeguard. Signature: isEntityType(): this is IChartEntityType; Returns: this is IChartEntityType true if the record is an entity item type; false otherwise. Introduced: version 1.1"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.isinfostore.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.isinfostore.html",
    "title": "schema.IChartItemTypeBase.isInfoStore property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > isInfoStore schema.IChartItemTypeBase.isInfoStore property Indicates whether the item type is defined in the Information Store schema. Signature: readonly isInfoStore: boolean; Returns: boolean Introduced: version 1.1"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.islinktype.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.islinktype.html",
    "title": "schema.IChartItemTypeBase.isLinkType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > isLinkType schema.IChartItemTypeBase.isLinkType() method Tests whether the item type is a link item type; functions as a TypeScript typeguard. Signature: isLinkType(): this is IChartLinkType; Returns: this is IChartLinkType true if the item type is a link item type; false otherwise. Introduced: version 1.1"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.isorphaned.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.isorphaned.html",
    "title": "schema.IChartItemTypeBase.isOrphaned property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > isOrphaned schema.IChartItemTypeBase.isOrphaned property Indicates whether the item type is orphaned - that is, it does not have a counterpart in the i2 Analyze schema. Signature: readonly isOrphaned: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.labeldefinition.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.labeldefinition.html",
    "title": "schema.IChartItemTypeBase.labelDefinition property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > labelDefinition schema.IChartItemTypeBase.labelDefinition property Gets the label definition for the item type, which describes how record labels are formed. Signature: readonly labelDefinition: data.IReadOnlyCollection<ILabelPart>; Returns: data.IReadOnlyCollection < ILabelPart > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.origin.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.origin.html",
    "title": "schema.IChartItemTypeBase.origin property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > origin schema.IChartItemTypeBase.origin property Gets information about the schema where the type definition is located. Signature: readonly origin: ISchemaInfo; Returns: ISchemaInfo Introduced: version 1.5"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.propertytypes.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.propertytypes.html",
    "title": "schema.IChartItemTypeBase.propertyTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > propertyTypes schema.IChartItemTypeBase.propertyTypes property Gets all the property types of the item type. Signature: readonly propertyTypes: data.IKeyedReadOnlyCollection<ChartPropertyTypeId, IChartPropertyType>; Returns: data.IKeyedReadOnlyCollection < ChartPropertyTypeId , IChartPropertyType > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.semantictypeid.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.semantictypeid.html",
    "title": "schema.IChartItemTypeBase.semanticTypeId property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > semanticTypeId schema.IChartItemTypeBase.semanticTypeId property Gets the identifier of the semantic type of the item type. Signature: readonly semanticTypeId: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypebase.sourcereferenceschema.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypebase.sourcereferenceschema.html",
    "title": "schema.IChartItemTypeBase.sourceReferenceSchema property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeBase > sourceReferenceSchema schema.IChartItemTypeBase.sourceReferenceSchema property Gets the source reference schema for the item type. Signature: readonly sourceReferenceSchema: ISourceReferenceSchema; Returns: ISourceReferenceSchema Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartitemtypedatabase.displayname.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypedatabase.displayname.html",
    "title": "schema.IChartItemTypeDataBase.displayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeDataBase > displayName schema.IChartItemTypeDataBase.displayName property Gets the display name for the custom item type. Signature: readonly displayName: string; Returns: string Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ichartitemtypedatabase.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypedatabase.html",
    "title": "schema.IChartItemTypeDataBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeDataBase schema.IChartItemTypeDataBase interface A set of data that is common to creating all custom item types. Signature: interface IChartItemTypeDataBase Introduced: version 1.6 Properties Property Modifiers Type Description displayName readonly string Gets the display name for the custom item type. propertyTypes? readonly Iterable< IPropertyTypeData <!-- --> > (Optional) Gets the property types for the custom item type."
  },
  "api/notebook-sdk.schema.ichartitemtypedatabase.propertytypes.html": {
    "href": "api/notebook-sdk.schema.ichartitemtypedatabase.propertytypes.html",
    "title": "schema.IChartItemTypeDataBase.propertyTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartItemTypeDataBase > propertyTypes schema.IChartItemTypeDataBase.propertyTypes property Gets the property types for the custom item type. Signature: readonly propertyTypes?: Iterable<IPropertyTypeData>; Returns: Iterable< IPropertyTypeData > Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ichartlinktype.fromentitytypes.html": {
    "href": "api/notebook-sdk.schema.ichartlinktype.fromentitytypes.html",
    "title": "schema.IChartLinkType.fromEntityTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartLinkType > fromEntityTypes schema.IChartLinkType.fromEntityTypes property Gets the entity types that are valid for use at the \"from\" end of links of this type. Signature: fromEntityTypes: data.IReadOnlyCollection<IChartEntityType>; Returns: data.IReadOnlyCollection < IChartEntityType > Introduced: version 1.5"
  },
  "api/notebook-sdk.schema.ichartlinktype.html": {
    "href": "api/notebook-sdk.schema.ichartlinktype.html",
    "title": "schema.IChartLinkType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartLinkType schema.IChartLinkType interface A link type. Signature: interface IChartLinkType extends IChartItemTypeBase Extends: IChartItemTypeBase Introduced: version 1.0 Properties Property Modifiers Type Description analyzeId? readonly AnalyzeItemTypeId (Optional) Gets the identifier of the item type in the i2 Analyze schema, if it has one. (Inherited from IChartItemTypeBase <!-- --> ) description readonly string Gets the description of the item type. (Inherited from IChartItemTypeBase <!-- --> ) displayName readonly string Gets the display name of the item type. (Inherited from IChartItemTypeBase <!-- --> ) fromEntityTypes data.IReadOnlyCollection <!-- --> < IChartEntityType <!-- --> > Gets the entity types that are valid for use at the \"from\" end of links of this type. id readonly ChartItemTypeId Gets the identifier of the item type. (Inherited from IChartItemTypeBase <!-- --> ) isCustom readonly boolean Indicates whether the item type is a custom type. (Inherited from IChartItemTypeBase <!-- --> ) isInfoStore readonly boolean Indicates whether the item type is defined in the Information Store schema. (Inherited from IChartItemTypeBase <!-- --> ) isOrphaned readonly boolean Indicates whether the item type is orphaned - that is, it does not have a counterpart in the i2 Analyze schema. (Inherited from IChartItemTypeBase <!-- --> ) labelDefinition readonly data.IReadOnlyCollection <!-- --> < ILabelPart <!-- --> > Gets the label definition for the item type, which describes how record labels are formed. (Inherited from IChartItemTypeBase <!-- --> ) origin readonly ISchemaInfo Gets information about the schema where the type definition is located. (Inherited from IChartItemTypeBase <!-- --> ) propertyTypes readonly data.IKeyedReadOnlyCollection <!-- --> < ChartPropertyTypeId <!-- --> , IChartPropertyType <!-- --> > Gets all the property types of the item type. (Inherited from IChartItemTypeBase <!-- --> ) semanticTypeId readonly string Gets the identifier of the semantic type of the item type. (Inherited from IChartItemTypeBase <!-- --> ) sourceReferenceSchema readonly ISourceReferenceSchema Gets the source reference schema for the item type. (Inherited from IChartItemTypeBase <!-- --> ) toEntityTypes data.IReadOnlyCollection <!-- --> < IChartEntityType <!-- --> > Gets the entity types that are valid for use at the \"to\" end of links of this type. Methods Method Description getPropertyType(analyzePropertyTypeId) Gets the property type that has the specified i2 Analyze type identifier. (Inherited from IChartItemTypeBase <!-- --> ) isEntityType() Tests whether the item type is an entity item type; functions as a TypeScript typeguard. (Inherited from IChartItemTypeBase <!-- --> ) isLinkType() Tests whether the item type is a link item type; functions as a TypeScript typeguard. (Inherited from IChartItemTypeBase <!-- --> )"
  },
  "api/notebook-sdk.schema.ichartlinktype.toentitytypes.html": {
    "href": "api/notebook-sdk.schema.ichartlinktype.toentitytypes.html",
    "title": "schema.IChartLinkType.toEntityTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartLinkType > toEntityTypes schema.IChartLinkType.toEntityTypes property Gets the entity types that are valid for use at the \"to\" end of links of this type. Signature: toEntityTypes: data.IReadOnlyCollection<IChartEntityType>; Returns: data.IReadOnlyCollection < IChartEntityType > Introduced: version 1.5"
  },
  "api/notebook-sdk.schema.ichartlinktypedata.html": {
    "href": "api/notebook-sdk.schema.ichartlinktypedata.html",
    "title": "schema.IChartLinkTypeData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartLinkTypeData schema.IChartLinkTypeData interface A set of data for creating a custom link type. Signature: interface IChartLinkTypeData extends IChartItemTypeDataBase Extends: IChartItemTypeDataBase Introduced: version 1.6 Properties Property Modifiers Type Description displayName readonly string Gets the display name for the custom item type. (Inherited from IChartItemTypeDataBase <!-- --> ) propertyTypes? readonly Iterable< IPropertyTypeData <!-- --> > (Optional) Gets the property types for the custom item type. (Inherited from IChartItemTypeDataBase <!-- --> )"
  },
  "api/notebook-sdk.schema.ichartpropertylabelpart.html": {
    "href": "api/notebook-sdk.schema.ichartpropertylabelpart.html",
    "title": "schema.IChartPropertyLabelPart interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyLabelPart schema.IChartPropertyLabelPart interface A part of a label that consists of a property value. Signature: interface IChartPropertyLabelPart Introduced: version 1.0 Properties Property Modifiers Type Description propertyType readonly IChartPropertyType Gets the type of the property whose value is used for the label part. type readonly 'chartProperty' Gets the type of label part."
  },
  "api/notebook-sdk.schema.ichartpropertylabelpart.propertytype.html": {
    "href": "api/notebook-sdk.schema.ichartpropertylabelpart.propertytype.html",
    "title": "schema.IChartPropertyLabelPart.propertyType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyLabelPart > propertyType schema.IChartPropertyLabelPart.propertyType property Gets the type of the property whose value is used for the label part. Signature: readonly propertyType: IChartPropertyType; Returns: IChartPropertyType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertylabelpart.type.html": {
    "href": "api/notebook-sdk.schema.ichartpropertylabelpart.type.html",
    "title": "schema.IChartPropertyLabelPart.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyLabelPart > type schema.IChartPropertyLabelPart.type property Gets the type of label part. Signature: readonly type: 'chartProperty'; Returns: 'chartProperty' Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertytype.analyzeid.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.analyzeid.html",
    "title": "schema.IChartPropertyType.analyzeId property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > analyzeId schema.IChartPropertyType.analyzeId property Gets the identifier of the property type in the i2 Analyze schema, if it has one. Signature: readonly analyzeId?: AnalyzePropertyTypeId; Returns: AnalyzePropertyTypeId Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertytype.description.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.description.html",
    "title": "schema.IChartPropertyType.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > description schema.IChartPropertyType.description property Gets the description of the property type. Signature: readonly description: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertytype.displayname.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.displayname.html",
    "title": "schema.IChartPropertyType.displayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > displayName schema.IChartPropertyType.displayName property Gets the display name of the property type. Signature: readonly displayName: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertytype.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.html",
    "title": "schema.IChartPropertyType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType schema.IChartPropertyType interface A property type. Signature: interface IChartPropertyType Introduced: version 1.0 Properties Property Modifiers Type Description analyzeId? readonly AnalyzePropertyTypeId (Optional) Gets the identifier of the property type in the i2 Analyze schema, if it has one. description readonly string Gets the description of the property type. displayName readonly string Gets the display name of the property type. id readonly ChartPropertyTypeId Gets the identifier of the property type. isCustom readonly boolean Indicates whether the property type is a custom type. isMandatory readonly boolean Indicates whether records whose item type contains the property type must have a value for it. isOrphaned readonly boolean Indicates whether the property type is orphaned - that is, it does not have a counterpart in the i2 Analyze schema. logicalType readonly data.LogicalType Gets the logical type of the value of a property that has the property type. maxStringLength? readonly data.ICharLimit (Optional) Gets the maximum string length for the value of a property that has the property type. possibleValues? readonly data.IReadOnlyCollection <!-- --> < IPossibleValue <!-- --> > (Optional) Gets the possible values for a property that has the property type. semanticTypeId readonly string Gets the identifier of the semantic type of the property type."
  },
  "api/notebook-sdk.schema.ichartpropertytype.id.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.id.html",
    "title": "schema.IChartPropertyType.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > id schema.IChartPropertyType.id property Gets the identifier of the property type. Signature: readonly id: ChartPropertyTypeId; Returns: ChartPropertyTypeId Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertytype.iscustom.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.iscustom.html",
    "title": "schema.IChartPropertyType.isCustom property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > isCustom schema.IChartPropertyType.isCustom property Indicates whether the property type is a custom type. Signature: readonly isCustom: boolean; Returns: boolean Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ichartpropertytype.ismandatory.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.ismandatory.html",
    "title": "schema.IChartPropertyType.isMandatory property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > isMandatory schema.IChartPropertyType.isMandatory property Indicates whether records whose item type contains the property type must have a value for it. Signature: readonly isMandatory: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertytype.isorphaned.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.isorphaned.html",
    "title": "schema.IChartPropertyType.isOrphaned property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > isOrphaned schema.IChartPropertyType.isOrphaned property Indicates whether the property type is orphaned - that is, it does not have a counterpart in the i2 Analyze schema. Signature: readonly isOrphaned: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertytype.logicaltype.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.logicaltype.html",
    "title": "schema.IChartPropertyType.logicalType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > logicalType schema.IChartPropertyType.logicalType property Gets the logical type of the value of a property that has the property type. Signature: readonly logicalType: data.LogicalType; Returns: data.LogicalType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartpropertytype.maxstringlength.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.maxstringlength.html",
    "title": "schema.IChartPropertyType.maxStringLength property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > maxStringLength schema.IChartPropertyType.maxStringLength property Gets the maximum string length for the value of a property that has the property type. Signature: readonly maxStringLength?: data.ICharLimit; Returns: data.ICharLimit Introduced: version 1.0 Remarks This is provided only for property types whose logical type is string-based."
  },
  "api/notebook-sdk.schema.ichartpropertytype.possiblevalues.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.possiblevalues.html",
    "title": "schema.IChartPropertyType.possibleValues property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > possibleValues schema.IChartPropertyType.possibleValues property Gets the possible values for a property that has the property type. Signature: readonly possibleValues?: data.IReadOnlyCollection<IPossibleValue>; Returns: data.IReadOnlyCollection < IPossibleValue > Introduced: version 1.0 Remarks This is provided only for property types whose logical type is suggestedFromList or selectedFromList <!-- --> . For selectedFromList properties, the value must be one of the possible values; for suggestedFromList properties, the possible values are just suggestions that can be provided to users."
  },
  "api/notebook-sdk.schema.ichartpropertytype.semantictypeid.html": {
    "href": "api/notebook-sdk.schema.ichartpropertytype.semantictypeid.html",
    "title": "schema.IChartPropertyType.semanticTypeId property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartPropertyType > semanticTypeId schema.IChartPropertyType.semanticTypeId property Gets the identifier of the semantic type of the property type. Signature: readonly semanticTypeId: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartschema.entitytypes.html": {
    "href": "api/notebook-sdk.schema.ichartschema.entitytypes.html",
    "title": "schema.IChartSchema.entityTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > entityTypes schema.IChartSchema.entityTypes property Gets all the entity types in the chart schema. Signature: readonly entityTypes: data.IKeyedReadOnlyCollection<ChartItemTypeId, IChartEntityType>; Returns: data.IKeyedReadOnlyCollection < ChartItemTypeId , IChartEntityType > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartschema.getitemtype.html": {
    "href": "api/notebook-sdk.schema.ichartschema.getitemtype.html",
    "title": "schema.IChartSchema.getItemType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > getItemType schema.IChartSchema.getItemType() method Gets the item type in the chart schema that has the specified i2 Analyze type identifier. Signature: getItemType(analyzeItemTypeId: AnalyzeItemTypeId): IChartItemType; Introduced: version 1.2 Parameters Parameter Type Description analyzeItemTypeId AnalyzeItemTypeId An i2 Analyze item type identifier. Returns: IChartItemType The requested chart item type. Exceptions VerbatimError if no chart item type has the specified i2 Analyze type identifier."
  },
  "api/notebook-sdk.schema.ichartschema.getsourcereferenceschema.html": {
    "href": "api/notebook-sdk.schema.ichartschema.getsourcereferenceschema.html",
    "title": "schema.IChartSchema.getSourceReferenceSchema() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > getSourceReferenceSchema schema.IChartSchema.getSourceReferenceSchema() method Gets the source reference schema for the specified item type. Signature: getSourceReferenceSchema(itemTypeOrId: IChartItemType | ChartItemTypeId): ISourceReferenceSchema; Introduced: version 1.0 Parameters Parameter Type Description itemTypeOrId IChartItemType | ChartItemTypeId An item type, or the identifier of an item type. Returns: ISourceReferenceSchema The requested source reference schema."
  },
  "api/notebook-sdk.schema.ichartschema.html": {
    "href": "api/notebook-sdk.schema.ichartschema.html",
    "title": "schema.IChartSchema interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema schema.IChartSchema interface A chart schema, which defines the types of the records and properties that can appear on charts in the i2 Notebook web client. Signature: interface IChartSchema Introduced: version 1.0 Properties Property Modifiers Type Description entityTypes readonly data.IKeyedReadOnlyCollection <!-- --> < ChartItemTypeId <!-- --> , IChartEntityType <!-- --> > Gets all the entity types in the chart schema. itemTypes readonly data.IKeyedReadOnlyCollection <!-- --> < ChartItemTypeId <!-- --> , IChartItemType <!-- --> > Gets all the item types (that is, entity types and link types) in the chart schema. linkTypes readonly data.IKeyedReadOnlyCollection <!-- --> < ChartItemTypeId <!-- --> , IChartLinkType <!-- --> > Gets all the link types in the chart schema. maxCustomTypeNameLength readonly data.ICharLimit Gets the maximum length for the names of custom types. notesSchema readonly INotesSchema Gets the schema for notes. securitySchema readonly ISecuritySchema Gets the security schema. sourceIdentifiersSchema readonly ISourceIdentifiersSchema Gets the schema for source identifiers. Methods Method Description getItemType(analyzeItemTypeId) Gets the item type in the chart schema that has the specified i2 Analyze type identifier. getSourceReferenceSchema(itemTypeOrId) Gets the source reference schema for the specified item type."
  },
  "api/notebook-sdk.schema.ichartschema.itemtypes.html": {
    "href": "api/notebook-sdk.schema.ichartschema.itemtypes.html",
    "title": "schema.IChartSchema.itemTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > itemTypes schema.IChartSchema.itemTypes property Gets all the item types (that is, entity types and link types) in the chart schema. Signature: readonly itemTypes: data.IKeyedReadOnlyCollection<ChartItemTypeId, IChartItemType>; Returns: data.IKeyedReadOnlyCollection < ChartItemTypeId , IChartItemType > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartschema.linktypes.html": {
    "href": "api/notebook-sdk.schema.ichartschema.linktypes.html",
    "title": "schema.IChartSchema.linkTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > linkTypes schema.IChartSchema.linkTypes property Gets all the link types in the chart schema. Signature: readonly linkTypes: data.IKeyedReadOnlyCollection<ChartItemTypeId, IChartLinkType>; Returns: data.IKeyedReadOnlyCollection < ChartItemTypeId , IChartLinkType > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartschema.maxcustomtypenamelength.html": {
    "href": "api/notebook-sdk.schema.ichartschema.maxcustomtypenamelength.html",
    "title": "schema.IChartSchema.maxCustomTypeNameLength property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > maxCustomTypeNameLength schema.IChartSchema.maxCustomTypeNameLength property Gets the maximum length for the names of custom types. Signature: readonly maxCustomTypeNameLength: data.ICharLimit; Returns: data.ICharLimit Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ichartschema.notesschema.html": {
    "href": "api/notebook-sdk.schema.ichartschema.notesschema.html",
    "title": "schema.IChartSchema.notesSchema property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > notesSchema schema.IChartSchema.notesSchema property Gets the schema for notes. Signature: readonly notesSchema: INotesSchema; Returns: INotesSchema Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartschema.securityschema.html": {
    "href": "api/notebook-sdk.schema.ichartschema.securityschema.html",
    "title": "schema.IChartSchema.securitySchema property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > securitySchema schema.IChartSchema.securitySchema property Gets the security schema. Signature: readonly securitySchema: ISecuritySchema; Returns: ISecuritySchema Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartschema.sourceidentifiersschema.html": {
    "href": "api/notebook-sdk.schema.ichartschema.sourceidentifiersschema.html",
    "title": "schema.IChartSchema.sourceIdentifiersSchema property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchema > sourceIdentifiersSchema schema.IChartSchema.sourceIdentifiersSchema property Gets the schema for source identifiers. Signature: readonly sourceIdentifiersSchema: ISourceIdentifiersSchema; Returns: ISourceIdentifiersSchema Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ichartschemachange.addedtypes.html": {
    "href": "api/notebook-sdk.schema.ichartschemachange.addedtypes.html",
    "title": "schema.IChartSchemaChange.addedTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchemaChange > addedTypes schema.IChartSchemaChange.addedTypes property Gets the item types that were added to the schema. Signature: readonly addedTypes: data.IReadOnlyCollection<IChartItemType>; Returns: data.IReadOnlyCollection < IChartItemType > Introduced: version 1.5"
  },
  "api/notebook-sdk.schema.ichartschemachange.changedtypes.html": {
    "href": "api/notebook-sdk.schema.ichartschemachange.changedtypes.html",
    "title": "schema.IChartSchemaChange.changedTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchemaChange > changedTypes schema.IChartSchemaChange.changedTypes property Gets the item types that were changed in the schema. Signature: readonly changedTypes: data.IReadOnlyCollection<IChartItemType>; Returns: data.IReadOnlyCollection < IChartItemType > Introduced: version 1.5"
  },
  "api/notebook-sdk.schema.ichartschemachange.html": {
    "href": "api/notebook-sdk.schema.ichartschemachange.html",
    "title": "schema.IChartSchemaChange interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchemaChange schema.IChartSchemaChange interface A change that has occurred to an i2 Notebook chart schema. Signature: interface IChartSchemaChange Introduced: version 1.5 Properties Property Modifiers Type Description addedTypes readonly data.IReadOnlyCollection <!-- --> < IChartItemType <!-- --> > Gets the item types that were added to the schema. changedTypes readonly data.IReadOnlyCollection <!-- --> < IChartItemType <!-- --> > Gets the item types that were changed in the schema. removedTypes readonly data.IReadOnlyCollection <!-- --> < ChartItemTypeId <!-- --> > Gets the identifiers of the item types that were removed from the schema."
  },
  "api/notebook-sdk.schema.ichartschemachange.removedtypes.html": {
    "href": "api/notebook-sdk.schema.ichartschemachange.removedtypes.html",
    "title": "schema.IChartSchemaChange.removedTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IChartSchemaChange > removedTypes schema.IChartSchemaChange.removedTypes property Gets the identifiers of the item types that were removed from the schema. Signature: readonly removedTypes: data.IReadOnlyCollection<ChartItemTypeId>; Returns: data.IReadOnlyCollection < ChartItemTypeId > Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.iitemtypeeditor.html": {
    "href": "api/notebook-sdk.schema.iitemtypeeditor.html",
    "title": "schema.IItemTypeEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IItemTypeEditor schema.IItemTypeEditor interface A set of methods for modifying a custom item type. Signature: interface IItemTypeEditor extends IPropertyTypesEditor Extends: IPropertyTypesEditor Introduced: version 1.6 Properties Property Modifiers Type Description isCustomItemType readonly true Indicates whether the item type is a custom type. Methods Method Description addPropertyType(propertyTypeData, insertAfter) Creates a custom property type that is added to the chart schema on committal. (Inherited from IPropertyTypesEditor <!-- --> ) editPropertyType(propertyType) Gets an object with methods for editing a custom property type. (Inherited from IPropertyTypesEditor <!-- --> ) editPropertyType(typeId, logicalType) Gets an object with methods for editing a custom property type. (Inherited from IPropertyTypesEditor <!-- --> ) setDisplayName(displayName) Sets the display name of the item type."
  },
  "api/notebook-sdk.schema.iitemtypeeditor.iscustomitemtype.html": {
    "href": "api/notebook-sdk.schema.iitemtypeeditor.iscustomitemtype.html",
    "title": "schema.IItemTypeEditor.isCustomItemType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IItemTypeEditor > isCustomItemType schema.IItemTypeEditor.isCustomItemType property Indicates whether the item type is a custom type. Signature: readonly isCustomItemType: true; Returns: true Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.iitemtypeeditor.setdisplayname.html": {
    "href": "api/notebook-sdk.schema.iitemtypeeditor.setdisplayname.html",
    "title": "schema.IItemTypeEditor.setDisplayName() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IItemTypeEditor > setDisplayName schema.IItemTypeEditor.setDisplayName() method Sets the display name of the item type. Signature: setDisplayName(displayName: string): this; Introduced: version 1.6 Parameters Parameter Type Description displayName string The display name to set. Returns: this This item type, with the new display name in place."
  },
  "api/notebook-sdk.schema.ilabelpart.html": {
    "href": "api/notebook-sdk.schema.ilabelpart.html",
    "title": "schema.ILabelPart type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ILabelPart schema.ILabelPart type A part of a label definition. Signature: type ILabelPart = ILiteralLabelPart | IChartPropertyLabelPart; References: ILiteralLabelPart <!-- --> , IChartPropertyLabelPart Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.iliterallabelpart.html": {
    "href": "api/notebook-sdk.schema.iliterallabelpart.html",
    "title": "schema.ILiteralLabelPart interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ILiteralLabelPart schema.ILiteralLabelPart interface A part of a label that consists of a literal string. Signature: interface ILiteralLabelPart Introduced: version 1.0 Properties Property Modifiers Type Description literal readonly string Gets the literal string value for the label part. type readonly 'literal' Gets the type of label part."
  },
  "api/notebook-sdk.schema.iliterallabelpart.literal.html": {
    "href": "api/notebook-sdk.schema.iliterallabelpart.literal.html",
    "title": "schema.ILiteralLabelPart.literal property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ILiteralLabelPart > literal schema.ILiteralLabelPart.literal property Gets the literal string value for the label part. Signature: readonly literal: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.iliterallabelpart.type.html": {
    "href": "api/notebook-sdk.schema.iliterallabelpart.type.html",
    "title": "schema.ILiteralLabelPart.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ILiteralLabelPart > type schema.ILiteralLabelPart.type property Gets the type of label part. Signature: readonly type: 'literal'; Returns: 'literal' Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.inotesschema.html": {
    "href": "api/notebook-sdk.schema.inotesschema.html",
    "title": "schema.INotesSchema interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > INotesSchema schema.INotesSchema interface A schema for notes, which places constraints on their use. Signature: interface INotesSchema Introduced: version 1.0 Properties Property Modifiers Type Description maximumNotes readonly number Gets the maximum number of notes that any single record can have. maxStringLength readonly data.ICharLimit Gets the maximum size of any single note."
  },
  "api/notebook-sdk.schema.inotesschema.maximumnotes.html": {
    "href": "api/notebook-sdk.schema.inotesschema.maximumnotes.html",
    "title": "schema.INotesSchema.maximumNotes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > INotesSchema > maximumNotes schema.INotesSchema.maximumNotes property Gets the maximum number of notes that any single record can have. Signature: readonly maximumNotes: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.inotesschema.maxstringlength.html": {
    "href": "api/notebook-sdk.schema.inotesschema.maxstringlength.html",
    "title": "schema.INotesSchema.maxStringLength property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > INotesSchema > maxStringLength schema.INotesSchema.maxStringLength property Gets the maximum size of any single note. Signature: readonly maxStringLength: data.ICharLimit; Returns: data.ICharLimit Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ipendingitemtype.html": {
    "href": "api/notebook-sdk.schema.ipendingitemtype.html",
    "title": "schema.IPendingItemType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPendingItemType schema.IPendingItemType interface An item type that has been created in a transaction handler, but has not yet been added to a chart's schema. Signature: interface IPendingItemType extends IItemTypeEditor Extends: IItemTypeEditor Introduced: version 1.6 Properties Property Modifiers Type Description isCustomItemType readonly true Indicates whether the item type is a custom type. (Inherited from IItemTypeEditor <!-- --> ) typeId readonly AnalyzeItemTypeId Gets the identifier of the item type. Methods Method Description addPropertyType(propertyTypeData, insertAfter) Creates a custom property type that is added to the chart schema on committal. (Inherited from IPropertyTypesEditor <!-- --> ) editPropertyType(propertyType) Gets an object with methods for editing a custom property type. (Inherited from IPropertyTypesEditor <!-- --> ) editPropertyType(typeId, logicalType) Gets an object with methods for editing a custom property type. (Inherited from IPropertyTypesEditor <!-- --> ) setDisplayName(displayName) Sets the display name of the item type. (Inherited from IItemTypeEditor <!-- --> )"
  },
  "api/notebook-sdk.schema.ipendingitemtype.typeid.html": {
    "href": "api/notebook-sdk.schema.ipendingitemtype.typeid.html",
    "title": "schema.IPendingItemType.typeId property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPendingItemType > typeId schema.IPendingItemType.typeId property Gets the identifier of the item type. Signature: readonly typeId: AnalyzeItemTypeId; Returns: AnalyzeItemTypeId Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ipendingpropertytype.html": {
    "href": "api/notebook-sdk.schema.ipendingpropertytype.html",
    "title": "schema.IPendingPropertyType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPendingPropertyType schema.IPendingPropertyType interface A custom property type that has been created in a transaction handler, but has not yet been added to a chart schema. Signature: interface IPendingPropertyType extends IPropertyTypeEditor Extends: IPropertyTypeEditor Introduced: version 1.6 Properties Property Modifiers Type Description isLabelPart? readonly boolean (Optional) Indicates whether the property type forms part of the item type's label definition. logicalType CustomLogicalType Gets or sets the logical type of the property type. typeId AnalyzePropertyTypeId Gets or sets the identifier of the property type. Methods Method Description moveAfter(propertyType) Moves the property type after the specified property type in the item type's list. (Inherited from IPropertyTypeEditor <!-- --> ) setDisplayName(displayName) Sets the display name of the property type. (Inherited from IPropertyTypeEditor <!-- --> ) setIsLabelPart(isLabelPart) Sets whether the property type forms part of the item type's label definition. (Inherited from IPropertyTypeEditor <!-- --> )"
  },
  "api/notebook-sdk.schema.ipendingpropertytype.islabelpart.html": {
    "href": "api/notebook-sdk.schema.ipendingpropertytype.islabelpart.html",
    "title": "schema.IPendingPropertyType.isLabelPart property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPendingPropertyType > isLabelPart schema.IPendingPropertyType.isLabelPart property Indicates whether the property type forms part of the item type's label definition. Signature: readonly isLabelPart?: boolean; Returns: boolean Introduced: version 1.6 Remarks This field is present only when the property type has a string-based logical type."
  },
  "api/notebook-sdk.schema.ipendingpropertytype.logicaltype.html": {
    "href": "api/notebook-sdk.schema.ipendingpropertytype.logicaltype.html",
    "title": "schema.IPendingPropertyType.logicalType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPendingPropertyType > logicalType schema.IPendingPropertyType.logicalType property Gets or sets the logical type of the property type. Signature: logicalType: CustomLogicalType; Returns: CustomLogicalType Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ipendingpropertytype.typeid.html": {
    "href": "api/notebook-sdk.schema.ipendingpropertytype.typeid.html",
    "title": "schema.IPendingPropertyType.typeId property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPendingPropertyType > typeId schema.IPendingPropertyType.typeId property Gets or sets the identifier of the property type. Signature: typeId: AnalyzePropertyTypeId; Returns: AnalyzePropertyTypeId Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ipossiblevalue.description.html": {
    "href": "api/notebook-sdk.schema.ipossiblevalue.description.html",
    "title": "schema.IPossibleValue.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPossibleValue > description schema.IPossibleValue.description property Gets a description of the possible value. Signature: readonly description?: string; Returns: string Introduced: version 1.0 Remarks The description can provide more information to the user about what the value indicates. For example, if the value is an acronym, the description might provide the expanded form."
  },
  "api/notebook-sdk.schema.ipossiblevalue.displayvalue.html": {
    "href": "api/notebook-sdk.schema.ipossiblevalue.displayvalue.html",
    "title": "schema.IPossibleValue.displayValue property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPossibleValue > displayValue schema.IPossibleValue.displayValue property Gets the possible value in a form that is suitable for display. Signature: readonly displayValue: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ipossiblevalue.html": {
    "href": "api/notebook-sdk.schema.ipossiblevalue.html",
    "title": "schema.IPossibleValue interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPossibleValue schema.IPossibleValue interface A possible value for a property whose property type has a string-based logical type. Signature: interface IPossibleValue Introduced: version 1.0 Properties Property Modifiers Type Description description? readonly string (Optional) Gets a description of the possible value. displayValue readonly string Gets the possible value in a form that is suitable for display. value readonly string Gets the possible value."
  },
  "api/notebook-sdk.schema.ipossiblevalue.value.html": {
    "href": "api/notebook-sdk.schema.ipossiblevalue.value.html",
    "title": "schema.IPossibleValue.value property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPossibleValue > value schema.IPossibleValue.value property Gets the possible value. Signature: readonly value: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.ipropertytypedata.displayname.html": {
    "href": "api/notebook-sdk.schema.ipropertytypedata.displayname.html",
    "title": "schema.IPropertyTypeData.displayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypeData > displayName schema.IPropertyTypeData.displayName property Gets the display name of the custom property type. Signature: readonly displayName: string; Returns: string Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ipropertytypedata.html": {
    "href": "api/notebook-sdk.schema.ipropertytypedata.html",
    "title": "schema.IPropertyTypeData interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypeData schema.IPropertyTypeData interface A set of data for creating a custom property type. Signature: interface IPropertyTypeData Introduced: version 1.6 Properties Property Modifiers Type Description displayName readonly string Gets the display name of the custom property type. isLabelPart? readonly boolean (Optional) Indicates whether the custom property type forms part of the item type's label definition. logicalType readonly CustomLogicalType Gets the logical type of the custom property type."
  },
  "api/notebook-sdk.schema.ipropertytypedata.islabelpart.html": {
    "href": "api/notebook-sdk.schema.ipropertytypedata.islabelpart.html",
    "title": "schema.IPropertyTypeData.isLabelPart property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypeData > isLabelPart schema.IPropertyTypeData.isLabelPart property Indicates whether the custom property type forms part of the item type's label definition. Signature: readonly isLabelPart?: boolean; Returns: boolean Introduced: version 1.6 Remarks This field is present only when the custom property type has a string-based logical type."
  },
  "api/notebook-sdk.schema.ipropertytypedata.logicaltype.html": {
    "href": "api/notebook-sdk.schema.ipropertytypedata.logicaltype.html",
    "title": "schema.IPropertyTypeData.logicalType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypeData > logicalType schema.IPropertyTypeData.logicalType property Gets the logical type of the custom property type. Signature: readonly logicalType: CustomLogicalType; Returns: CustomLogicalType Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ipropertytypeeditor.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeeditor.html",
    "title": "schema.IPropertyTypeEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypeEditor schema.IPropertyTypeEditor interface A set of methods for modifying a custom property type. Signature: interface IPropertyTypeEditor Introduced: version 1.6 Methods Method Description moveAfter(propertyType) Moves the property type after the specified property type in the item type's list. setDisplayName(displayName) Sets the display name of the property type. setIsLabelPart(isLabelPart) Sets whether the property type forms part of the item type's label definition."
  },
  "api/notebook-sdk.schema.ipropertytypeeditor.moveafter.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeeditor.moveafter.html",
    "title": "schema.IPropertyTypeEditor.moveAfter() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypeEditor > moveAfter schema.IPropertyTypeEditor.moveAfter() method Moves the property type after the specified property type in the item type's list. Signature: moveAfter(propertyType: IChartPropertyType | IPendingPropertyType | null): this; Introduced: version 1.6 Parameters Parameter Type Description propertyType IChartPropertyType | IPendingPropertyType | null The property type to move the property type after, or null to move it to the beginning of the list. Returns: this This property type, in its new position."
  },
  "api/notebook-sdk.schema.ipropertytypeeditor.setdisplayname.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeeditor.setdisplayname.html",
    "title": "schema.IPropertyTypeEditor.setDisplayName() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypeEditor > setDisplayName schema.IPropertyTypeEditor.setDisplayName() method Sets the display name of the property type. Signature: setDisplayName(displayName: string): this; Introduced: version 1.6 Parameters Parameter Type Description displayName string The display name to set. Returns: this This property type, with the new display name in place."
  },
  "api/notebook-sdk.schema.ipropertytypeeditor.setislabelpart.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeeditor.setislabelpart.html",
    "title": "schema.IPropertyTypeEditor.setIsLabelPart() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypeEditor > setIsLabelPart schema.IPropertyTypeEditor.setIsLabelPart() method Sets whether the property type forms part of the item type's label definition. Signature: setIsLabelPart(isLabelPart: boolean): this; Introduced: version 1.6 Parameters Parameter Type Description isLabelPart boolean true if the property type is part of the label definition; false otherwise. Returns: this This property type, with its new setting."
  },
  "api/notebook-sdk.schema.ipropertytypeseditor.addpropertytype.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeseditor.addpropertytype.html",
    "title": "schema.IPropertyTypesEditor.addPropertyType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypesEditor > addPropertyType schema.IPropertyTypesEditor.addPropertyType() method Creates a custom property type that is added to the chart schema on committal. Signature: addPropertyType(propertyTypeData: IPropertyTypeData, insertAfter?: IChartPropertyType | IPendingPropertyType | null): IPendingPropertyType; Introduced: version 1.6 Parameters Parameter Type Description propertyTypeData IPropertyTypeData The data for creating the custom property type. insertAfter IChartPropertyType | IPendingPropertyType | null (Optional) The existing property type to insert the new property type after. If this is not provided, the new property type is added at the end of the list. If this is null, the new property type is added at the beginning of the list. Returns: IPendingPropertyType The new, pending property type."
  },
  "api/notebook-sdk.schema.ipropertytypeseditor.editpropertytype.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeseditor.editpropertytype.html",
    "title": "schema.IPropertyTypesEditor.editPropertyType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypesEditor > editPropertyType schema.IPropertyTypesEditor.editPropertyType() method Gets an object with methods for editing a custom property type. Signature: editPropertyType(propertyType: IChartPropertyType | IPendingPropertyType): IPropertyTypeEditor; Introduced: version 1.6 Parameters Parameter Type Description propertyType IChartPropertyType | IPendingPropertyType The custom property type to be edited. Returns: IPropertyTypeEditor The type-editing object."
  },
  "api/notebook-sdk.schema.ipropertytypeseditor.editpropertytype_1.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeseditor.editpropertytype_1.html",
    "title": "schema.IPropertyTypesEditor.editPropertyType() method",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypesEditor > editPropertyType schema.IPropertyTypesEditor.editPropertyType() method Gets an object with methods for editing a custom property type. Signature: editPropertyType(typeId: AnalyzePropertyTypeId, logicalType: CustomLogicalType): IPropertyTypeEditor; Introduced: version 1.6 Parameters Parameter Type Description typeId AnalyzePropertyTypeId The identifier of the property type to be edited. logicalType CustomLogicalType The logical type of the property type to be edited. Returns: IPropertyTypeEditor The type-editing object."
  },
  "api/notebook-sdk.schema.ipropertytypeseditor.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeseditor.html",
    "title": "schema.IPropertyTypesEditor interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypesEditor schema.IPropertyTypesEditor interface A set of methods for adding and modifying custom property types on schema and custom item types. Signature: interface IPropertyTypesEditor Introduced: version 1.6 Properties Property Modifiers Type Description isCustomItemType readonly boolean Indicates whether the item type is a custom type. Methods Method Description addPropertyType(propertyTypeData, insertAfter) Creates a custom property type that is added to the chart schema on committal. editPropertyType(propertyType) Gets an object with methods for editing a custom property type. editPropertyType(typeId, logicalType) Gets an object with methods for editing a custom property type."
  },
  "api/notebook-sdk.schema.ipropertytypeseditor.iscustomitemtype.html": {
    "href": "api/notebook-sdk.schema.ipropertytypeseditor.iscustomitemtype.html",
    "title": "schema.IPropertyTypesEditor.isCustomItemType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IPropertyTypesEditor > isCustomItemType schema.IPropertyTypesEditor.isCustomItemType property Indicates whether the item type is a custom type. Signature: readonly isCustomItemType: boolean; Returns: boolean Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.ischemainfo.html": {
    "href": "api/notebook-sdk.schema.ischemainfo.html",
    "title": "schema.ISchemaInfo interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISchemaInfo schema.ISchemaInfo interface Information about a schema in an i2 Analyze deployment. Signature: interface ISchemaInfo Introduced: version 1.5 Properties Property Modifiers Type Description id? readonly string (Optional) Gets the identifier of the schema. name? readonly string (Optional) Gets the name of the schema. type readonly SchemaType Gets the type of the schema."
  },
  "api/notebook-sdk.schema.ischemainfo.id.html": {
    "href": "api/notebook-sdk.schema.ischemainfo.id.html",
    "title": "schema.ISchemaInfo.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISchemaInfo > id schema.ISchemaInfo.id property Gets the identifier of the schema. Signature: readonly id?: string; Returns: string Introduced: version 1.5"
  },
  "api/notebook-sdk.schema.ischemainfo.name.html": {
    "href": "api/notebook-sdk.schema.ischemainfo.name.html",
    "title": "schema.ISchemaInfo.name property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISchemaInfo > name schema.ISchemaInfo.name property Gets the name of the schema. Signature: readonly name?: string; Returns: string Introduced: version 1.5"
  },
  "api/notebook-sdk.schema.ischemainfo.type.html": {
    "href": "api/notebook-sdk.schema.ischemainfo.type.html",
    "title": "schema.ISchemaInfo.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISchemaInfo > type schema.ISchemaInfo.type property Gets the type of the schema. Signature: readonly type: SchemaType; Returns: SchemaType Introduced: version 1.5"
  },
  "api/notebook-sdk.schema.isecuritydimension.description.html": {
    "href": "api/notebook-sdk.schema.isecuritydimension.description.html",
    "title": "schema.ISecurityDimension.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimension > description schema.ISecurityDimension.description property Gets the description of the security dimension. Signature: readonly description: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isecuritydimension.displayname.html": {
    "href": "api/notebook-sdk.schema.isecuritydimension.displayname.html",
    "title": "schema.ISecurityDimension.displayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimension > displayName schema.ISecurityDimension.displayName property Gets the displayable name of the security dimension. Signature: readonly displayName: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isecuritydimension.html": {
    "href": "api/notebook-sdk.schema.isecuritydimension.html",
    "title": "schema.ISecurityDimension interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimension schema.ISecurityDimension interface A security dimension. Signature: interface ISecurityDimension Introduced: version 1.0 Properties Property Modifiers Type Description description readonly string Gets the description of the security dimension. displayName readonly string Gets the displayable name of the security dimension. id readonly SecurityDimensionId Gets the unique identifier of the security dimension. possibleValues readonly data.IReadOnlyCollection <!-- --> < ISecurityDimensionValue <!-- --> > Gets the possible values of the security dimension. type readonly 'ordered' | 'unordered' Gets whether the security dimension is ordered or unordered."
  },
  "api/notebook-sdk.schema.isecuritydimension.id.html": {
    "href": "api/notebook-sdk.schema.isecuritydimension.id.html",
    "title": "schema.ISecurityDimension.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimension > id schema.ISecurityDimension.id property Gets the unique identifier of the security dimension. Signature: readonly id: SecurityDimensionId; Returns: SecurityDimensionId Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isecuritydimension.possiblevalues.html": {
    "href": "api/notebook-sdk.schema.isecuritydimension.possiblevalues.html",
    "title": "schema.ISecurityDimension.possibleValues property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimension > possibleValues schema.ISecurityDimension.possibleValues property Gets the possible values of the security dimension. Signature: readonly possibleValues: data.IReadOnlyCollection<ISecurityDimensionValue>; Returns: data.IReadOnlyCollection < ISecurityDimensionValue > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isecuritydimension.type.html": {
    "href": "api/notebook-sdk.schema.isecuritydimension.type.html",
    "title": "schema.ISecurityDimension.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimension > type schema.ISecurityDimension.type property Gets whether the security dimension is ordered or unordered. Signature: readonly type: 'ordered' | 'unordered'; Returns: 'ordered' | 'unordered' Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isecuritydimensionvalue.description.html": {
    "href": "api/notebook-sdk.schema.isecuritydimensionvalue.description.html",
    "title": "schema.ISecurityDimensionValue.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimensionValue > description schema.ISecurityDimensionValue.description property Gets the description of the security dimension value. Signature: readonly description: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isecuritydimensionvalue.displayname.html": {
    "href": "api/notebook-sdk.schema.isecuritydimensionvalue.displayname.html",
    "title": "schema.ISecurityDimensionValue.displayName property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimensionValue > displayName schema.ISecurityDimensionValue.displayName property Gets the display name of the security dimension value. Signature: readonly displayName: string; Returns: string Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isecuritydimensionvalue.html": {
    "href": "api/notebook-sdk.schema.isecuritydimensionvalue.html",
    "title": "schema.ISecurityDimensionValue interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimensionValue schema.ISecurityDimensionValue interface A security dimension value. Signature: interface ISecurityDimensionValue Introduced: version 1.0 Properties Property Modifiers Type Description description readonly string Gets the description of the security dimension value. displayName readonly string Gets the display name of the security dimension value. id readonly SecurityDimensionValueId Gets the identifier of the security dimension value. suspended? readonly boolean (Optional) Indicates that the dimension value is suspended."
  },
  "api/notebook-sdk.schema.isecuritydimensionvalue.id.html": {
    "href": "api/notebook-sdk.schema.isecuritydimensionvalue.id.html",
    "title": "schema.ISecurityDimensionValue.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimensionValue > id schema.ISecurityDimensionValue.id property Gets the identifier of the security dimension value. Signature: readonly id: SecurityDimensionValueId; Returns: SecurityDimensionValueId Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isecuritydimensionvalue.suspended.html": {
    "href": "api/notebook-sdk.schema.isecuritydimensionvalue.suspended.html",
    "title": "schema.ISecurityDimensionValue.suspended property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecurityDimensionValue > suspended schema.ISecurityDimensionValue.suspended property Indicates that the dimension value is suspended. Signature: readonly suspended?: boolean; Returns: boolean Introduced: version 1.7 Remarks This property is true if the security dimension value is suspended; false otherwise. Values become suspended when they are deleted from a published schema. They exist so that records with the deleted values can be rendered correctly. They don't affect security calculations, and cannot be added to new records."
  },
  "api/notebook-sdk.schema.isecurityschema.defaultsecurity.html": {
    "href": "api/notebook-sdk.schema.isecurityschema.defaultsecurity.html",
    "title": "schema.ISecuritySchema.defaultSecurity property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecuritySchema > defaultSecurity schema.ISecuritySchema.defaultSecurity property Gets the security dimension values to apply to new records by default. Signature: readonly defaultSecurity: data.IKeyedReadOnlyCollection<SecurityDimensionId, records.ISecuritySetting>; Returns: data.IKeyedReadOnlyCollection < SecurityDimensionId , records.ISecuritySetting > Introduced: version 1.1"
  },
  "api/notebook-sdk.schema.isecurityschema.html": {
    "href": "api/notebook-sdk.schema.isecurityschema.html",
    "title": "schema.ISecuritySchema interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecuritySchema schema.ISecuritySchema interface A security schema, which defines the available security dimensions and their dimension values. Signature: interface ISecuritySchema Introduced: version 1.0 Properties Property Modifiers Type Description defaultSecurity readonly data.IKeyedReadOnlyCollection <!-- --> < SecurityDimensionId <!-- --> , records.ISecuritySetting <!-- --> > Gets the security dimension values to apply to new records by default. securityDimensions readonly data.IKeyedReadOnlyCollection <!-- --> < SecurityDimensionId <!-- --> , ISecurityDimension <!-- --> > Gets all the security dimensions."
  },
  "api/notebook-sdk.schema.isecurityschema.securitydimensions.html": {
    "href": "api/notebook-sdk.schema.isecurityschema.securitydimensions.html",
    "title": "schema.ISecuritySchema.securityDimensions property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISecuritySchema > securityDimensions schema.ISecuritySchema.securityDimensions property Gets all the security dimensions. Signature: readonly securityDimensions: data.IKeyedReadOnlyCollection<SecurityDimensionId, ISecurityDimension>; Returns: data.IKeyedReadOnlyCollection < SecurityDimensionId , ISecurityDimension > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourceidentifiersschema.html": {
    "href": "api/notebook-sdk.schema.isourceidentifiersschema.html",
    "title": "schema.ISourceIdentifiersSchema interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceIdentifiersSchema schema.ISourceIdentifiersSchema interface A schema for source identifiers, which places constraints on their use. Signature: interface ISourceIdentifiersSchema Introduced: version 1.0 Properties Property Modifiers Type Description maximumSourceIdentifiers readonly number Gets the maximum number of source identifiers that a single record can have. maxKeyStringLength readonly data.ICharLimit Gets the maximum number of characters for a source identifier key. maxTypeStringLength readonly data.ICharLimit Gets the maximum number of characters for a source identifier type. reservedTypes readonly data.IReadOnlyCollection <!-- --> <string> Gets the source identifier types that are reserved for system use."
  },
  "api/notebook-sdk.schema.isourceidentifiersschema.maximumsourceidentifiers.html": {
    "href": "api/notebook-sdk.schema.isourceidentifiersschema.maximumsourceidentifiers.html",
    "title": "schema.ISourceIdentifiersSchema.maximumSourceIdentifiers property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceIdentifiersSchema > maximumSourceIdentifiers schema.ISourceIdentifiersSchema.maximumSourceIdentifiers property Gets the maximum number of source identifiers that a single record can have. Signature: readonly maximumSourceIdentifiers: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourceidentifiersschema.maxkeystringlength.html": {
    "href": "api/notebook-sdk.schema.isourceidentifiersschema.maxkeystringlength.html",
    "title": "schema.ISourceIdentifiersSchema.maxKeyStringLength property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceIdentifiersSchema > maxKeyStringLength schema.ISourceIdentifiersSchema.maxKeyStringLength property Gets the maximum number of characters for a source identifier key. Signature: readonly maxKeyStringLength: data.ICharLimit; Returns: data.ICharLimit Introduced: version 1.1"
  },
  "api/notebook-sdk.schema.isourceidentifiersschema.maxtypestringlength.html": {
    "href": "api/notebook-sdk.schema.isourceidentifiersschema.maxtypestringlength.html",
    "title": "schema.ISourceIdentifiersSchema.maxTypeStringLength property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceIdentifiersSchema > maxTypeStringLength schema.ISourceIdentifiersSchema.maxTypeStringLength property Gets the maximum number of characters for a source identifier type. Signature: readonly maxTypeStringLength: data.ICharLimit; Returns: data.ICharLimit Introduced: version 1.1"
  },
  "api/notebook-sdk.schema.isourceidentifiersschema.reservedtypes.html": {
    "href": "api/notebook-sdk.schema.isourceidentifiersschema.reservedtypes.html",
    "title": "schema.ISourceIdentifiersSchema.reservedTypes property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceIdentifiersSchema > reservedTypes schema.ISourceIdentifiersSchema.reservedTypes property Gets the source identifier types that are reserved for system use. Signature: readonly reservedTypes: data.IReadOnlyCollection<string>; Returns: data.IReadOnlyCollection <string> Introduced: version 1.1"
  },
  "api/notebook-sdk.schema.isourcereferenceschema.description.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceschema.description.html",
    "title": "schema.ISourceReferenceSchema.description property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSchema > description schema.ISourceReferenceSchema.description property Gets constraints on the description field of source references. Signature: readonly description: IStringLimitedValueType; Returns: IStringLimitedValueType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferenceschema.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceschema.html",
    "title": "schema.ISourceReferenceSchema interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSchema schema.ISourceReferenceSchema interface A schema for source references, which places constraints on their use. Signature: interface ISourceReferenceSchema Introduced: version 1.0 Properties Property Modifiers Type Description description readonly IStringLimitedValueType Gets constraints on the description field of source references. imageUrl readonly IStringLimitedValueType Gets constraints on the imageUrl field of source references. location readonly IStringLimitedValueType Gets constraints on the location field of source references. maximumSourceReferences readonly number Gets the maximum number of source references that any single record can have. name readonly ISourceReferenceValueType Gets constraints on the name field of source references. type readonly ISourceReferenceValueType Gets constraints on the type field of source references."
  },
  "api/notebook-sdk.schema.isourcereferenceschema.imageurl.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceschema.imageurl.html",
    "title": "schema.ISourceReferenceSchema.imageUrl property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSchema > imageUrl schema.ISourceReferenceSchema.imageUrl property Gets constraints on the imageUrl field of source references. Signature: readonly imageUrl: IStringLimitedValueType; Returns: IStringLimitedValueType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferenceschema.location.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceschema.location.html",
    "title": "schema.ISourceReferenceSchema.location property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSchema > location schema.ISourceReferenceSchema.location property Gets constraints on the location field of source references. Signature: readonly location: IStringLimitedValueType; Returns: IStringLimitedValueType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferenceschema.maximumsourcereferences.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceschema.maximumsourcereferences.html",
    "title": "schema.ISourceReferenceSchema.maximumSourceReferences property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSchema > maximumSourceReferences schema.ISourceReferenceSchema.maximumSourceReferences property Gets the maximum number of source references that any single record can have. Signature: readonly maximumSourceReferences: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferenceschema.name.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceschema.name.html",
    "title": "schema.ISourceReferenceSchema.name property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSchema > name schema.ISourceReferenceSchema.name property Gets constraints on the name field of source references. Signature: readonly name: ISourceReferenceValueType; Returns: ISourceReferenceValueType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferenceschema.type.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceschema.type.html",
    "title": "schema.ISourceReferenceSchema.type property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSchema > type schema.ISourceReferenceSchema.type property Gets constraints on the type field of source references. Signature: readonly type: ISourceReferenceValueType; Returns: ISourceReferenceValueType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferenceselectedfromvaluetype.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceselectedfromvaluetype.html",
    "title": "schema.ISourceReferenceSelectedFromValueType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSelectedFromValueType schema.ISourceReferenceSelectedFromValueType interface A type that represents the constraints on a selected-from string value in a source reference. Signature: interface ISourceReferenceSelectedFromValueType Introduced: version 1.0 Properties Property Modifiers Type Description isMandatory? readonly boolean (Optional) Indicates whether the value is mandatory. logicalType readonly 'selectedFromList' Gets the logical type of the string value, indicating that it is a selected-from string. possibleValues readonly data.IReadOnlyCollection <!-- --> < IPossibleValue <!-- --> > Gets the possible values for the string. No other values are allowed."
  },
  "api/notebook-sdk.schema.isourcereferenceselectedfromvaluetype.ismandatory.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceselectedfromvaluetype.ismandatory.html",
    "title": "schema.ISourceReferenceSelectedFromValueType.isMandatory property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSelectedFromValueType > isMandatory schema.ISourceReferenceSelectedFromValueType.isMandatory property Indicates whether the value is mandatory. Signature: readonly isMandatory?: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferenceselectedfromvaluetype.logicaltype.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceselectedfromvaluetype.logicaltype.html",
    "title": "schema.ISourceReferenceSelectedFromValueType.logicalType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSelectedFromValueType > logicalType schema.ISourceReferenceSelectedFromValueType.logicalType property Gets the logical type of the string value, indicating that it is a selected-from string. Signature: readonly logicalType: 'selectedFromList'; Returns: 'selectedFromList' Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferenceselectedfromvaluetype.possiblevalues.html": {
    "href": "api/notebook-sdk.schema.isourcereferenceselectedfromvaluetype.possiblevalues.html",
    "title": "schema.ISourceReferenceSelectedFromValueType.possibleValues property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSelectedFromValueType > possibleValues schema.ISourceReferenceSelectedFromValueType.possibleValues property Gets the possible values for the string. No other values are allowed. Signature: readonly possibleValues: data.IReadOnlyCollection<IPossibleValue>; Returns: data.IReadOnlyCollection < IPossibleValue > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferencestringvaluetype.html": {
    "href": "api/notebook-sdk.schema.isourcereferencestringvaluetype.html",
    "title": "schema.ISourceReferenceStringValueType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceStringValueType schema.ISourceReferenceStringValueType interface A type that represents the constraints on a single-line string value in a source reference. Signature: interface ISourceReferenceStringValueType extends IStringLimitedValueType Extends: IStringLimitedValueType Introduced: version 1.0 Properties Property Modifiers Type Description isMandatory? readonly boolean (Optional) Indicates whether the value is mandatory. (Inherited from IStringLimitedValueType <!-- --> ) logicalType readonly 'singleLineString' Gets the logical type of the string value, indicating that it is a single-line string. maxStringLength readonly data.ICharLimit Gets the maximum number of characters that the string can contain. (Inherited from IStringLimitedValueType <!-- --> )"
  },
  "api/notebook-sdk.schema.isourcereferencestringvaluetype.logicaltype.html": {
    "href": "api/notebook-sdk.schema.isourcereferencestringvaluetype.logicaltype.html",
    "title": "schema.ISourceReferenceStringValueType.logicalType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceStringValueType > logicalType schema.ISourceReferenceStringValueType.logicalType property Gets the logical type of the string value, indicating that it is a single-line string. Signature: readonly logicalType: 'singleLineString'; Returns: 'singleLineString' Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferencesuggestedfromvaluetype.html": {
    "href": "api/notebook-sdk.schema.isourcereferencesuggestedfromvaluetype.html",
    "title": "schema.ISourceReferenceSuggestedFromValueType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSuggestedFromValueType schema.ISourceReferenceSuggestedFromValueType interface A type that represents the constraints on a suggested-from string value in a source reference. Signature: interface ISourceReferenceSuggestedFromValueType extends IStringLimitedValueType Extends: IStringLimitedValueType Introduced: version 1.0 Properties Property Modifiers Type Description isMandatory? readonly boolean (Optional) Indicates whether the value is mandatory. (Inherited from IStringLimitedValueType <!-- --> ) logicalType readonly 'suggestedFromList' Gets the logical type of the string value, indicating that it is a suggested-from string. maxStringLength readonly data.ICharLimit Gets the maximum number of characters that the string can contain. (Inherited from IStringLimitedValueType <!-- --> ) possibleValues readonly data.IReadOnlyCollection <!-- --> < IPossibleValue <!-- --> > Gets the possible values for the string. Other values are allowed."
  },
  "api/notebook-sdk.schema.isourcereferencesuggestedfromvaluetype.logicaltype.html": {
    "href": "api/notebook-sdk.schema.isourcereferencesuggestedfromvaluetype.logicaltype.html",
    "title": "schema.ISourceReferenceSuggestedFromValueType.logicalType property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSuggestedFromValueType > logicalType schema.ISourceReferenceSuggestedFromValueType.logicalType property Gets the logical type of the string value, indicating that it is a suggested-from string. Signature: readonly logicalType: 'suggestedFromList'; Returns: 'suggestedFromList' Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferencesuggestedfromvaluetype.possiblevalues.html": {
    "href": "api/notebook-sdk.schema.isourcereferencesuggestedfromvaluetype.possiblevalues.html",
    "title": "schema.ISourceReferenceSuggestedFromValueType.possibleValues property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceSuggestedFromValueType > possibleValues schema.ISourceReferenceSuggestedFromValueType.possibleValues property Gets the possible values for the string. Other values are allowed. Signature: readonly possibleValues: data.IReadOnlyCollection<IPossibleValue>; Returns: data.IReadOnlyCollection < IPossibleValue > Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.isourcereferencevaluetype.html": {
    "href": "api/notebook-sdk.schema.isourcereferencevaluetype.html",
    "title": "schema.ISourceReferenceValueType type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ISourceReferenceValueType schema.ISourceReferenceValueType type A type for the value of a field in a source reference. Signature: type ISourceReferenceValueType = ISourceReferenceStringValueType | ISourceReferenceSelectedFromValueType | ISourceReferenceSuggestedFromValueType; References: ISourceReferenceStringValueType <!-- --> , ISourceReferenceSelectedFromValueType <!-- --> , ISourceReferenceSuggestedFromValueType Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.istringlimitedvaluetype.html": {
    "href": "api/notebook-sdk.schema.istringlimitedvaluetype.html",
    "title": "schema.IStringLimitedValueType interface",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IStringLimitedValueType schema.IStringLimitedValueType interface A type that represents the constraints on a string value in a source reference. Signature: interface IStringLimitedValueType Introduced: version 1.0 Properties Property Modifiers Type Description isMandatory? readonly boolean (Optional) Indicates whether the value is mandatory. maxStringLength readonly data.ICharLimit Gets the maximum number of characters that the string can contain."
  },
  "api/notebook-sdk.schema.istringlimitedvaluetype.ismandatory.html": {
    "href": "api/notebook-sdk.schema.istringlimitedvaluetype.ismandatory.html",
    "title": "schema.IStringLimitedValueType.isMandatory property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IStringLimitedValueType > isMandatory schema.IStringLimitedValueType.isMandatory property Indicates whether the value is mandatory. Signature: readonly isMandatory?: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.istringlimitedvaluetype.maxstringlength.html": {
    "href": "api/notebook-sdk.schema.istringlimitedvaluetype.maxstringlength.html",
    "title": "schema.IStringLimitedValueType.maxStringLength property",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > IStringLimitedValueType > maxStringLength schema.IStringLimitedValueType.maxStringLength property Gets the maximum number of characters that the string can contain. Signature: readonly maxStringLength: data.ICharLimit; Returns: data.ICharLimit Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.itemtypespecifier.html": {
    "href": "api/notebook-sdk.schema.itemtypespecifier.html",
    "title": "schema.ItemTypeSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > ItemTypeSpecifier schema.ItemTypeSpecifier type A common specifier for an item type. Signature: type ItemTypeSpecifier = AnalyzeItemTypeId | IChartItemType | IPendingItemType; References: AnalyzeItemTypeId <!-- --> , IChartItemType <!-- --> , IPendingItemType Introduced: version 1.6"
  },
  "api/notebook-sdk.schema.propertytypespecifier.html": {
    "href": "api/notebook-sdk.schema.propertytypespecifier.html",
    "title": "schema.PropertyTypeSpecifier type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > PropertyTypeSpecifier schema.PropertyTypeSpecifier type A common specifier for a chart property type. Signature: type PropertyTypeSpecifier = ChartPropertyTypeId | IChartPropertyType; References: ChartPropertyTypeId <!-- --> , IChartPropertyType Introduced: version 1.1"
  },
  "api/notebook-sdk.schema.schematype.html": {
    "href": "api/notebook-sdk.schema.schematype.html",
    "title": "schema.SchemaType type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > SchemaType schema.SchemaType type The type of a schema. Signature: type SchemaType = 'infostore' | 'gateway' | 'connector' | 'unknown' | 'custom'; Introduced: version 1.5 Remarks The possible values are: infostore - The Information Store schema. gateway - A gateway schema. connector - A connector schema. unknown - An unknown schema, which can denote an orphaned item type. custom - A schema that contains user-created types."
  },
  "api/notebook-sdk.schema.securitydimensionid.html": {
    "href": "api/notebook-sdk.schema.securitydimensionid.html",
    "title": "schema.SecurityDimensionId type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > SecurityDimensionId schema.SecurityDimensionId type An identifier of a security dimension. Signature: type SecurityDimensionId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.schema.securitydimensionvalueid.html": {
    "href": "api/notebook-sdk.schema.securitydimensionvalueid.html",
    "title": "schema.SecurityDimensionValueId type",
    "keywords": "Home > @i2analyze/notebook-sdk > schema > SecurityDimensionValueId schema.SecurityDimensionValueId type The identifier of a security dimension value. Signature: type SecurityDimensionValueId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.html": {
    "href": "api/notebook-sdk.toolview.html",
    "title": "toolview namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview toolview namespace The members of the toolview namespace enable you to integrate the tool views that you write for your plug-ins with the i2 Notebook application. Signature: export declare namespace toolview Introduced: version 1.0 Interfaces Interface Description IToolView A tool view, as returned by IEntryPointApi.createToolView() <!-- --> . IToolViewApi A collection of methods and properties that allow plug-in tool views to interact with i2 Notebook. IToolViewConfig A set of information for creating a tool view. IVolatileStore The volatile store that i2 Notebook makes available to tool views. ToolViewApiEventMap A combined mapping of tool view and other event types to their listener types. ToolViewApiEventOptionsMap A combined mapping of tool view and other event types to their listener options types. ToolViewEventMap A mapping of tool view event types to their listener types. ToolViewEventOptionsMap A mapping of tool view event types to their listener options types. Type Aliases Type Alias Description SerializableValue A serializable value that a tool view puts into the volatile store. ToolViewMinimizedListener A callback function that handles tool view minimized events. ToolViewPosition The position of the tool view, relative to an edge of the chart. ToolViewSize The size of the tool view. ToolViewStateListener A callback function that handles tool view state change events. ToolViewUnloadListener A callback function that handles tool view unload events. VolatileStoreChangeListener A callback function that handles change events in the volatile store."
  },
  "api/notebook-sdk.toolview.itoolview.addeventlistener.html": {
    "href": "api/notebook-sdk.toolview.itoolview.addeventlistener.html",
    "title": "toolview.IToolView.addEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolView > addEventListener toolview.IToolView.addEventListener() method Adds an event listener for tool view changes. Signature: addEventListener<K extends keyof ToolViewEventMap>(type: K, listener: ToolViewEventMap[K], options?: ToolViewEventOptionsMap[K]): () => void; Introduced: version 1.0 Type Parameters Parameter Type Description K extends keyof ToolViewEventMap The type of event to subscribe to. Parameters Parameter Type Description type K The type of event to subscribe to. listener ToolViewEventMap <!-- --> [K] A function to handle the event. options ToolViewEventOptionsMap <!-- --> [K] (Optional) An object that controls the behavior of the listener. Returns: () => void A function that can be called to remove the listener."
  },
  "api/notebook-sdk.toolview.itoolview.close.html": {
    "href": "api/notebook-sdk.toolview.itoolview.close.html",
    "title": "toolview.IToolView.close() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolView > close toolview.IToolView.close() method Closes and unloads the tool view window. Signature: close(): void; Returns: void Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.itoolview.html": {
    "href": "api/notebook-sdk.toolview.itoolview.html",
    "title": "toolview.IToolView interface",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolView toolview.IToolView interface A tool view, as returned by IEntryPointApi.createToolView() <!-- --> . Signature: interface IToolView Introduced: version 1.0 Properties Property Modifiers Type Description isMinimized readonly boolean Indicates whether the tool view is open and docked but not visible in the user interface. isOpen readonly boolean Indicates whether the tool view is open in the user interface. volatileStore readonly IVolatileStore Gets the volatile store for the tool view. Methods Method Description addEventListener(type, listener, options) Adds an event listener for tool view changes. close() Closes and unloads the tool view window. open(openState) Opens the tool view in either a docked pane or an undocked window. removeEventListener(type, listener) Removes an event listener for tool view changes."
  },
  "api/notebook-sdk.toolview.itoolview.isminimized.html": {
    "href": "api/notebook-sdk.toolview.itoolview.isminimized.html",
    "title": "toolview.IToolView.isMinimized property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolView > isMinimized toolview.IToolView.isMinimized property Indicates whether the tool view is open and docked but not visible in the user interface. Signature: readonly isMinimized: boolean; Returns: boolean Introduced: version 1.2"
  },
  "api/notebook-sdk.toolview.itoolview.isopen.html": {
    "href": "api/notebook-sdk.toolview.itoolview.isopen.html",
    "title": "toolview.IToolView.isOpen property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolView > isOpen toolview.IToolView.isOpen property Indicates whether the tool view is open in the user interface. Signature: readonly isOpen: boolean; Returns: boolean Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.itoolview.open.html": {
    "href": "api/notebook-sdk.toolview.itoolview.open.html",
    "title": "toolview.IToolView.open() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolView > open toolview.IToolView.open() method Opens the tool view in either a docked pane or an undocked window. Signature: open(openState?: 'docked' | 'undocked'): void; Introduced: version 1.0 Parameters Parameter Type Description openState 'docked' | 'undocked' (Optional) The initial state of the open tool view, which defaults to 'docked' . Returns: void"
  },
  "api/notebook-sdk.toolview.itoolview.removeeventlistener.html": {
    "href": "api/notebook-sdk.toolview.itoolview.removeeventlistener.html",
    "title": "toolview.IToolView.removeEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolView > removeEventListener toolview.IToolView.removeEventListener() method Removes an event listener for tool view changes. Signature: removeEventListener<K extends keyof ToolViewEventMap>(type: K, listener: ToolViewEventMap[K]): void; Introduced: version 1.0 Type Parameters Parameter Type Description K extends keyof ToolViewEventMap The type of event to unsubscribe from. Parameters Parameter Type Description type K The type of event to unsubscribe from. listener ToolViewEventMap <!-- --> [K] A function that was previously added as a listener. Returns: void"
  },
  "api/notebook-sdk.toolview.itoolview.volatilestore.html": {
    "href": "api/notebook-sdk.toolview.itoolview.volatilestore.html",
    "title": "toolview.IToolView.volatileStore property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolView > volatileStore toolview.IToolView.volatileStore property Gets the volatile store for the tool view. Signature: readonly volatileStore: IVolatileStore; Returns: IVolatileStore Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.itoolviewapi.addeventlistener.html": {
    "href": "api/notebook-sdk.toolview.itoolviewapi.addeventlistener.html",
    "title": "toolview.IToolViewApi.addEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewApi > addEventListener toolview.IToolViewApi.addEventListener() method Adds a listener for events that might affect the tool view. Signature: addEventListener<K extends keyof ToolViewApiEventMap>(type: K, listener: ToolViewApiEventMap[K], options?: ToolViewApiEventOptionsMap[K]): () => void; Introduced: version 1.0 Type Parameters Parameter Type Description K extends keyof ToolViewApiEventMap The type of event to subscribe to. Parameters Parameter Type Description type K The type of event to subscribe to. listener ToolViewApiEventMap <!-- --> [K] A function to handle the event. options ToolViewApiEventOptionsMap <!-- --> [K] (Optional) An object that controls the behavior of the listener. Returns: () => void A function that can be called to remove the listener."
  },
  "api/notebook-sdk.toolview.itoolviewapi.formatter.html": {
    "href": "api/notebook-sdk.toolview.itoolviewapi.formatter.html",
    "title": "toolview.IToolViewApi.formatter property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewApi > formatter toolview.IToolViewApi.formatter property Gets an object that can be used to perform locale-sensitive string-formatting operations. Signature: readonly formatter: data.IFormatter; Returns: data.IFormatter Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.itoolviewapi.html": {
    "href": "api/notebook-sdk.toolview.itoolviewapi.html",
    "title": "toolview.IToolViewApi interface",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewApi toolview.IToolViewApi interface A collection of methods and properties that allow plug-in tool views to interact with i2 Notebook. Signature: interface IToolViewApi extends IToolView, app.IApplication Extends: IToolView <!-- --> , app.IApplication Introduced: version 1.0 Properties Property Modifiers Type Description allTimeZones readonly data.IKeyedReadOnlyCollection <!-- --> < data.TimeZoneId <!-- --> , data.ITimeZone <!-- --> > Gets a list of all the valid time zones, in the same order as they appear in the application. (Inherited from IApplication <!-- --> ) formatter readonly data.IFormatter Gets an object that can be used to perform locale-sensitive string-formatting operations. isMinimized readonly boolean Indicates whether the tool view is open and docked but not visible in the user interface. (Inherited from IToolView <!-- --> ) isOpen readonly boolean Indicates whether the tool view is open in the user interface. (Inherited from IToolView <!-- --> ) locale readonly ILocale Gets the locale in which the application is operating. (Inherited from IApplication <!-- --> ) logger readonly ILogger Gets an object that can be used to perform plug-in logging operations. metadataTimeZone readonly data.ITimeZone Gets the time zone that the application assumes date and time values in metadata to have. (Inherited from IApplication <!-- --> ) serverComponents readonly IServerComponents Gets information about the i2 Analyze components that are deployed on the application server. (Inherited from IApplication <!-- --> ) systemActions readonly dialog.ISystemDialogActions Gets the identifiers of the system dialog actions. (Inherited from IApplication <!-- --> ) theme readonly ITheme Gets the current theme of the application. (Inherited from IApplication <!-- --> ) user readonly IUserAndPermissions Gets the logged-in user of the application. (Inherited from IApplication <!-- --> ) volatileStore readonly IVolatileStore Gets the volatile store for the tool view. (Inherited from IToolView <!-- --> ) Methods Method Description addEventListener(type, listener, options) Adds a listener for events that might affect the tool view. close() Closes and unloads the tool view window. (Inherited from IToolView <!-- --> ) open(openState) Opens the tool view in either a docked pane or an undocked window. (Inherited from IToolView <!-- --> ) removeEventListener(type, listener) Removes a listener for events that might affect the tool view. runTrackedMutations(mutationHandler, responseHandler, options) Queues a function that performs tracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. (Inherited from IApplication <!-- --> ) runTrackedMutations(mutationHandler, options) Queues a function that performs tracked mutations on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) runTransaction(handler, options) Queues a function that performs read-only work on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) runUntrackedMutations(mutationHandler, responseHandler, options) Queues a function that performs untracked mutations on the application contents at the next available opportunity, and can respond to the changes that the mutations cause. (Inherited from IApplication <!-- --> ) runUntrackedMutations(mutationHandler, options) Queues a function that performs untracked mutations on the application contents at the next available opportunity. (Inherited from IApplication <!-- --> ) showDialog(config) Creates and displays a modal dialog with the specified configuration."
  },
  "api/notebook-sdk.toolview.itoolviewapi.logger.html": {
    "href": "api/notebook-sdk.toolview.itoolviewapi.logger.html",
    "title": "toolview.IToolViewApi.logger property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewApi > logger toolview.IToolViewApi.logger property Gets an object that can be used to perform plug-in logging operations. Signature: readonly logger: ILogger; Returns: ILogger Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.itoolviewapi.removeeventlistener.html": {
    "href": "api/notebook-sdk.toolview.itoolviewapi.removeeventlistener.html",
    "title": "toolview.IToolViewApi.removeEventListener() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewApi > removeEventListener toolview.IToolViewApi.removeEventListener() method Removes a listener for events that might affect the tool view. Signature: removeEventListener<K extends keyof ToolViewApiEventMap>(type: K, listener: ToolViewApiEventMap[K]): void; Introduced: version 1.0 Type Parameters Parameter Type Description K extends keyof ToolViewApiEventMap The type of event to unsubscribe from. Parameters Parameter Type Description type K The type of event to unsubscribe from. listener ToolViewApiEventMap <!-- --> [K] A function that was previously added as a listener. Returns: void"
  },
  "api/notebook-sdk.toolview.itoolviewapi.showdialog.html": {
    "href": "api/notebook-sdk.toolview.itoolviewapi.showdialog.html",
    "title": "toolview.IToolViewApi.showDialog() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewApi > showDialog toolview.IToolViewApi.showDialog() method Creates and displays a modal dialog with the specified configuration. Signature: showDialog<TResult, TInitialize>(config: dialog.IDialogConfig<TInitialize>): Promise<TResult>; Introduced: version 1.4 Type Parameters Parameter Type Description TResult any The type of the data that the dialog returns when it's submitted. TInitialize any The type of the data that's used for populating the dialog when it's displayed. Parameters Parameter Type Description config dialog.IDialogConfig <!-- --> <TInitialize> The information for creating the dialog, including its size and its buttons. Returns: Promise<TResult> The value submitted from the dialog."
  },
  "api/notebook-sdk.toolview.itoolviewconfig.html": {
    "href": "api/notebook-sdk.toolview.itoolviewconfig.html",
    "title": "toolview.IToolViewConfig interface",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewConfig toolview.IToolViewConfig interface A set of information for creating a tool view. Signature: interface IToolViewConfig Introduced: version 1.3 Properties Property Modifiers Type Description name readonly string Gets the name of the tool view, which appears as a heading in the user interface. path readonly string Gets the path to the content to host in the tool view, relative to the plug-in entry point. position? readonly ToolViewPosition (Optional) Gets the position of the tool view. size? readonly ToolViewSize (Optional) Gets the size of the tool view."
  },
  "api/notebook-sdk.toolview.itoolviewconfig.name.html": {
    "href": "api/notebook-sdk.toolview.itoolviewconfig.name.html",
    "title": "toolview.IToolViewConfig.name property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewConfig > name toolview.IToolViewConfig.name property Gets the name of the tool view, which appears as a heading in the user interface. Signature: readonly name: string; Returns: string Introduced: version 1.3"
  },
  "api/notebook-sdk.toolview.itoolviewconfig.path.html": {
    "href": "api/notebook-sdk.toolview.itoolviewconfig.path.html",
    "title": "toolview.IToolViewConfig.path property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewConfig > path toolview.IToolViewConfig.path property Gets the path to the content to host in the tool view, relative to the plug-in entry point. Signature: readonly path: string; Returns: string Introduced: version 1.3 Remarks For example, if path is ' ./ <!-- --> ', then the server uses the folder that contains the entry point."
  },
  "api/notebook-sdk.toolview.itoolviewconfig.position.html": {
    "href": "api/notebook-sdk.toolview.itoolviewconfig.position.html",
    "title": "toolview.IToolViewConfig.position property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewConfig > position toolview.IToolViewConfig.position property Gets the position of the tool view. Signature: readonly position?: ToolViewPosition; Returns: ToolViewPosition Introduced: version 1.3 Remarks The tool view is created next to the specified edge of the chart in the browser window."
  },
  "api/notebook-sdk.toolview.itoolviewconfig.size.html": {
    "href": "api/notebook-sdk.toolview.itoolviewconfig.size.html",
    "title": "toolview.IToolViewConfig.size property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IToolViewConfig > size toolview.IToolViewConfig.size property Gets the size of the tool view. Signature: readonly size?: ToolViewSize; Returns: ToolViewSize Introduced: version 1.3"
  },
  "api/notebook-sdk.toolview.ivolatilestore.clear.html": {
    "href": "api/notebook-sdk.toolview.ivolatilestore.clear.html",
    "title": "toolview.IVolatileStore.clear() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IVolatileStore > clear toolview.IVolatileStore.clear() method Clears all keys from the volatile store. Signature: clear(): void; Returns: void Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.ivolatilestore.delete.html": {
    "href": "api/notebook-sdk.toolview.ivolatilestore.delete.html",
    "title": "toolview.IVolatileStore.delete() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IVolatileStore > delete toolview.IVolatileStore.delete() method Deletes a key from the volatile store. Signature: delete(key: string): void; Introduced: version 1.0 Parameters Parameter Type Description key string The key to delete. Returns: void"
  },
  "api/notebook-sdk.toolview.ivolatilestore.get.html": {
    "href": "api/notebook-sdk.toolview.ivolatilestore.get.html",
    "title": "toolview.IVolatileStore.get() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IVolatileStore > get toolview.IVolatileStore.get() method Reads the value of a key in the volatile store. Signature: get<TValue = unknown>(key: string): TValue | undefined; Introduced: version 1.0 Type Parameters Parameter Type Description TValue any (default: unknown) The type of the read value. Parameters Parameter Type Description key string The key whose value to read. Returns: TValue | undefined The stored value, or undefined if the key does not exist in the store."
  },
  "api/notebook-sdk.toolview.ivolatilestore.html": {
    "href": "api/notebook-sdk.toolview.ivolatilestore.html",
    "title": "toolview.IVolatileStore interface",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IVolatileStore toolview.IVolatileStore interface The volatile store that i2 Notebook makes available to tool views. Signature: interface IVolatileStore Introduced: version 1.0 Remarks When a tool view goes from being docked to undocked (or vice versa), or from being open to closed, its window is unloaded and any information associated with the window is lost. The purpose of the volatile store is to let you retain information when the window is unloaded, and then restore it when the window is re-created. The store is \"volatile\" because its contents are lost when the i2 Notebook application window is closed or reloaded. Methods Method Description clear() Clears all keys from the volatile store. delete(key) Deletes a key from the volatile store. get(key) Reads the value of a key in the volatile store. set(key, value) Creates or updates a key in the volatile store."
  },
  "api/notebook-sdk.toolview.ivolatilestore.set.html": {
    "href": "api/notebook-sdk.toolview.ivolatilestore.set.html",
    "title": "toolview.IVolatileStore.set() method",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > IVolatileStore > set toolview.IVolatileStore.set() method Creates or updates a key in the volatile store. Signature: set(key: string, value: unknown): void; Introduced: version 1.0 Parameters Parameter Type Description key string The key to create or update. value unknown The new value for the key. Returns: void"
  },
  "api/notebook-sdk.toolview.serializablevalue.html": {
    "href": "api/notebook-sdk.toolview.serializablevalue.html",
    "title": "toolview.SerializableValue type",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > SerializableValue toolview.SerializableValue type Warning: This API is now obsolete. toolview.SerializableValue is no longer used. Replace any existing use with unknown <!-- --> . A serializable value that a tool view puts into the volatile store. Signature: type SerializableValue = string | number | boolean | null | bigint | Date | SerializableValue[] | { [key: string]: SerializableValue; }; References: SerializableValue Introduced: version 1.0 Remarks Serializable values are constrained to the logical types that are listed in the definition."
  },
  "api/notebook-sdk.toolview.toolviewapieventmap.html": {
    "href": "api/notebook-sdk.toolview.toolviewapieventmap.html",
    "title": "toolview.ToolViewApiEventMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewApiEventMap toolview.ToolViewApiEventMap interface A combined mapping of tool view and other event types to their listener types. Signature: interface ToolViewApiEventMap extends ToolViewEventMap, app.ApplicationEventMap Extends: ToolViewEventMap <!-- --> , app.ApplicationEventMap Introduced: version 1.0 Properties Property Modifiers Type Description chartchange readonly ChangeListener Gets the type of the callback method that listens for \"chartchange\" events. (Inherited from ChartEventMap <!-- --> ) chartschemachange readonly ChartSchemaChangeListener Gets the type of the callback method that listens for \"chartschemachange\" events. (Inherited from ChartEventMap <!-- --> ) chartselectionchange readonly SelectionListener Gets the type of the callback method that listens for \"chartselectionchange\" events. (Inherited from ChartEventMap <!-- --> ) chartviewchange readonly ViewListener Gets the type of the callback method that listens for \"chartviewchange\" events. (Inherited from ChartEventMap <!-- --> ) minimized readonly ToolViewMinimizedListener Gets the type of the callback method that listens for \"minimized\" events. (Inherited from ToolViewEventMap <!-- --> ) state readonly ToolViewStateListener Gets the type of the callback method that listens for \"state\" events. (Inherited from ToolViewEventMap <!-- --> ) storechange readonly VolatileStoreChangeListener Gets the type of the callback method that listens for \"storechange\" events. (Inherited from ToolViewEventMap <!-- --> ) unload readonly ToolViewUnloadListener Gets the type of the callback method that listens for \"unload\" events. (Inherited from ToolViewEventMap <!-- --> )"
  },
  "api/notebook-sdk.toolview.toolviewapieventoptionsmap.html": {
    "href": "api/notebook-sdk.toolview.toolviewapieventoptionsmap.html",
    "title": "toolview.ToolViewApiEventOptionsMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewApiEventOptionsMap toolview.ToolViewApiEventOptionsMap interface A combined mapping of tool view and other event types to their listener options types. Signature: interface ToolViewApiEventOptionsMap extends ToolViewEventOptionsMap, app.ApplicationEventOptionsMap Extends: ToolViewEventOptionsMap <!-- --> , app.ApplicationEventOptionsMap Introduced: version 1.0 Properties Property Modifiers Type Description chartchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartschemachange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartschemachange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartselectionchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartselectionchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) chartviewchange readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"chartviewchange\" event listeners. (Inherited from ChartEventOptionsMap <!-- --> ) minimized readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"minimized\" event listeners. (Inherited from ToolViewEventOptionsMap <!-- --> ) state readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"state\" event listeners. (Inherited from ToolViewEventOptionsMap <!-- --> ) storechange readonly app.ITransactionOptions Gets the type of the object that provides control over \"storechange\" event listeners. (Inherited from ToolViewEventOptionsMap <!-- --> ) unload readonly app.ITransactionOptions Gets the type of the object that provides control over \"unload\" event listeners. (Inherited from ToolViewEventOptionsMap <!-- --> )"
  },
  "api/notebook-sdk.toolview.toolvieweventmap.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventmap.html",
    "title": "toolview.ToolViewEventMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventMap toolview.ToolViewEventMap interface A mapping of tool view event types to their listener types. Signature: interface ToolViewEventMap Introduced: version 1.0 Properties Property Modifiers Type Description minimized readonly ToolViewMinimizedListener Gets the type of the callback method that listens for \"minimized\" events. state readonly ToolViewStateListener Gets the type of the callback method that listens for \"state\" events. storechange readonly VolatileStoreChangeListener Gets the type of the callback method that listens for \"storechange\" events. unload readonly ToolViewUnloadListener Gets the type of the callback method that listens for \"unload\" events."
  },
  "api/notebook-sdk.toolview.toolvieweventmap.minimized.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventmap.minimized.html",
    "title": "toolview.ToolViewEventMap.minimized property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventMap > minimized toolview.ToolViewEventMap.minimized property Gets the type of the callback method that listens for \"minimized\" events. Signature: readonly minimized: ToolViewMinimizedListener; Returns: ToolViewMinimizedListener Introduced: version 1.2"
  },
  "api/notebook-sdk.toolview.toolvieweventmap.state.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventmap.state.html",
    "title": "toolview.ToolViewEventMap.state property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventMap > state toolview.ToolViewEventMap.state property Gets the type of the callback method that listens for \"state\" events. Signature: readonly state: ToolViewStateListener; Returns: ToolViewStateListener Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.toolvieweventmap.storechange.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventmap.storechange.html",
    "title": "toolview.ToolViewEventMap.storechange property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventMap > storechange toolview.ToolViewEventMap.storechange property Gets the type of the callback method that listens for \"storechange\" events. Signature: readonly storechange: VolatileStoreChangeListener; Returns: VolatileStoreChangeListener Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.toolvieweventmap.unload.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventmap.unload.html",
    "title": "toolview.ToolViewEventMap.unload property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventMap > unload toolview.ToolViewEventMap.unload property Gets the type of the callback method that listens for \"unload\" events. Signature: readonly unload: ToolViewUnloadListener; Returns: ToolViewUnloadListener Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.toolvieweventoptionsmap.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventoptionsmap.html",
    "title": "toolview.ToolViewEventOptionsMap interface",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventOptionsMap toolview.ToolViewEventOptionsMap interface A mapping of tool view event types to their listener options types. Signature: interface ToolViewEventOptionsMap Introduced: version 1.0 Properties Property Modifiers Type Description minimized readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"minimized\" event listeners. state readonly app.ISubscriptionOptions Gets the type of the object that provides control over \"state\" event listeners. storechange readonly app.ITransactionOptions Gets the type of the object that provides control over \"storechange\" event listeners. unload readonly app.ITransactionOptions Gets the type of the object that provides control over \"unload\" event listeners."
  },
  "api/notebook-sdk.toolview.toolvieweventoptionsmap.minimized.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventoptionsmap.minimized.html",
    "title": "toolview.ToolViewEventOptionsMap.minimized property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventOptionsMap > minimized toolview.ToolViewEventOptionsMap.minimized property Gets the type of the object that provides control over \"minimized\" event listeners. Signature: readonly minimized: app.ISubscriptionOptions; Returns: app.ISubscriptionOptions Introduced: version 1.2"
  },
  "api/notebook-sdk.toolview.toolvieweventoptionsmap.state.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventoptionsmap.state.html",
    "title": "toolview.ToolViewEventOptionsMap.state property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventOptionsMap > state toolview.ToolViewEventOptionsMap.state property Gets the type of the object that provides control over \"state\" event listeners. Signature: readonly state: app.ISubscriptionOptions; Returns: app.ISubscriptionOptions Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.toolvieweventoptionsmap.storechange.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventoptionsmap.storechange.html",
    "title": "toolview.ToolViewEventOptionsMap.storechange property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventOptionsMap > storechange toolview.ToolViewEventOptionsMap.storechange property Gets the type of the object that provides control over \"storechange\" event listeners. Signature: readonly storechange: app.ITransactionOptions; Returns: app.ITransactionOptions Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.toolvieweventoptionsmap.unload.html": {
    "href": "api/notebook-sdk.toolview.toolvieweventoptionsmap.unload.html",
    "title": "toolview.ToolViewEventOptionsMap.unload property",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewEventOptionsMap > unload toolview.ToolViewEventOptionsMap.unload property Gets the type of the object that provides control over \"unload\" event listeners. Signature: readonly unload: app.ITransactionOptions; Returns: app.ITransactionOptions Introduced: version 1.0"
  },
  "api/notebook-sdk.toolview.toolviewminimizedlistener.html": {
    "href": "api/notebook-sdk.toolview.toolviewminimizedlistener.html",
    "title": "toolview.ToolViewMinimizedListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewMinimizedListener toolview.ToolViewMinimizedListener type A callback function that handles tool view minimized events. Signature: type ToolViewMinimizedListener = (isMinimized: boolean) => void; Introduced: version 1.2 Parameters Parameter Description isMinimized true if the tool view is now invisible for one of the reasons given; false if it is now visible in the opposite circumstances. Remarks This listener receives an event after the docked tool view changes visibility in the i2 Notebook user interface, as a result of a chart or another docked tool being maximized or restored."
  },
  "api/notebook-sdk.toolview.toolviewposition.html": {
    "href": "api/notebook-sdk.toolview.toolviewposition.html",
    "title": "toolview.ToolViewPosition type",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewPosition toolview.ToolViewPosition type The position of the tool view, relative to an edge of the chart. Signature: type ToolViewPosition = 'leading' | 'trailing' | 'top' | 'bottom'; Introduced: version 1.3"
  },
  "api/notebook-sdk.toolview.toolviewsize.html": {
    "href": "api/notebook-sdk.toolview.toolviewsize.html",
    "title": "toolview.ToolViewSize type",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewSize toolview.ToolViewSize type The size of the tool view. Signature: type ToolViewSize = 'small' | 'medium' | 'large' | 'x-large'; Introduced: version 1.3"
  },
  "api/notebook-sdk.toolview.toolviewstatelistener.html": {
    "href": "api/notebook-sdk.toolview.toolviewstatelistener.html",
    "title": "toolview.ToolViewStateListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewStateListener toolview.ToolViewStateListener type A callback function that handles tool view state change events. Signature: type ToolViewStateListener = (state: 'open' | 'closed') => void; Introduced: version 1.0 Parameters Parameter Description state The state that the tool view is changing to. Remarks Typically, this listener updates the i2 Notebook user interface to reflect the open or closed state of the tool view."
  },
  "api/notebook-sdk.toolview.toolviewunloadlistener.html": {
    "href": "api/notebook-sdk.toolview.toolviewunloadlistener.html",
    "title": "toolview.ToolViewUnloadListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > ToolViewUnloadListener toolview.ToolViewUnloadListener type A callback function that handles tool view unload events. Signature: type ToolViewUnloadListener = (isClosing: boolean) => void; Introduced: version 1.0 Parameters Parameter Description isClosing true if the unload event means that the tool view is closing; false if it is being docked, undocked, or maximized. Remarks Typically, this listener stores information when the tool view is changing between open states, and clears it when the tool view is closing."
  },
  "api/notebook-sdk.toolview.volatilestorechangelistener.html": {
    "href": "api/notebook-sdk.toolview.volatilestorechangelistener.html",
    "title": "toolview.VolatileStoreChangeListener type",
    "keywords": "Home > @i2analyze/notebook-sdk > toolview > VolatileStoreChangeListener toolview.VolatileStoreChangeListener type A callback function that handles change events in the volatile store. Signature: type VolatileStoreChangeListener = (key: string | null) => void; Introduced: version 1.0 Parameters Parameter Description key The key that was affected by the change, or null if the store was cleared. Remarks The application calls registered listeners when keys are added to, modified in, or deleted from the volatile store. If the whole store is cleared, the application calls each listener once with a null parameter."
  },
  "api/notebook-sdk.visual.elementid.html": {
    "href": "api/notebook-sdk.visual.elementid.html",
    "title": "visual.ElementId type",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > ElementId visual.ElementId type The identifier of an element on an i2 Notebook chart. Signature: type ElementId = string; Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.html": {
    "href": "api/notebook-sdk.visual.html",
    "title": "visual namespace",
    "keywords": "Home > @i2analyze/notebook-sdk > visual visual namespace The members of the visual namespace provide control over the visible representations of the records that i2 Notebook charts contain. Signature: export declare namespace visual Introduced: version 1.0 Interfaces Interface Description IBounds A rectangular area, such as the boundary of the chart view. IEdge An edge on a chart surface. IEdgeStyle A style for an edge, which affects its appearance. IEdgeSummary An edge summary, which is a collection of edges that share the same 'from' and 'to' nodes and link type. IElementBase A set of information and functionality that is common to all elements on an i2 Notebook chart. IElementLabelDetails A label for an element. IElementSetting A value for a setting that affects the appearance of an element. IElementStyleBase A style for an element, which affects its appearance. IImageSetting An image for a node element. INode A node on a chart surface. INodeGroup A node group, which is a collection of nodes that can be moved and selected together. INodeGroupStyle A style for a node group, which affects its appearance. INodeStyle A style for a node, which affects its appearance. IPosition A position on a chart surface. Type Aliases Type Alias Description ElementId The identifier of an element on an i2 Notebook chart. IElement A node or an edge on a chart in the i2 Notebook web client. NodeSize The size of a node on an i2 Notebook chart. The default value is 1 ."
  },
  "api/notebook-sdk.visual.ibounds.bottomright.html": {
    "href": "api/notebook-sdk.visual.ibounds.bottomright.html",
    "title": "visual.IBounds.bottomRight property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IBounds > bottomRight visual.IBounds.bottomRight property Gets the position of the bottom right of the rectangle. Signature: readonly bottomRight: IPosition; Returns: IPosition Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.ibounds.html": {
    "href": "api/notebook-sdk.visual.ibounds.html",
    "title": "visual.IBounds interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IBounds visual.IBounds interface A rectangular area, such as the boundary of the chart view. Signature: interface IBounds Introduced: version 1.0 Properties Property Modifiers Type Description bottomRight readonly IPosition Gets the position of the bottom right of the rectangle. topLeft readonly IPosition Gets the position of the top left of the rectangle."
  },
  "api/notebook-sdk.visual.ibounds.topleft.html": {
    "href": "api/notebook-sdk.visual.ibounds.topleft.html",
    "title": "visual.IBounds.topLeft property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IBounds > topLeft visual.IBounds.topLeft property Gets the position of the top left of the rectangle. Signature: readonly topLeft: IPosition; Returns: IPosition Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.iedge.direction.html": {
    "href": "api/notebook-sdk.visual.iedge.direction.html",
    "title": "visual.IEdge.direction property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdge > direction visual.IEdge.direction property Gets the direction of the edge. Signature: readonly direction: data.LinkDirection; Returns: data.LinkDirection Introduced: version 1.0 Remarks The value is expressed relative to the natural direction implied by the 'from' and 'to' ends."
  },
  "api/notebook-sdk.visual.iedge.fromend.html": {
    "href": "api/notebook-sdk.visual.iedge.fromend.html",
    "title": "visual.IEdge.fromEnd property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdge > fromEnd visual.IEdge.fromEnd property Gets the node at the 'from' end of the edge. Signature: readonly fromEnd: INode; Returns: INode Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.iedge.html": {
    "href": "api/notebook-sdk.visual.iedge.html",
    "title": "visual.IEdge interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdge visual.IEdge interface An edge on a chart surface. Signature: interface IEdge extends IElementBase Extends: IElementBase Introduced: version 1.0 Properties Property Modifiers Type Description direction readonly data.LinkDirection Gets the direction of the edge. fromEnd readonly INode Gets the node at the 'from' end of the edge. id readonly ElementId Gets the identifier of the element. (Inherited from IElementBase <!-- --> ) labelOrFallback readonly string Gets the label of the element or, if there is no label, an application-standard fallback string such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> '. (Inherited from IElementBase <!-- --> ) records readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartRecord <!-- --> > Gets the records that the element represents, indexed by their identifiers. (Inherited from IElementBase <!-- --> ) style readonly IEdgeStyle Gets the style of the edge, which affects its appearance. toEnd readonly INode Gets the node at the 'to' end of the edge. Methods Method Description getLabelDetails() Gets the label for the element, together with information about whether the label has a genuine value. (Inherited from IElementBase <!-- --> ) isEdge() Tests whether the element is an edge; functions as a TypeScript typeguard. (Inherited from IElementBase <!-- --> ) isNode() Tests whether the element is a node; functions as a TypeScript typeguard. (Inherited from IElementBase <!-- --> )"
  },
  "api/notebook-sdk.visual.iedge.style.html": {
    "href": "api/notebook-sdk.visual.iedge.style.html",
    "title": "visual.IEdge.style property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdge > style visual.IEdge.style property Gets the style of the edge, which affects its appearance. Signature: readonly style: IEdgeStyle; Returns: IEdgeStyle Introduced: version 1.2"
  },
  "api/notebook-sdk.visual.iedge.toend.html": {
    "href": "api/notebook-sdk.visual.iedge.toend.html",
    "title": "visual.IEdge.toEnd property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdge > toEnd visual.IEdge.toEnd property Gets the node at the 'to' end of the edge. Signature: readonly toEnd: INode; Returns: INode Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.iedgestyle.html": {
    "href": "api/notebook-sdk.visual.iedgestyle.html",
    "title": "visual.IEdgeStyle interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeStyle visual.IEdgeStyle interface A style for an edge, which affects its appearance. Signature: interface IEdgeStyle extends IElementStyleBase Extends: IElementStyleBase Introduced: version 1.2 Properties Property Modifiers Type Description color readonly IElementSetting <!-- --> <string> Gets the color of the element. (Inherited from IElementStyleBase <!-- --> ) width readonly IElementSetting <!-- --> <number> Gets the width of the edge."
  },
  "api/notebook-sdk.visual.iedgestyle.width.html": {
    "href": "api/notebook-sdk.visual.iedgestyle.width.html",
    "title": "visual.IEdgeStyle.width property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeStyle > width visual.IEdgeStyle.width property Gets the width of the edge. Signature: readonly width: IElementSetting<number>; Returns: IElementSetting <number> Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.iedgesummary.edges.html": {
    "href": "api/notebook-sdk.visual.iedgesummary.edges.html",
    "title": "visual.IEdgeSummary.edges property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeSummary > edges visual.IEdgeSummary.edges property Gets the edges in the edge summary. Signature: readonly edges: data.IKeyedReadOnlyCollection<ElementId, IEdge>; Returns: data.IKeyedReadOnlyCollection < ElementId , IEdge > Introduced: version 1.6"
  },
  "api/notebook-sdk.visual.iedgesummary.fromend.html": {
    "href": "api/notebook-sdk.visual.iedgesummary.fromend.html",
    "title": "visual.IEdgeSummary.fromEnd property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeSummary > fromEnd visual.IEdgeSummary.fromEnd property Gets the node at the 'from' end of the edge summary. Signature: readonly fromEnd: INode; Returns: INode Introduced: version 1.6"
  },
  "api/notebook-sdk.visual.iedgesummary.html": {
    "href": "api/notebook-sdk.visual.iedgesummary.html",
    "title": "visual.IEdgeSummary interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeSummary visual.IEdgeSummary interface An edge summary, which is a collection of edges that share the same 'from' and 'to' nodes and link type. Signature: interface IEdgeSummary Introduced: version 1.6 Properties Property Modifiers Type Description edges readonly data.IKeyedReadOnlyCollection <!-- --> < ElementId <!-- --> , IEdge <!-- --> > Gets the edges in the edge summary. fromEnd readonly INode Gets the node at the 'from' end of the edge summary. id readonly ElementId Gets the identifier of the edge summary. label readonly string | undefined Gets the label of the edge summary, or undefined if there is no explicit label. linkType readonly schema.IChartLinkType Gets the link type of the edges in the edge summary. toEnd readonly INode Gets the node at the 'to' end of the edge summary."
  },
  "api/notebook-sdk.visual.iedgesummary.id.html": {
    "href": "api/notebook-sdk.visual.iedgesummary.id.html",
    "title": "visual.IEdgeSummary.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeSummary > id visual.IEdgeSummary.id property Gets the identifier of the edge summary. Signature: readonly id: ElementId; Returns: ElementId Introduced: version 1.6"
  },
  "api/notebook-sdk.visual.iedgesummary.label.html": {
    "href": "api/notebook-sdk.visual.iedgesummary.label.html",
    "title": "visual.IEdgeSummary.label property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeSummary > label visual.IEdgeSummary.label property Gets the label of the edge summary, or undefined if there is no explicit label. Signature: readonly label: string | undefined; Returns: string | undefined Introduced: version 1.6"
  },
  "api/notebook-sdk.visual.iedgesummary.linktype.html": {
    "href": "api/notebook-sdk.visual.iedgesummary.linktype.html",
    "title": "visual.IEdgeSummary.linkType property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeSummary > linkType visual.IEdgeSummary.linkType property Gets the link type of the edges in the edge summary. Signature: readonly linkType: schema.IChartLinkType; Returns: schema.IChartLinkType Introduced: version 1.6"
  },
  "api/notebook-sdk.visual.iedgesummary.toend.html": {
    "href": "api/notebook-sdk.visual.iedgesummary.toend.html",
    "title": "visual.IEdgeSummary.toEnd property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IEdgeSummary > toEnd visual.IEdgeSummary.toEnd property Gets the node at the 'to' end of the edge summary. Signature: readonly toEnd: INode; Returns: INode Introduced: version 1.6"
  },
  "api/notebook-sdk.visual.ielement.html": {
    "href": "api/notebook-sdk.visual.ielement.html",
    "title": "visual.IElement type",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElement visual.IElement type A node or an edge on a chart in the i2 Notebook web client. Signature: type IElement = INode | IEdge; References: INode <!-- --> , IEdge Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.ielementbase.getlabeldetails.html": {
    "href": "api/notebook-sdk.visual.ielementbase.getlabeldetails.html",
    "title": "visual.IElementBase.getLabelDetails() method",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementBase > getLabelDetails visual.IElementBase.getLabelDetails() method Gets the label for the element, together with information about whether the label has a genuine value. Signature: getLabelDetails(): IElementLabelDetails; Returns: IElementLabelDetails The label (or a fallback string) and an indication of whether the label is real. Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.ielementbase.html": {
    "href": "api/notebook-sdk.visual.ielementbase.html",
    "title": "visual.IElementBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementBase visual.IElementBase interface A set of information and functionality that is common to all elements on an i2 Notebook chart. Signature: interface IElementBase Introduced: version 1.0 Properties Property Modifiers Type Description id readonly ElementId Gets the identifier of the element. labelOrFallback readonly string Gets the label of the element or, if there is no label, an application-standard fallback string such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> '. records readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartRecord <!-- --> > Gets the records that the element represents, indexed by their identifiers. Methods Method Description getLabelDetails() Gets the label for the element, together with information about whether the label has a genuine value. isEdge() Tests whether the element is an edge; functions as a TypeScript typeguard. isNode() Tests whether the element is a node; functions as a TypeScript typeguard."
  },
  "api/notebook-sdk.visual.ielementbase.id.html": {
    "href": "api/notebook-sdk.visual.ielementbase.id.html",
    "title": "visual.IElementBase.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementBase > id visual.IElementBase.id property Gets the identifier of the element. Signature: readonly id: ElementId; Returns: ElementId Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.ielementbase.isedge.html": {
    "href": "api/notebook-sdk.visual.ielementbase.isedge.html",
    "title": "visual.IElementBase.isEdge() method",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementBase > isEdge visual.IElementBase.isEdge() method Tests whether the element is an edge; functions as a TypeScript typeguard. Signature: isEdge(): this is IEdge; Returns: this is IEdge true if the element is an edge; false otherwise. Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.ielementbase.isnode.html": {
    "href": "api/notebook-sdk.visual.ielementbase.isnode.html",
    "title": "visual.IElementBase.isNode() method",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementBase > isNode visual.IElementBase.isNode() method Tests whether the element is a node; functions as a TypeScript typeguard. Signature: isNode(): this is INode; Returns: this is INode true if the element is a node; false otherwise. Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.ielementbase.labelorfallback.html": {
    "href": "api/notebook-sdk.visual.ielementbase.labelorfallback.html",
    "title": "visual.IElementBase.labelOrFallback property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementBase > labelOrFallback visual.IElementBase.labelOrFallback property Gets the label of the element or, if there is no label, an application-standard fallback string such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> '. Signature: readonly labelOrFallback: string; Returns: string Introduced: version 1.0 Remarks When an element has no label, it is a common pattern to display something in the user interface to indicate the fact, instead of just a blank space. i2 Notebook contains a standard piece of translated fallback text such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> ' that the application uses in those scenarios. If you need to know whether there was actually a label, because you want to handle the no-label case differently, call getLabelDetails() instead."
  },
  "api/notebook-sdk.visual.ielementbase.records.html": {
    "href": "api/notebook-sdk.visual.ielementbase.records.html",
    "title": "visual.IElementBase.records property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementBase > records visual.IElementBase.records property Gets the records that the element represents, indexed by their identifiers. Signature: readonly records: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartRecord>; Returns: data.IKeyedReadOnlyCollection < records.AnalyzeRecordId , records.IChartRecord > Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.ielementlabeldetails.html": {
    "href": "api/notebook-sdk.visual.ielementlabeldetails.html",
    "title": "visual.IElementLabelDetails interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementLabelDetails visual.IElementLabelDetails interface A label for an element. Signature: interface IElementLabelDetails extends data.ILabelDetailsBase Extends: data.ILabelDetailsBase Introduced: version 1.5 Properties Property Modifiers Type Description hasLabel readonly boolean Indicates whether the label is not empty. (Inherited from ILabelDetailsBase <!-- --> ) isDefault readonly boolean Indicates whether the label contains an explicitly set value, or was generated from the schema label definition. labelOrEmpty readonly string Gets the label or, if the label is empty, an empty string. (Inherited from ILabelDetailsBase <!-- --> ) labelOrFallback readonly string Gets the label or, if the label is empty, a standard fallback string such as ' <!-- --> < <!-- --> No value <!-- --> > <!-- --> '. (Inherited from ILabelDetailsBase <!-- --> )"
  },
  "api/notebook-sdk.visual.ielementlabeldetails.isdefault.html": {
    "href": "api/notebook-sdk.visual.ielementlabeldetails.isdefault.html",
    "title": "visual.IElementLabelDetails.isDefault property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementLabelDetails > isDefault visual.IElementLabelDetails.isDefault property Indicates whether the label contains an explicitly set value, or was generated from the schema label definition. Signature: readonly isDefault: boolean; Returns: boolean Introduced: version 1.5 Remarks A label generated from the schema might still be empty, in which case this property is true but hasLabel is false <!-- --> ."
  },
  "api/notebook-sdk.visual.ielementsetting.html": {
    "href": "api/notebook-sdk.visual.ielementsetting.html",
    "title": "visual.IElementSetting interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementSetting visual.IElementSetting interface A value for a setting that affects the appearance of an element. Signature: interface IElementSetting<T> Introduced: version 1.2 Type Parameters Parameter Type Description T any The logical type of the value. Properties Property Modifiers Type Description isDefault readonly boolean Indicates whether value contains the default value for the setting. value readonly T Gets the setting value."
  },
  "api/notebook-sdk.visual.ielementsetting.isdefault.html": {
    "href": "api/notebook-sdk.visual.ielementsetting.isdefault.html",
    "title": "visual.IElementSetting.isDefault property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementSetting > isDefault visual.IElementSetting.isDefault property Indicates whether value contains the default value for the setting. Signature: readonly isDefault: boolean; Returns: boolean Introduced: version 1.2"
  },
  "api/notebook-sdk.visual.ielementsetting.value.html": {
    "href": "api/notebook-sdk.visual.ielementsetting.value.html",
    "title": "visual.IElementSetting.value property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementSetting > value visual.IElementSetting.value property Gets the setting value. Signature: readonly value: T; Returns: T Introduced: version 1.2"
  },
  "api/notebook-sdk.visual.ielementstylebase.color.html": {
    "href": "api/notebook-sdk.visual.ielementstylebase.color.html",
    "title": "visual.IElementStyleBase.color property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementStyleBase > color visual.IElementStyleBase.color property Gets the color of the element. Signature: readonly color: IElementSetting<string>; Returns: IElementSetting <string> Introduced: version 1.2"
  },
  "api/notebook-sdk.visual.ielementstylebase.html": {
    "href": "api/notebook-sdk.visual.ielementstylebase.html",
    "title": "visual.IElementStyleBase interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IElementStyleBase visual.IElementStyleBase interface A style for an element, which affects its appearance. Signature: interface IElementStyleBase Introduced: version 1.2 Properties Property Modifiers Type Description color readonly IElementSetting <!-- --> <string> Gets the color of the element."
  },
  "api/notebook-sdk.visual.iimagesetting.html": {
    "href": "api/notebook-sdk.visual.iimagesetting.html",
    "title": "visual.IImageSetting interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IImageSetting visual.IImageSetting interface An image for a node element. Signature: interface IImageSetting extends data.IImage Extends: data.IImage Introduced: version 1.5 Properties Property Modifiers Type Description description readonly string Gets a description of the image to use as alternative text, for example. (Inherited from IImage <!-- --> ) href readonly string Gets the URL of the image. (Inherited from IImage <!-- --> ) isDefault readonly boolean Indicates whether the image is the default one for the node."
  },
  "api/notebook-sdk.visual.iimagesetting.isdefault.html": {
    "href": "api/notebook-sdk.visual.iimagesetting.isdefault.html",
    "title": "visual.IImageSetting.isDefault property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IImageSetting > isDefault visual.IImageSetting.isDefault property Indicates whether the image is the default one for the node. Signature: readonly isDefault: boolean; Returns: boolean Introduced: version 1.5"
  },
  "api/notebook-sdk.visual.inode.center.html": {
    "href": "api/notebook-sdk.visual.inode.center.html",
    "title": "visual.INode.center property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INode > center visual.INode.center property Gets the position of the center of the node, in chart coordinates. Signature: readonly center: IPosition; Returns: IPosition Introduced: version 1.0 Remarks For more information about chart coordinates, see the documentation for the members of the IChartView interface."
  },
  "api/notebook-sdk.visual.inode.connectededges.html": {
    "href": "api/notebook-sdk.visual.inode.connectededges.html",
    "title": "visual.INode.connectedEdges property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INode > connectedEdges visual.INode.connectedEdges property Warning: This API is now obsolete. visual.INode.connectedEdges has been renamed to visual.INode.edges <!-- --> . Gets all the edges that are connected to the node. Signature: readonly connectedEdges: data.IKeyedReadOnlyCollection<ElementId, IEdge>; Returns: data.IKeyedReadOnlyCollection < ElementId , IEdge > Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.inode.edges.html": {
    "href": "api/notebook-sdk.visual.inode.edges.html",
    "title": "visual.INode.edges property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INode > edges visual.INode.edges property Gets all the edges that are connected to the node. Signature: readonly edges: data.IKeyedReadOnlyCollection<ElementId, IEdge>; Returns: data.IKeyedReadOnlyCollection < ElementId , IEdge > Introduced: version 1.1"
  },
  "api/notebook-sdk.visual.inode.html": {
    "href": "api/notebook-sdk.visual.inode.html",
    "title": "visual.INode interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INode visual.INode interface A node on a chart surface. Signature: interface INode extends IElementBase Extends: IElementBase Introduced: version 1.0 Properties Property Modifiers Type Description center readonly IPosition Gets the position of the center of the node, in chart coordinates. connectedEdges readonly data.IKeyedReadOnlyCollection <!-- --> < ElementId <!-- --> , IEdge <!-- --> > Gets all the edges that are connected to the node. edges readonly data.IKeyedReadOnlyCollection <!-- --> < ElementId <!-- --> , IEdge <!-- --> > Gets all the edges that are connected to the node. id readonly ElementId Gets the identifier of the element. (Inherited from IElementBase <!-- --> ) labelOrFallback readonly string Gets the label of the element or, if there is no label, an application-standard fallback string such as ' <!-- --> < <!-- --> No label <!-- --> > <!-- --> '. (Inherited from IElementBase <!-- --> ) records readonly data.IKeyedReadOnlyCollection <!-- --> < records.AnalyzeRecordId <!-- --> , records.IChartRecord <!-- --> > Gets the records that the element represents, indexed by their identifiers. (Inherited from IElementBase <!-- --> ) style readonly INodeStyle Gets the style of the node. Methods Method Description getLabelDetails() Gets the label for the element, together with information about whether the label has a genuine value. (Inherited from IElementBase <!-- --> ) isEdge() Tests whether the element is an edge; functions as a TypeScript typeguard. (Inherited from IElementBase <!-- --> ) isNode() Tests whether the element is a node; functions as a TypeScript typeguard. (Inherited from IElementBase <!-- --> )"
  },
  "api/notebook-sdk.visual.inode.style.html": {
    "href": "api/notebook-sdk.visual.inode.style.html",
    "title": "visual.INode.style property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INode > style visual.INode.style property Gets the style of the node. Signature: readonly style: INodeStyle; Returns: INodeStyle Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.inodegroup.html": {
    "href": "api/notebook-sdk.visual.inodegroup.html",
    "title": "visual.INodeGroup interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroup visual.INodeGroup interface A node group, which is a collection of nodes that can be moved and selected together. Signature: interface INodeGroup Introduced: version 1.8 Properties Property Modifiers Type Description id readonly ElementId Gets the identifier of the node group. isMinimized readonly boolean Indicates the minimized state of the node group. label readonly string | undefined Gets the label of the node group, or undefined if there is no explicit label. nodes readonly data.IKeyedReadOnlyCollection <!-- --> < ElementId <!-- --> , INode <!-- --> > Gets the nodes in the node group. style readonly INodeGroupStyle Gets the style of the node group."
  },
  "api/notebook-sdk.visual.inodegroup.id.html": {
    "href": "api/notebook-sdk.visual.inodegroup.id.html",
    "title": "visual.INodeGroup.id property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroup > id visual.INodeGroup.id property Gets the identifier of the node group. Signature: readonly id: ElementId; Returns: ElementId Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.inodegroup.isminimized.html": {
    "href": "api/notebook-sdk.visual.inodegroup.isminimized.html",
    "title": "visual.INodeGroup.isMinimized property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroup > isMinimized visual.INodeGroup.isMinimized property Indicates the minimized state of the node group. Signature: readonly isMinimized: boolean; Returns: boolean Introduced: version 1.8 Remarks A minimized node group is represented by a single node that contains the label and image of the group, and can be maximized to show the individual nodes in the group."
  },
  "api/notebook-sdk.visual.inodegroup.label.html": {
    "href": "api/notebook-sdk.visual.inodegroup.label.html",
    "title": "visual.INodeGroup.label property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroup > label visual.INodeGroup.label property Gets the label of the node group, or undefined if there is no explicit label. Signature: readonly label: string | undefined; Returns: string | undefined Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.inodegroup.nodes.html": {
    "href": "api/notebook-sdk.visual.inodegroup.nodes.html",
    "title": "visual.INodeGroup.nodes property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroup > nodes visual.INodeGroup.nodes property Gets the nodes in the node group. Signature: readonly nodes: data.IKeyedReadOnlyCollection<ElementId, INode>; Returns: data.IKeyedReadOnlyCollection < ElementId , INode > Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.inodegroup.style.html": {
    "href": "api/notebook-sdk.visual.inodegroup.style.html",
    "title": "visual.INodeGroup.style property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroup > style visual.INodeGroup.style property Gets the style of the node group. Signature: readonly style: INodeGroupStyle; Returns: INodeGroupStyle Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.inodegroupstyle.bordercolor.html": {
    "href": "api/notebook-sdk.visual.inodegroupstyle.bordercolor.html",
    "title": "visual.INodeGroupStyle.borderColor property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroupStyle > borderColor visual.INodeGroupStyle.borderColor property Gets the border color of the node group, or null if there is no border. Signature: readonly borderColor: IElementSetting<string | null>; Returns: IElementSetting <string | null> Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.inodegroupstyle.borderwidth.html": {
    "href": "api/notebook-sdk.visual.inodegroupstyle.borderwidth.html",
    "title": "visual.INodeGroupStyle.borderWidth property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroupStyle > borderWidth visual.INodeGroupStyle.borderWidth property Gets the border width of the node group. Signature: readonly borderWidth: IElementSetting<number>; Returns: IElementSetting <number> Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.inodegroupstyle.color.html": {
    "href": "api/notebook-sdk.visual.inodegroupstyle.color.html",
    "title": "visual.INodeGroupStyle.color property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroupStyle > color visual.INodeGroupStyle.color property Gets the color of the node group, or null if there is no background. Signature: readonly color: IElementSetting<string | null>; Returns: IElementSetting <string | null> Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.inodegroupstyle.html": {
    "href": "api/notebook-sdk.visual.inodegroupstyle.html",
    "title": "visual.INodeGroupStyle interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroupStyle visual.INodeGroupStyle interface A style for a node group, which affects its appearance. Signature: interface INodeGroupStyle Introduced: version 1.8 Properties Property Modifiers Type Description borderColor readonly IElementSetting <!-- --> <string | null> Gets the border color of the node group, or null if there is no border. borderWidth readonly IElementSetting <!-- --> <number> Gets the border width of the node group. color readonly IElementSetting <!-- --> <string | null> Gets the color of the node group, or null if there is no background. image readonly IImageSetting Gets the image to display for the node group."
  },
  "api/notebook-sdk.visual.inodegroupstyle.image.html": {
    "href": "api/notebook-sdk.visual.inodegroupstyle.image.html",
    "title": "visual.INodeGroupStyle.image property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeGroupStyle > image visual.INodeGroupStyle.image property Gets the image to display for the node group. Signature: readonly image: IImageSetting; Returns: IImageSetting Introduced: version 1.8"
  },
  "api/notebook-sdk.visual.inodestyle.color.html": {
    "href": "api/notebook-sdk.visual.inodestyle.color.html",
    "title": "visual.INodeStyle.color property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeStyle > color visual.INodeStyle.color property Gets the color of the node, or null if there is no color and the node background is transparent. Signature: readonly color: IElementSetting<string | null>; Returns: IElementSetting <string | null> Introduced: version 1.2"
  },
  "api/notebook-sdk.visual.inodestyle.html": {
    "href": "api/notebook-sdk.visual.inodestyle.html",
    "title": "visual.INodeStyle interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeStyle visual.INodeStyle interface A style for a node, which affects its appearance. Signature: interface INodeStyle extends Omit<IElementStyleBase, 'color'> Extends: Omit< IElementStyleBase <!-- --> , 'color'> (Some inherited members may not be shown because they are not represented in the documentation.) Introduced: version 1.0 Properties Property Modifiers Type Description color readonly IElementSetting <!-- --> <string | null> Gets the color of the node, or null if there is no color and the node background is transparent. image readonly IImageSetting Gets the image to display for the node. size readonly IElementSetting <!-- --> < NodeSize <!-- --> > Gets the size of the node."
  },
  "api/notebook-sdk.visual.inodestyle.image.html": {
    "href": "api/notebook-sdk.visual.inodestyle.image.html",
    "title": "visual.INodeStyle.image property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeStyle > image visual.INodeStyle.image property Gets the image to display for the node. Signature: readonly image: IImageSetting; Returns: IImageSetting Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.inodestyle.size.html": {
    "href": "api/notebook-sdk.visual.inodestyle.size.html",
    "title": "visual.INodeStyle.size property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > INodeStyle > size visual.INodeStyle.size property Gets the size of the node. Signature: readonly size: IElementSetting<NodeSize>; Returns: IElementSetting < NodeSize > Introduced: version 1.2"
  },
  "api/notebook-sdk.visual.iposition.html": {
    "href": "api/notebook-sdk.visual.iposition.html",
    "title": "visual.IPosition interface",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IPosition visual.IPosition interface A position on a chart surface. Signature: interface IPosition Introduced: version 1.0 Remarks For more information about chart coordinates, see the documentation for the members of the IChartView interface. Properties Property Modifiers Type Description x readonly number Gets the location of the position on the x-axis, in chart coordinates. y readonly number Gets the location of the position on the y-axis, in chart coordinates."
  },
  "api/notebook-sdk.visual.iposition.x.html": {
    "href": "api/notebook-sdk.visual.iposition.x.html",
    "title": "visual.IPosition.x property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IPosition > x visual.IPosition.x property Gets the location of the position on the x-axis, in chart coordinates. Signature: readonly x: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.iposition.y.html": {
    "href": "api/notebook-sdk.visual.iposition.y.html",
    "title": "visual.IPosition.y property",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > IPosition > y visual.IPosition.y property Gets the location of the position on the y-axis, in chart coordinates. Signature: readonly y: number; Returns: number Introduced: version 1.0"
  },
  "api/notebook-sdk.visual.nodesize.html": {
    "href": "api/notebook-sdk.visual.nodesize.html",
    "title": "visual.NodeSize type",
    "keywords": "Home > @i2analyze/notebook-sdk > visual > NodeSize visual.NodeSize type The size of a node on an i2 Notebook chart. The default value is 1 <!-- --> . Signature: type NodeSize = 0.5 | 1 | 2 | 3 | 4; Introduced: version 1.2"
  },
  "guide/anatomy.html": {
    "href": "guide/anatomy.html",
    "title": "Anatomy of an i2 Notebook plug-in",
    "keywords": "Anatomy of an i2 Notebook plug-in An i2 Notebook plug-in is deployed to the i2 Analyze server as a directory that contains: The plug-in manifest , which is a JSON file that contains configuration details The plug-in entry point , which is a JavaScript file that is loaded directly into i2 Notebook Optional tool views , which are HTML pages (and associated JavaScript/CSS/image files) that provide a user interface Operation At startup, the Liberty server scans the plug-in directories and reads the plug-in manifest files. It then provides information about all the available plug-in entry points to i2 Notebook. After i2 Notebook loads its user interface, it goes on to load the entry point JavaScript file for each available plug-in. The main() method of each entry point performs some actions against i2 Notebook. For example: Register new commands for i2 Notebook users to run Modify the ribbon to show the new commands Register to receive events from open charts (to control the state of commands based on selection, for example) Register command handlers (to launch a separate application when a command is invoked, for example) Register HTML files for tools that i2 Notebook might display in frames or separate browser windows When the registration work is done, the entry point signals completion to i2 Notebook. After all plug-ins signal completion, i2 Notebook acts upon the registrations and updates its configuration accordingly."
  },
  "guide/capabilities-overview.html": {
    "href": "guide/capabilities-overview.html",
    "title": "Capabilities of an i2 Notebook plug-in",
    "keywords": "Capabilities of an i2 Notebook plug-in The following is a non-exhaustive list of what an i2 Notebook plug-in can do: Change the commands that users see on the application ribbon and in context menus Add tabs to the application ribbon, and add commands to those tabs Create a user interface panel called a tool view Listen to changes to the chart, the user's view of it, and the selection on it Read data from the application , the chart , and the view Extend a chart schema by creating and modifying entity and link types Change the records and elements on a chart Change the style of elements on a chart Change which records and elements are selected on a chart Change the view of a chart There is no limit to how many of these capabilities a single i2 Notebook plug-in can provide."
  },
  "guide/commands.html": {
    "href": "guide/commands.html",
    "title": "Commands in the i2 Notebook web client",
    "keywords": "Commands in the i2 Notebook web client In the i2 Notebook web client, commands enable users to interact directly with your plug-ins. They can provide standalone functionality, such as sending data to an external API; or they can provide a way to open and close a tool view. In the plug-in entry point, you can create commands, choose where those commands are surfaced to the user as actions, and decide when those actions are to be enabled. To see worked examples of creating, surfacing, and removing multiple commands, see the tutorials . Surfacing commands You can surface commands in two areas of the i2 Notebook web client user interface: The application ribbon, on the Home tab or a custom tab . The chart's pop-up menu. Your plug-ins can surface or remove any available commands; not only the ones that you create. If you want to, you can arrange for your plug-in to surface commands from the ribbon in the pop-up menu. Positioning commands When you surface a command in a particular area, you can choose to position the resulting action relative to the other contents of that area. You can surface commands within existing groups, and create your own groups too. Removing commands As well as surfacing commands, you might also want to remove commands from the i2 Notebook web client's user interface, based on the user, the state of your plug-in, or something else. You can remove an action from a particular area of the application, or you can remove a command globally from all areas of the application. For more information about the facilities for interacting with commands, see the API documentation ."
  },
  "guide/data-access.html": {
    "href": "guide/data-access.html",
    "title": "Accessing data from a plug-in",
    "keywords": "Accessing data from a plug-in The i2 Notebook Web API provides access to a range of information about the application as a whole, and the data on the chart in particular. In your plug-in code, you can use the API to retrieve this data, as well as to engage with the events happening on the chart. Often, you'll need to do both at the same time. Application data Data that's relevant to the whole application, such as user , theme , and locale data, is available through both the entry point API and the tool view API . Both extend the IApplication interface that defines precisely what information is available. Because the API is asynchronous, however, it can take some time for application data to become available. A delay might be a problem when you are creating a tool view and you want to render something straight away, without waiting for the API. To address this issue, the i2 Notebook web client makes some application data available in the URL that it passes to a new tool view. Specifically, you can retrieve theme and locale data from the following query parameters: ?baseTextDirection ?flowDirection ?formattingLocale ?translationLocale ?themeName ?appearance No matter how you access it, application data is stable and cannot become inconsistent. It is available to your plug-in code at all times, in any context where you need it. Chart data Unlike application data, the data in and around an i2 Notebook chart can change quickly. For example, users can add and remove records from the chart, or change the selection, or change what the current view contains. To ensure that data does not change while you access or manipulate it from your plug-in code, you can only access chart data when i2 Notebook passes it to you in the arguments to callback methods. You can register for the i2 Notebook web client to call your methods in three different circumstances: As a handler for events that take place in the application, such as chart and selection changes As a handler that runs when a user invokes a command through the user interface As a handler that i2 Notebook calls when you specifically ask it to start a transaction Most handlers can receive a payload that implements the IApplicationContents interface , which provides access to all of the schema, visual, and record data for the chart. Some handlers can also receive contextual data, such as information about the changes to records that caused the handler to be called. Schema data Every chart in the i2 Notebook web client has a set of schemas that define what types of records can appear on the chart, and the rules that govern records' properties, notes, and security settings. In a handler that receives an application contents object, you can retrieve schema information from the IApplicationContents.chart.schema property . Visual data Visual data in the i2 Notebook web client comes in two flavors. First, there's what the chart itself looks like: its center, its extent, and its zoom level. That information is available as part of the application contents, through the IApplicationContents.chart.view property . The second kind of visual data is about the elements - that is, the nodes and edges - that users interact with on the chart surface. This information is also available from the application contents, through IApplicationContents.chart.elements and other properties. In addition to the application contents, some event handlers receive more specific visual data. For example, the payload of the chartselectionchange event includes an object that implements the ISelection interface , while the chartviewchange event provides direct access to the IChartView interface . Record data Every element on an i2 Notebook chart can contain records. Each record contains: Property data Metadata, including: Creation date and time Display name and principal name Notes, source references, and security information As with the other kinds of chart data, you can get information about all the records on the chart from the application contents, this time through IApplicationContents.chart.records and other properties. But like the visual data, some event handlers also receive more specific record data. For example, for small changes to the chart, the payload of the chartchange event contains an object that contains the records (and the elements) that changed. Additionally, the onExecute() method that runs when a user invokes a command can receive an IRecordsContext object representing the records that were selected at the time. Further reading For information about the types of events that your plug-ins can listen for, see the documentation for the ApplicationEventMap interface . To find out about setting up a transaction, see the runTransaction() method . For demonstrations of both, see the Angular , React , or Vue plug-in tutorials."
  },
  "guide/deploying-the-plugin.html": {
    "href": "guide/deploying-the-plugin.html",
    "title": "Adding your plug-in to an existing deployment of i2 Analyze",
    "keywords": "Adding your plug-in to an existing deployment of i2 Analyze After you've written, tested, and built a plug-in in your development environment, you can deploy it to an i2 Analyze server. Note: If you follow this procedure in a deployment that provides high availability, you must complete each step on every Liberty server in your environment before you move to the next step. On the server that hosts the i2 Analyze deployment, find the toolkit/configuration directory, and then navigate to the fragments/opal-services directory that it contains. If the opal-services directory does not already contain a plugins subdirectory, create one. Create a directory for the plug-in inside the plugins directory and copy all the plug-in files into it, so that the new directory contains your entry point and manifest at the top level. Run the following toolkit commands to update the deployed i2 Analyze server: setup -t stopLiberty setup -t deployLiberty setup -t startLiberty"
  },
  "guide/devproxy.html": {
    "href": "guide/devproxy.html",
    "title": "The plug-in development proxy",
    "keywords": "The plug-in development proxy In a production deployment of i2 Analyze, the i2 Notebook web client connects to the server and fetches the plug-ins that are deployed on that server: Developing any software, including an i2 Notebook plug-in, is an iterative process: we write code, try it out, write some more code, and so on. If we had to deploy our plug-in code to the i2 Analyze server each time around that iterative loop, it would cost a lot of time and disrupt other server users. The i2 Notebook SDK provides a more efficient environment in which to develop an i2 Notebook plug-in, through the use of a development proxy: The SDK proxy server sits in front of both the i2 Analyze server and your plug-in development environment (for example, a React, Angular, or Vue development server). The proxy passes most traffic through to the i2 Analyze server untouched, but it intercepts and modifies requests pertaining to plug-ins. In this way, the proxy server can add your in-development plug-ins \"on top\" of the i2 Analyze server environment. The effect of using the proxy is that you can layer a development plug-in on top of an existing i2 Analyze server without affecting that server; and you can use the plug-in live from your development environment without having to copy files around. Using the development proxy To use the development proxy, you just need to tell it where to find the i2 Analyze server and your in-development plug-ins, and then launch and connect to it. Configuring the proxy You provide the information that configures the proxy in a JSON file that can have any name, and be placed anywhere in your file system. The i2 Notebook SDK includes a JSON schema that enforces the structure and content of the development proxy configuration file. You can use the schema to assist during configuration from a compatible editor such as Microsoft Visual Studio Code. To reference the schema from your configuration file, include the \"$schema\" field as the first entry, like this: { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/devproxy.json\", ... } Development proxy configuration syntax The following fields are valid in an i2 Notebook development proxy configuration file: Name Mandatory? Description plugins Yes The URLs of the development plug-ins. This is an array of strings, with each URL pointing to the root of a plug-in (where the plugin.json file is located). port Yes The TCP port that the development proxy should listen on. For example, 4000 . server Yes The URL of the i2 Analyze server. skipHttpsCertificateVerification No A boolean ( true / false ) indicating whether to skip HTTPS certificate verification. The development proxy is unable to verify some HTTPS (SSL/TLS) certificates, so if either the i2 Analyze server or any plug-ins are running on https:// addresses, you must set this field to true to allow the proxy to run. Be aware that when this field is true , no certificate checking takes place. For example: { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/devproxy.json\", \"server\": \"http://i2analyze-server/opal/\", \"port\": 4000, \"plugins\": [\"http://localhost:3000\", \"http://localhost:4200\"] } Launching the proxy The only prerequisite for the development proxy is that you have at least version 12 of Node.js on your development machine. No other installations are required. If you named your configuration devproxy.json , then you can launch the proxy with: npx @i2analyze/notebook-sdk-plugin-proxy --config devproxy.json The proxy starts after a few seconds, with output similar to this: Then, while you're developing plug-ins, use the URL of the proxy in your web browser instead of the i2 Analyze server URL. The i2 Notebook web client that you see through the proxy includes your in-development plug-ins. Note: If you're using Create React App (CRA) or Vue CLI to develop your plug-in, be aware that these servers only support IPv4, and might not be compatible with the latest version of the proxy. To ensure compatibility with these servers, use the following command to launch the latest version of the proxy with the --forceIPv4 flag: npx @i2analyze/notebook-sdk-plugin-proxy@latest --config devproxy.json --forceIPv4 Alternatively, you can opt to use version 1 of the proxy specifically: npx @i2analyze/notebook-sdk-plugin-proxy@1 --config devproxy.json Proxy functions In addition to layering development plug-ins on top of an existing i2 Analyze server, the proxy provides the following functions: It validates any plugin.json (plug-in manifest) files. Any problems are reported to the proxy's console output. It simulates an accurate URL path that your plug-in will eventually be deployed to. (For example, the /opal/plugins/xxxxx/ paths in the above output.) This information helps you to identify problems with intra-plug-in paths before you get to deployment. It switches the i2 Notebook application into a \"stricter\" plug-in development mode that makes it more sensitive to incorrect API usage at a small performance cost. Shutting down and restarting the proxy When you no longer require the proxy, you can shut it down with the Ctrl+C keyboard combination. If you change the proxy configuration file, you must stop and restart the proxy manually. However, changes to plug-in manifest files, stopping and starting plug-in development servers, and restarting the i2 Analyze server do not require proxy restarts. Example use For a worked example of configuring and running a proxy for a simple i2 Notebook plug-in, see the tutorial ."
  },
  "guide/entrypoint.html": {
    "href": "guide/entrypoint.html",
    "title": "The plug-in entry point",
    "keywords": "The plug-in entry point Every i2 Notebook plug-in has an entry point , which is a JavaScript file that the i2 Notebook web client runs when it starts up. The entry point is responsible for several important aspects of a plug-in's functionality, including: Registering and surfacing commands Registering tool views Arranging access to chart data Telling i2 Notebook that initialization of the plug-in is complete Conventionally, the entry point file is named entrypoint.js , but you can choose its name and location when you specify it in the \"entryPointUrl\" field of the plug-in manifest. Accessing the entry point API To perform any of its tasks, the entry point must get access to the entry point API that the i2 Notebook web client makes available through the IEntryPointApi interface. To access the interface, you use the getEntryPointApi() function, which you can call in one of two ways: If you build the entry point file using a bundler such as webpack or parcel, you can import the getEntryPointApi() function directly from the @i2analyze/notebook-sdk package. If you use an unbundled entry point file, you can call the getEntryPointApi() function on the global notebook object. getEntryPointApi() is asynchronous. On completion, it returns an entry point API object, through which you can access the rest of the API. Checking compatibility When you call getEntryPointApi() , you can use the apiVersion parameter to check that the i2 Notebook web client you're communicating with supports the Notebook API version that you need. If the web client doesn't support the requested API version, you'll see an error message in the browser console. For example, imagine that you've been using version 2.4 of the i2 Notebook SDK to develop your plug-in, but that you then attempt to use it with a client that supports supports only API version 2.3. Your call to getEntryPointApi() might look like this: const api = await notebook.getEntryPointApi('00000000-0000-0000-0000-000000000000', '2.4'); This call will fail, because the web client doesn't support API version 2.4. On the other hand, if your call to getEntryPointApi() specifies version 2.2, then the call will succeed and you'll receive an entry point object that supports version 2. 3 of the API. Note: Requesting API version 2.2 doesn't guarantee that the object you receive supports exactly that version. On success, getEntryPointApi() always returns the latest version of the API that the Notebook web client implements. New minor versions of the Notebook API are backward-compatible with old versions. You can find out which version of the API an interface, a type, or other functionality was introduced in by checking for the Introduced keyword in the documentation or the @since indicator in the type definition file. For example: /** * An example type. * @since Major.Minor */ export type Message = string; See the related documentation topic for more information about i2's policy on SDK and API versioning . Registering commands The entry point is where you register the commands that your plug-in adds to the i2 Notebook web client user interface. You can arrange for a command to display a tool view that your plug-in implements, or to perform a task in its own right. By integrating with the web client's event system, you can make commands appear in the application ribbon and the chart pop-up menu. And you can disable or enable commands according to the current context. Registering tool views The entry point is also where you register the tool views through which your plug-in can display its own user interface, inside the i2 Notebook web client. Tool views consist of HTML pages and code for performing custom user tasks. In the entry point, you must provide the web client with the location of that code. Accessing chart data The IEntryPointApi interface provides full access to all chart data and metadata: the data that records contain, their visual representation, the schema that defines their types, and whether they are currently selected. The same interface gives your plug-in code the ability to subscribe to events in the i2 Notebook web client, so that your code is called when data or selections change. Entry point lifecycle After the entry point file loads, it must perform command and tool view registrations quickly. The i2 Notebook web client blocks its startup until these registrations are complete, so that it can render its user interface in one go without elements shifting around. When your registrations are complete, your entry point must call the initializationComplete() method on the IEntryPointApi interface. Failure to do so delays the start of the i2 Notebook web client, and causes your plug-in to be shut down. After the call to initializationComplete() , no further commands or tool views can be registered or surfaced."
  },
  "guide/formatter-bidirectional-text.html": {
    "href": "guide/formatter-bidirectional-text.html",
    "title": "The data formatter and bidirectional text",
    "keywords": "The data formatter and bidirectional text The i2 Notebook web client supports displaying text and data in different languages and according to the rules of different locales. The i2 Notebook Web API includes functionality to assist with maintaining the flow of the user interface and the direction of the text it contains; and with keeping consistency between your plug-ins and the application itself. Formatting data for display In your plug-in code, you might need to format record data according to formatting and translation locales (to comply with pluralization rules, for example) so that it is always displayed appropriately. The API provides the IFormatter interface , whose methods can help you with the formatting process. Using the API is always better than manipulating values directly. Maintaining user interface flow and text direction The i2 Notebook application supports languages that use right-to-left writing systems, such as Arabic and Hebrew. The API provides the ILocale interface , whose properties provide information about the application's user interface flow direction, the user's chosen text direction, and precise locales for formatting and translation. Controlling bidirectional text using Unicode Sometimes, a piece of text in a language that uses a right-to-left script can include numbers or text in Latin or another script that flows from left to right. In order for the application to display text correctly in such circumstances, you need to tell it what direction applies to different parts of the text. The i2 Notebook Web API provides the wrapForBidi() method to address this issue. This method uses invisible Unicode characters to \"wrap\" sections of text so that the application knows how to display them correctly. The Angular , React , and Vue tutorials address the issue of bidirectionality, and demonstrate using wrapForBidi() to control it."
  },
  "guide/manifest.html": {
    "href": "guide/manifest.html",
    "title": "The plug-in manifest",
    "keywords": "The plug-in manifest Every i2 Notebook plug-in requires a manifest , which is a JSON file that provides configuration settings for the plug-in. The file must appear at the root of the plug-in directory, and it must be named plugin.json . Most of the settings that the manifest can provide are mandatory. The file must contain the following information: A unique identifier for the i2 Notebook plug-in The version of the plug-in A name for the plug-in, to appear in diagnostic messages for plug-in lifecycle events The path to the entry point JavaScript file to load, relative to the manifest Optionally, the manifest can also specify changes to i2 Notebook's content security policy, so that the plug-in can access content on servers that the policy would otherwise block. Creating a manifest The i2 Notebook SDK includes a JSON schema that enforces the structure and content of plug-in manifests. The Liberty server validates your manifests when it reads them, but you can also use the schema to assist during manifest creation from a compatible editor (such as Microsoft Visual Studio Code). The file name of the schema is plugin-manifest.json . To reference it from your plugin.json file, include the $schema field as the first entry in the manifest, like this: { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/plugin-manifest.json\", ... } After you set this field, editors that support JSON schemas provide inline help to ensure that mandatory fields in the manifest are present and populated with valid values. Plug-in manifest syntax The following fields are valid in an i2 Notebook plug-in manifest: Name Mandatory? Description entryPointCsp No Directives to add to the HTTP Content-Security-Policy response header for the entry point JavaScript file. entryPointUrl Yes The URL of the entry point JavaScript file, relative to the manifest file. name Yes The name of the plug-in, which might appear in status messages. pluginId Yes The identifier of the plug-in, as a lower-case GUID . pluginVersion Yes The version of the plug-in, typically in x[.y[.z]] format. toolViewCsp No Directives to add to the HTTP Content-Security-Policy response header for tool view files. For example: { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/plugin-manifest.json\", \"pluginId\": \"01234567-89ab-cdef-0123-456789abcdef\", \"pluginVersion\": \"1.0\", \"name\": \"My i2 Notebook plug-in\", \"entryPointUrl\": \"./entrypoint.js\", \"toolViewCsp\": { ... } } Content security policy directives By default, i2 Notebook's content security policy (CSP) prevents plug-ins from accessing some kinds of information on servers that are not the i2 Analyze server. However, and especially if your plug-in uses tool views, you might need to use code, fonts, or other data that are located on another server. In such cases, you can use the toolViewCsp field to allow access to that server from tool views. In rarer cases (but for the same reasons), you might need to change the CSP that applies to the entry point JavaScript file. For example, if you want to connect to a remote service on the execution of a command, you can use the entryPointCsp field to allow access to the service for that purpose. For more information about CSP directives and how to choose which ones you need, see the documentation at MDN Web Docs . In the manifest, you populate entryPointCsp and toolViewCsp with fields whose names match CSP directive names, and whose values are the URLs of servers that your plug-in will access, or are drawn from a small group of keywords: { ... \"entryPointCsp\": { \"connect-src\": \"http://external-server-to-access-from-entry-point\", }, \"toolViewCsp\": { \"connect-src\": \"http://external-server-to-access-from-tool-view\", \"img-src\": \"http://external-server-that-provides-images\" } } Note: To specify more than one value in a \"connect-src\" or \"img-src\" field, you can add space-separated values between the double-quote characters. For example: \"http://external.com http://example.com\" The set of available CSP directives can and does change over time. Especially if your plug-ins make regular use of CSP directives, ensure that you stay abreast of updates to the MDN documentation."
  },
  "guide/mutation-commands.html": {
    "href": "guide/mutation-commands.html",
    "title": "Supported mutation operations",
    "keywords": "Supported mutation operations As Changing data from a plug-in describes, the i2 Notebook Web API provides the ability to write data to the chart and to change the state of the i2 Notebook application. The types of changes that you can make through the API are: Record creation Record editing Record removal Item type creation Item type editing Selection changes Node position changes Node and edge style changes View changes A single mutation can contain any number of these changes, in any combination. The changes are typically applied when the mutation itself is committed. The i2 Notebook SDK includes a mutations tutorial that demonstrates how to make some of these changes. Creating and editing records The mutation handler that you pass to IApplication.runTrackedMutations() can create entity and link records through the addEntityRecord() and addLinkRecord() methods of the ITrackedMutations object that it receives. To each method, you provide the features of the new record including its item type, its notes, its security settings, and values for its properties. Both add methods return a \"pending\" record object that represents the new record in the mutation, before it is added to the chart. This object implements the IRecordEditor interface, which allows you to make further edits before you commit. To make changes to a record that is already on the chart, you can use the ITrackedMutations.editRecord() method, which also returns an object that implements IRecordEditor . Note: New records, and changes to existing records, do not exist on the chart (and will not be seen in IChart collections) until you commit the mutation. Pending records and record editors are only valid in the mutation handler where they were created. Value factories When you create or edit a record from a mutation handler, you can provide values for its properties. Some of these values - temporal and geospatial ones, for example - have reasonably complex structures. To help you construct valid values, ITrackedMutations.valueFactory provides an IValueFactory object that contains helper methods for creating objects of the following types: IGeopoint IDecimal ILocalDate ILocalDateTime ILocalTime ISecuritySettings IZonedDateTime Removing records and elements Just as a mutation handler can create and edit records, it can also remove them from the chart, through the ITrackedMutations.removeRecords() method. You can also remove visual nodes and edges from the chart by calling the ITrackedMutations.removeElements() method. Doing so implicitly removes any records that an element contains, while removing a node also removes any connected edges. Creating and editing item types When you create a record, you specify its item type. Often, you will use an item type that already exists in the chart schema, but you can also use a tracked mutation handler to create item types and to edit existing ones. For item types that you create, you can configure their behavior and add and edit property types both during and after creation. For existing item types, you can only add or edit custom property types. To create a custom entity type in the chart schema, you call the ITrackedMutations.addEntityType() method. To create a custom link type, you call ITrackedMutations.addLinkType() . You can use the ITrackedMutations.editItemType() method to modify the custom item types that you create, or to add custom property types to existing item types. There is no method to remove a custom item type, although you can use the undo action to reverse creation if you do so immediately afterwards. For information about the item types that are added or changed in the chart schema, you can: Check the chartSchemaChange object in the mutation result. Listen for the chartschemachange event from the application. Changing selection You can change the selection state of the chart through tracked and untracked mutation handlers. ITrackedMutations and IUntrackedMutations both inherit IMutationsBase.selection , which provides an implementation of the ISelectionEditor interface. Note: Selection changes in untracked mutations are not explicitly added to the undo stack, but the next tracked mutation can capture the current selection as part of its undoable state. Moving nodes on the chart From a tracked mutation handler, you can arrange the nodes on the chart by changing their positions one-by-one, or as a group: Set the position of a single node directly by using the ITrackedMutations.setNodeCenter() method. Move a selection that includes nodes by an offset through the ITrackedMutations.moveSelectedNodesRelative() method. Changing the style of nodes and edges on the chart You can change the visual appearance of node and edges displayed on a chart by using the ITrackedMutations.editNode() and ITrackedMutations.editEdge() methods. Change the size of a node by calling INodeEditor.setSize() Change the colors of edges and nodes by calling INodeEditor.setColor() or IEdgeEditor.setColor() . Local style and label changes You can use untracked mutations ( IUntrackedMutations ) to make local changes to the appearance of nodes and edges on the chart. Changes like these are not sent to the server, and exist only on the browser page displaying the current chart. For example, you can set the label of an edge summary by using the IUntrackedMutations.editEdgeSummary().setLabel() method. Untracked mutations are also not added to the undo/redo stack, which makes them useful in plug-ins that want to alter the appearance of chart elements temporarily without affecting the user's workflow. If you want an untracked mutation to survive an undo operation, you can reapply it in response to a chartchange event. Changing the view Finally, you can use tracked or untracked mutations to change the current view of the chart by moving its center point or changing the zoom level. ITrackedMutations and IUntrackedMutations both inherit IMutationsBase.view , which provides an implementation of the IViewEditor interface. Validation The parameters of all calls to mutation methods are validated to ensure that the correct value types are passed, and that any record and type identifiers are associated with existing objects. A validation failure results in an error notification in the i2 Notebook user interface that provides information about which argument was incorrect."
  },
  "guide/mutations.html": {
    "href": "guide/mutations.html",
    "title": "Changing data from a plug-in",
    "keywords": "Changing data from a plug-in The i2 Notebook Web API provides the ability to write data to the chart, either by adding new records or by editing or deleting existing records. The API also allows you to change which records on the chart are selected, and to modify the view state of the chart. All changes to the chart take place asynchronously, and you must perform them using transactions to ensure that they do not conflict with changes made by other plug-ins or users. In the i2 Notebook Web API, you use mutations for this purpose. Mutations are transactions that run as a single atomic action, and contain one or more operations that make changes to chart data or application state. When asked to start a mutation transaction, the application calls a mutation handler that you provide, which receives the following parameters: A parameter of type IApplicationContents , which provides read access to the visual and record data for the chart, as well as to its schema. A parameter that implements one of the ...Mutations interfaces, which provides access to mutation operations that allow changes to record and application state. Commit and rollback Just like database transactions, when your mutation handler finishes, it must indicate whether the mutation operations that it created should be \"committed\" and applied to the chart and application, or \"rolled back\" and not applied. Committing a mutation causes operations in the handler to be applied to the chart. Some operations, such as selection and view changes, are applied immediately. Other operations, such as writing record data, are sent to the server before control returns to the application. Mutation reports When you commit or roll back a mutation, you can opt to provide information that is displayed to the user as a notification pop-up. The ISuccessReport and IDetailedReport define objects that you can return from mutation handlers. Note: The fate of the transaction (commit or rollback) and the report that the user sees (success, failure, or nothing) are independent from each other. Reporting an error to the user is often associated with rolling back the mutation transaction, but you can combine a transaction commit with an error report, or a rollback with a success report. i2 Notebook adheres to two standard design behaviors - demonstrated most obviously in the built-in Expand functionality - that provide a helpful and unobtrusive user experience when you follow them in your own plug-ins: It's not always necessary to provide an explicit success report to the user. For a command that adds data to the chart, the success of the operation is often obvious from the fact that data has been added to the chart. Only provide an explicit \"success\" report if there is something else of value to report to the user. If a command is supposed to add data to the chart but after starting the mutation you discover that there is no (new) data to add, then roll back the transaction and provide an explicit report to the user to indicate that there was nothing to add. (In these circumstances, reporting nothing to the user would leave them uncertain whether the command even ran, harming their confidence in the application and your plug-in.) Deciding whether \"nothing was added\" is a \"success\" or a \"failure\" will depend on factors such as whether the lack of new data is a normal situation or caused by an error. Tracked and untracked mutations i2 Notebook supports two different types of mutation: Tracked mutations , which users can undo, and which you start by calling IApplication.runTrackedMutations() . Your tracked mutation handler receives an ITrackedMutations object, which provides a full set of chart mutation operations. A committed, tracked mutation collects all of its operations into a single entry in the application undo stack. A user can undo all of the changes from a tracked mutation with a single undo action. Untracked mutations , which users cannot undo, and which you start by calling IApplication.runUntrackedMutations() . Your untracked mutation handler receives an IUntrackedMutations object, which provides a more restricted set of chart mutation operations. You can use an untracked mutation to change chart selection, chart view position and zoom level, and some other visual aspects of entities and links on the chart. The operations in an untracked mutation take place without creating an entry in the application undo stack. If your command only affects selection or the view of the chart, then consider implementing it with untracked mutations. For all other commands, use tracked mutations. Cancelation and status messages If you implement a mutation handler as an asynchronous function, the handler can be canceled through the ICancelation object that it receives. Triggering the cancelation automatically rolls back the mutation. While a mutation handler is running, the application can show status messages that your handler provides by using the status property of the ITrackedMutations or IUntrackedMutations interface. For example: // Use an asynchronous mutation handler so that we can wait for the external data. // During the fetch, the application shows a spinner, a message, and a cancel button. getToolViewApi().runTrackedMutations(async (application, mutations, cancelation) => { do { // Fetch some external data, passing in the cancelation signal so that the fetch // is aborted if the signal is. After each fetch, the external resource returns // an object that indicates whether there's more data to fetch. const response = await fetch('http://some-external-service.com', { signal: cancelation.signal }); const responseJSON = response.json(); // Update the application progress message. mutations.status.setMessage('Fetching data'); // We've got the data, so we can create some mutation commands with it. mutations.addEntityRecord(...); // Only carry on with the loop if the signal is not aborted. } while (responseJSON.moreDataToFetch && !cancelation.signal.aborted); // If the signal is aborted, roll back mutations and show a notification. if (cancelation.signal.aborted) { return { type: 'rollback', report: { type: 'warning', title: 'Aborted', details: 'Data fetch aborted' } } } return { type: 'commit', actionDisplayName: 'Fetch data' } });"
  },
  "guide/samples.html": {
    "href": "guide/samples.html",
    "title": "Samples",
    "keywords": "Samples This section provides working code samples that demonstrate specific features of the i2 Notebook SDK. Basic plug-in Demonstrates creating a basic plug-in that visualizes geospatial data from chart records on an external map. samples/basic-plugin Plug-ins that use UI frameworks Demonstrates creating a plug-in with different frameworks, implementing a simplified Record Inspector. Angular samples/angular-plugin React samples/react-plugin Vue samples/vue-plugin Mutation plug-in Demonstrates writing new records to a chart, arranging the elements that contain those records, and updating the view. samples/mutation-plugin Color plug-in Demonstrates discovering and changing the colors of particular nodes on a web chart. samples/color-plugin Item type plug-in Demonstrates adding custom item types to the chart schema and listening for schema change events. samples/item-type-plugin Dialog sample plug-in Demonstrates how to use the showDialog API to create interactive modal dialogs. samples/dialog-sample-plugin Related Learning For step-by-step tutorials that guide you through building complete plug-ins, see Tutorials ."
  },
  "guide/tabs.html": {
    "href": "guide/tabs.html",
    "title": "Multiple tabs in the application ribbon",
    "keywords": "Multiple tabs in the application ribbon Starting with version 4.4.4.5 of i2 Analyze, the i2 Notebook web client supports multiple tabs in the application ribbon, providing greater control over how and where you surface commands. This enhancement allows you to improve the user experience by categorizing related features into separate tabs, making navigation more intuitive. Adding a custom tab In the plug-in entry point, you can add a tab by calling IApplicationRibbon.addTab() . The method creates a new tab in the application ribbon, providing a new command area where you can surface commands individually or group them for better organization. const ribbon = api.commands.applicationRibbon; const customTab = ribbon.addTab({ id: 'customTabId', label: 'Insert', }); Adding commands to a tab After you create the tab, you can add commands to it. The commands that you add can be system commands or custom commands that you define in your plug-in. You can add the same command to multiple tabs, or move commands from one tab to another. For example: ribbon.homeTab.remove(api.commands.systemCommands.toggleLists); customTab.surfaceCommands( api.commands.systemCommands.toggleStyling, api.commands.systemCommands.toggleLists ); This code removes the toggleLists command from the Home tab and adds it to the newly created tab. On the other hand, the toggleStyling command is now surfaced in both the Home tab and the custom Insert tab. Grouping commands together in a tab Custom tabs support groups of commands in exactly the same way that the Home tab does. customTab .addGroup({ id: '6878b309-2dfd-4431-9976-1a79d7c7b43a', icon: { type: 'inlineSvg', svg: commandSvg, }, label: 'Revert', isCollapsed: true, }) .surfaceCommands(api.commands.systemCommands.undo, api.commands.systemCommands.redo); This code creates a group in the tab called Revert, and adds the undo and redo system commands to it. The new group is collapsed by default. Positioning tabs When you add a tab to the ribbon, you can specify its position relative to other tabs. For example, if you want to place the custom Insert tab before the Home tab, you can do so like this: const ribbon = api.commands.applicationRibbon; const homeTab = ribbon.homeTab; const customTab = ribbon.addTab( { id: 'customTabId', label: 'Insert', }, homeTab ); In this code, homeTab refers to the existing Home tab. By passing it as the second argument to addTab() , the Insert tab is positioned before the Home tab in the application ribbon."
  },
  "guide/toolview.html": {
    "href": "guide/toolview.html",
    "title": "Plug-in tool views",
    "keywords": "Plug-in tool views A tool view is a custom web page that provides the user interface for an i2 Notebook plug-in. The i2 Notebook web client loads and displays tool views right alongside its own user interface elements. The code in a tool view can get access to data in the application through the tool view API, making tool views a convenient way for a plug-in to provide extra functionality to users. You can read, present, and allow users to interact with data all from the same part of your project. What a tool view can do Tool views have direct access to the data on the chart, including the visual elements and the underlying record data. As a result, they can process and analyze that data however you choose. For example, you might create a tool view that uses custom processing to filter the items on a chart, or performs complex data analysis, or integrates with a third-party user interface. Creating a tool view A tool view consists of one or more HTML pages, as well as any resources that those pages require. The tutorials in this SDK provide worked examples of how you might add a tool view to your i2 Notebook plug-in. Note: The tutorials use the Angular, React, and Vue frameworks to simplify some aspects of writing tool views. When you have the source code for a tool view in place, you create it in the plug-in entry point by calling the createToolView() method on the IEntryPointApi interface. A plug-in can create as many tool views as it needs. To enable users to display a tool view, you must create and register a command for doing so, and then surface that command in the i2 Notebook web client user interface. Tool view lifecycle i2 Notebook web client users can open and close a tool view whenever they choose. As a result, a single tool view HTML page might be reloaded multiple times in the course of a single session. A tool view is also reloaded when it is floated or docked, or moved from one part of the user interface to another. Without intervention, any state that a user has built up inside a tool view is lost when it is reloaded. When the lifetime of a particular instance of a tool view is potentially quite short, this behavior is likely to frustrate users. To maintain the state of a tool view, the i2 Notebook Web API provides a volatile store that can save and recover state in response to reload events."
  },
  "guide/tutorials/angular-plugin.html": {
    "href": "guide/tutorials/angular-plugin.html",
    "title": "Creating an Angular plug-in",
    "keywords": "Creating an Angular plug-in This is a long tutorial that will take a couple of hours to work through. It's designed to function more like a complete hands-on workshop than a simple 'Hello World' example, and takes you from nothing to creating a working (but simplified) replacement for the Record Inspector, using Angular. The tutorial covers the following concepts: Configuring Angular correctly Starting a plug-in project Running the i2 Notebook plug-in development proxy Creating and surfacing commands in the application ribbon and the pop-up menu Subscribing to change and selection events, and using them to control the state of commands Creating a tool view Accessing chart data Accessing user data, such as theme choice and locale Formatting, localization, and right-to-left language support Common mistakes when writing plug-ins, with solutions for fixing them And it does so as you build the example through these stages: Create the simplest possible plug-in, without a custom user interface. We'll get it working in a development environment, and then add a ribbon command that accesses chart data and sends some of it to an external website for viewing. Create a custom tool view, and learn about configuring Angular paths and working with a Content Security Policy. Do some basic styling and theming, and look at integrating the i2 Notebook web client's change notifications with Angular's change detection system. Access property data, learn about the facilities that the API provides to assist with consistent formatting, and display images and links to 360 views. (Briefly) cover issues with right-to-left and bidirectional text. Add record-navigation support to the tool view, and learn about restrictions on when you can access i2 Notebook data and best practices for working within those constraints. Learn about persisting tool view state, so that the user interface doesn't reset itself when being docked or floated. Remove the built-in Record Inspector and replace it with our own. Deploy our completed plug-in onto an i2 Analyze server. You can find a full version of the source code for this tutorial in the samples/angular-plugin folder. Prerequisites This tutorial requires a running instance of i2 Analyze on which you have permission to use the i2 Notebook web client. To follow the tutorial, you must install at least version 12 of Node.js on your development machine. For downloads and more information about Node.js, visit the project website at https://nodejs.org . You'll also need to install the Angular CLI, which you can do by following the instructions at https://angular.io/cli . The tutorial also requires you to create GUIDs for a number of its elements. The project files use some sample fixed GUIDs ( 00000000-0000-0000-0000-000000000001 , 00000000-0000-0000-0000-000000000002 , and so on), but you should always create real GUIDs for real projects. Note: A suitable GUID generator is available online at https://www.guidgenerator.com . Create a basic UI-free plug-in A basic i2 Notebook plug-in has the same requirements as a more complex one: in the plug-in directory, you must create the manifest and the entry point that enable the i2 Notebook web client to load and integrate your plug-in. The first part of this tutorial covers those requirements, and also explains how to set up both your development environment and a local Node.js server. Create an empty Angular application with ng new . For example: ng new plugin-ng The command will ask whether you want to use Angular routing. You don't need it for this tutorial, so choose No (the default). It will also ask which stylesheet technology you want to use. Any is fine, but raw CSS builds more quickly than the others, and for this tutorial we'll use css . Don't start the server yet. Change directory to the new plug-in. For example: cd plugin-ng Add the i2 Notebook SDK package: npm install @i2analyze/notebook-sdk The package contains a type library that enables inline assistance in your IDE. Now you're in position to write the plug-in itself, starting with the manifest. Using an IDE such as VSCode, create a file named plugin.json in src , with the following contents: { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/plugin-manifest.json\" } The schema enforces the structure and content of the file. For more information, see the plug-in manifest documentation. Continue to populate the manifest with values for \"name\" , \"pluginId\" , and \"pluginVersion\" ; and set \"entryPointUrl\" to \"./entrypoint.js\" . For example: \"name\": \"My i2 Notebook plug-in\", \"pluginId\": \"00000000-0000-0000-0000-000000000001\", \"pluginVersion\": \"1.0.0\", \"entryPointUrl\": \"./entrypoint.js\" Next, we can create the entry point. Add a file named entrypoint.js to the src directory, and populate it: // @ts-check /// <reference types=\"@i2analyze/notebook-sdk\" /> async function main() { const api = await notebook.getEntryPointApi('00000000-0000-0000-0000-000000000001', '1.1'); api.logger.info('plug-in running'); api.initializationComplete(); } void main(); Through this code, the plug-in retrieves the version of the entry point API that it wants to use, and uses it to declare that it has finished initializing. The GUID here must match the one in the plug-in manifest. If you enter the code by hand, you'll see how the type library provides auto-completion as you go. Modify angular.json to configure the Angular builder to treat plugin.json and entrypoint.js as assets: to \"projects\">\"plugin-ng\">\"architect\">\"build\">\"options\">\"assets\" , add \"src/entrypoint.js\" and \"src/plugin.json\" . Back on the command line, start the Angular project in development mode: npm start . Make a note of the connection address. For example, http://localhost:4200 . We'll need that to connect to, and reference, our plug-in. Navigate to the project in a web browser. You should see an Angular demonstration page. Confirm that plugin.json and entrypoint.js are served correctly from their respective paths (for example, http://localhost:4200/plugin.json and http://localhost:4200/entrypoint.js ). Test the plug-in in the i2 Notebook web client While we're developing and testing a plug-in, we won't deploy the plug-in directly to the i2 Analyze server. Instead, we'll use the i2 Notebook SDK plug-in development proxy to add our plug-in to an existing i2 Analyze deployment without needing to modify it. Anywhere on your workstation, create and populate a file named devproxy.json : { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/devproxy.json\" } This forms the basis of the configuration file for the development proxy. Add a value for \"server\" that is the URL of an existing i2 Analyze deployment. For example, \"http://localhost:9082/opal/\" . Add a value for \"port\" to specify the port that the development proxy should listen on. For example, 4000 . Add a value for \"plugins\" that contains the root URL of your plug-in. For example, [\"http://localhost:4200/\"] for the server that we configured above. On the command line, navigate to the folder that contains the configuration file, and run the i2 Notebook plug-in development proxy (no installation is required): npx @i2analyze/notebook-sdk-plugin-proxy --config devproxy.json Open the proxy URL in a browser, log in to the i2 Notebook web client and open a new chart. For example, http://localhost:4000/opal/ . Open the browser's developer console and check for our plug-in's message being logged: If you see this message, then the plug-in is working correctly. Add a ribbon command to the plug-in So far, you have a plug-in that's being loaded into the i2 Notebook web client - but it doesn't do anything. Next, we'll make the plug-in add a command that opens geospatial locations in Google Maps to the application ribbon. In entrypoint.js , just before the call to initializationComplete() , create a command: const viewOnMap = api.commands.createCommand({ id: '00000000-0000-0000-0000-000000000002', name: 'View on map', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><rect width=\"8\" height=\"8\" x=\"4\" y=\"4\"/></svg>', }, type: 'records', onExecute(payload) {}, }); Straight afterward, surface the command on the ribbon's Home tab, just after the Information Store group: api.commands.applicationRibbon.homeTab .after(api.commands.applicationRibbon.homeTab.systemGroups.searchInfoStore) .surfaceCommands(viewOnMap); Reload the i2 Notebook web client, and check that the action is visible in the application ribbon. Clicking the button won't do anything yet because we haven't implemented onExecute() , so let's do that now. Create this helper function at the top level of the entrypoint.js file: /** * @param {import(\"@i2analyze/notebook-sdk\").data.IReadOnlyCollection<import(\"@i2analyze/notebook-sdk\").records.IChartRecord>} records */ function findGeospatialValue(records) { for (const record of records) { for (const propertyType of record.itemType.propertyTypes) { if (propertyType.logicalType === 'geospatial') { const property = record.getProperty(propertyType); if (property !== undefined && !record.isValueUnfetched(property)) { return /** @type {import(\"@i2analyze/notebook-sdk\").data.IGeoPoint} */ (property); } } } } return undefined; } This function performs a simple scan of the records it receives, looking for a non-empty geospatial property that it returns if it finds one. Note: The /** @type {import...} */ and /** @param {import...} */ code helps the JavaScript type system to understand what we're working with, which enables auto-completion in the rest of the code. If we used TypeScript to create our entrypoint.js file, we'd use import type statements instead. We can now use the helper function in the implementation of onExecute() that we left empty in the call to CreateCommand() . We'll take the latitude and longitude to a new Google Maps window: onExecute(payload) { const property = findGeospatialValue(payload.records); if (!property) { return; } window.open( `https://www.google.com/maps/@${property.latitude},${property.longitude},18z`, \"_blank\" ); }, Reload the web client again, select an element with a geospatial property, and try the command. Google Maps should open at the relevant location. Make the command sensitive to selection There's a problem with our command: the button is enabled even if the selection doesn't actually contain a geospatial property. That would be misleading for a user, but we can fix it by taking control of the surfacing of the command in the user interface. After the onExecute() parameter to createCommand() , add an onSurface() function definition: onSurface(action, eventApi, signal) { eventApi.addEventListener( \"recordscontextchange\", (context) => { action.setEnabled(!!findGeospatialValue(context.records)); }, { dispatchNow: true, signal } ); }, There are a few things to notice here: i2 Notebook calls our onSurface() function with an action object that represents the user interface control to which the command is bound each time it is surfaced. A single command might be surfaced in several places, and you can use the action object to react differently in each of them. The function also receives an eventApi object through which it can listen to changes in the records to which the action is being applied; and a signal object that indicates when this particular surfacing of the command is being removed. In our implementation, we subscribe to the recordscontextchange event, which tells us when the current records change. When they do change, we set the enabled state of the action to a value based on whether there is a geospatial value in the current records. Event listeners are normally invoked when the event occurs. However, we don't want to wait for a recordscontextchange event before we run our setEnabled() code, so we specify dispatchNow: true to invoke the callback immediately, without waiting for the event. This in turn causes our action to be enabled or disabled correctly, right away. We forward the signal to the event listener so that it unsubscribes automatically from the recordscontextchange event when the action is unsurfaced. Reload the i2 Notebook web client. The button in the application ribbon is now enabled only when a geospatial property exists in the selection. Use the command in more than one place As well as adding it to the ribbon, we can add exactly the same command to the chart pop-up menu with a single line of code. After the existing call to surfaceCommands() , add: api.commands.chartPopupMenu.surfaceCommands(viewOnMap); Reload the web client. The same command, with the same enablement rules, is now present in the chart's pop-up menu. Create a tool view The first part of this tutorial didn't use any features from the Angular framework! That changes now, as we use Angular to create a custom user interface for our plug-in. On the command line, navigate to the project directory and run the following command to create an Angular component called 'toolView1': ng generate component toolView1 Navigate to the src/app folder inside the project directory, and replace the contents of the generated app.component.html file with: <div> <app-tool-view1></app-tool-view1> </div> In a web browser, load the root page ( / ) from your Angular development environment ( http://localhost:4200/ ). You should see the default message, \"tool-view1 works!\". We'll now turn the Angular component into an i2 Notebook tool view. In src/entrypoint.js , insert a line before the call to initializationComplete() : const toolView = api.createToolView('My tool view', './'); This line declares a tool view by specifying its display name ('My tool view') and its location relative to the entry point , which is ' ./ '. Still in the entry point code, tell i2 Notebook to create a command that opens and closes the tool view: const toggle = api.commands.createToolViewToggleCommand( { id: '00000000-0000-0000-0000-000000000003', name: 'My tool', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><circle cx=\"8\" cy=\"8\" r=\"4\" /></svg>', }, }, toolView ); Finally, surface the command in the application ribbon's Home tab. This code places it after the View on map command that we developed above: api.commands.applicationRibbon.homeTab.after(viewOnMap.id).surfaceCommands(toggle); Reload the i2 Notebook web client, and you'll see the new button in the ribbon. Click it to display the tool view in the user interface; click it a second time to hide it again. However, the tool view itself doesn't look right, because the .js and .css files aren't being loaded correctly. To see what's happening, open up the developer tools in your browser, and look at the network diagnostics. When you click to display the tool view, you'll see that the requests for files such as main.js and styles.css are failing. We'll fix those problems in the next section. Configure Angular to serve content from the correct place New Angular applications are hard-wired to serve their content from the root ( / ) of the server they're running on. i2 Notebook plug-ins, on the other hand, are served from <context root>/plugins/<some directory> on the i2 Analyze server, and our plug-in development proxy is simulating that for us. When you display the Angular tool view, the .html file loads correctly, but the .css and .js files fail to load because the .html file refers to them relative to the root - for example, /styles.css . This would work if the plug-in were served from / , but as it won't be, we need to make Angular generate the paths differently. Edit angular.json . At the path \"projects\" > \"plugin-ng\" > \"architect\" > \"build\" > \"options\" , add a \"baseHref\" field and set its value to \".\" . This setting tells Angular to use paths relative to . instead of / , which causes generated HTML files to refer to their .css and .js files in the same folder, which is exactly what we want for this example. Restart the Angular development server. (This is always necessary after you edit angular.json .) Reload the i2 Notebook web client and try the tool view again. The 'tool-view1 works!' text should now be displayed in the tool view panel. However, if you're using a dark theme in the application, it might be hard to see the black text on a dark background. We'll fix that by adding some simple theming support, but before we can do so, we must fix another problem. Look in the browser console, and you'll see some warnings about the browser refusing to apply inline styles because of a violation of a Content Security Policy (CSP) directive. We must fix that before we'll be able to apply any styling successfully. Configure the Content Security Policy i2 Notebook runs with a heavily locked-down Content Security Policy (CSP) to limit the attack surface. Angular, however, uses features (specifically, inline styling) that require a looser CSP. We can use the plug-in manifest to loosen the CSP for our tool view. Edit the src/plugin.json file and add a \"toolViewCsp\" section: \"toolViewCsp\": { \"style-src\": \"'unsafe-inline'\" } Once again, reload the i2 Notebook web client and display the tool view. The browser console will now be free of styling CSP errors, so we can proceed with some styling. Note: If you open the developer tools at this point and look at the console, you will still see other CSP errors where Angular is trying to connect to sockjs-node/info . These violations are due to the Angular application developer environment, and you can safely ignore them. Create a service that provides the tool view API We'll need to access the i2 Notebook tool view API from multiple components in our Angular application. Also, because fetching the API is asynchronous, we'll want to prevent the Angular application from loading until it is ready and available to use. To address both of these requirements, we can make the tool view API available through an Angular service. Back on the command line, run the following command to create an Angular service: ng generate service toolViewApi The command places a skeleton file named tool-view-api.service.ts in the src/app directory. Edit tool-view-api.service.ts , replacing the file contents with the following: import { Injectable } from '@angular/core'; import { getToolViewApi, toolview } from '@i2analyze/notebook-sdk'; @Injectable({ providedIn: 'root', }) export class ToolViewApiService { constructor() {} private api!: toolview.IToolViewApi; async init() { this.api = await getToolViewApi(); } public getApi() { return this.api; } } This service has an init() method that we'll call to set up the API, and a getApi() method that we can call from our components to acquire and use the API. In tool-view-api.service.ts , after the ToolViewApiService class declaration, create an exported function named initializeToolViewApiServiceFactory() : export function initializeToolViewApiServiceFactory(service: ToolViewApiService) { return () => service.init(); } We're going to use this function in the next step to wait until the service is initialized before we declare that our Angular application is ready to load. In src/app/app.module.ts : Add the APP_INITIALIZER import from @angular/core right at the top of the file: import { APP_INITIALIZER, NgModule } from '@angular/core'; Add imports for initializeToolViewApiServiceFactory and ToolViewApiService from ./tool-view-api.service : import { ToolViewApiService, initializeToolViewApiServiceFactory, } from './tool-view-api.service'; In the @NgModule decorator, after imports , add a providers section: @NgModule({ declarations: [AppComponent, ToolView1Component], imports: [BrowserModule], providers: [ { provide: APP_INITIALIZER, useFactory: initializeToolViewApiServiceFactory, deps: [ToolViewApiService], multi: true, }, ], bootstrap: [AppComponent], }) This section creates a provider for an initialization function for our Angular application. The application only loads the AppComponent when initialization is complete and we have fetched the tool view API. Configure the tool view for i2 Notebook web client themes The i2 Notebook web client supports a number of visual themes. If you're using a light theme, the \"tool-view1 works!\" text should have been clear in your tool view. But if you're using a dark theme, the text was probably harder to read. We haven't yet configured the tool view to respect and respond to themes. Note: To change the theme in the i2 Notebook web client, go to the user menu and select Settings to open the Settings dialog. To style our tool view correctly, we need to access the theme information. At the top of the src/app/app.component.ts file, import ToolViewApiService from ./tool-view-api.service : import { ToolViewApiService } from './tool-view-api.service'; Use dependency injection to inject ToolViewApiService into the AppComponent class, and populate it: export class AppComponent { constructor(service: ToolViewApiService) { const toolViewApi = service.getApi(); } } Theme information is now available from toolViewApi.theme.appearance , which tells us if the current theme is light or dark . With the theme information, create a variable that we can use to set the component styling: export class AppComponent { public readonly isDarkTheme: boolean; constructor(service: ToolViewApiService) { const toolViewApi = service.getApi(); this.isDarkTheme = toolViewApi.theme.appearance === 'dark'; } } We can use isDarkTheme to change how Angular generates the CSS, but first open src/app/app.component.css and populate it with the following: .dark-theme { color: white; } .light-theme { color: black; } In other words, we want to set the font color to white in dark themes, and to black in light themes. Open app.component.html , and replace the class attribute with the [ngClass] directive: <div [ngClass]=\"{ 'light-theme': !isDarkTheme, 'dark-theme': isDarkTheme }\"> <app-tool-view1></app-tool-view1> </div> Now, our tool view will apply the light-theme or dark-theme class based on theme information from the i2 Notebook web client. Reload the i2 Notebook web client and display the tool view again. Change the theme by swopping between light and dark, and notice how the tool view automatically adjusts its text coloring to match. Access record data We've done a lot of work to make our tool view integrate nicely with the i2 Notebook web client. Now it needs to do something useful. Let's enable it to access the data in selected records, which starts by working out what the current selection is : At the top of the src/app/tool-view1/tool-view1.component.ts file, import ToolViewApiService from ../tool-view-api.service : import { ToolViewApiService } from '../tool-view-api.service'; Also import the toolview namespace from @i2analyze/notebook-sdk : import type { toolview } from '@i2analyze/notebook-sdk'; Use dependency injection to inject ToolViewApiService into the ToolView1Component class, and populate it: export class ToolView1Component implements OnInit { private readonly toolViewApi: toolview.IToolViewApi; constructor(service: ToolViewApiService) { this.toolViewApi = service.getApi(); } ngOnInit(): void {} } In the ngOnInit() function, subscribe to the chartselectionchange event: ngOnInit(): void { this.toolViewApi.addEventListener( 'chartselectionchange', this.handleChartSelectionChange ); } And then add a method to ToolView1Component to handle it: private handleChartSelectionChange = () => { this.toolViewApi.logger.info('Chart selection has changed'); } The method uses an arrow function expression , which binds the function so that the value of this is always ToolView1Component . Reload the i2 Notebook web client and open the browser console. As you change the selection on the chart, you should see messages from your tool view: \" My i2 Notebook plug-in Chart selection has changed\". The chartselectionchange event provides the current selection in its payload. Change the implementation of handleChartSelectionChange() to take the label from the first record in the selection and display it in the tool view: Still in tool-view1.component.ts , add the chart and records namespaces from the @i2analyze/notebook-sdk package to the existing import statement: import type { toolview, chart, records } from '@i2analyze/notebook-sdk'; Create a recordLabel property in the ToolView1Component class: public recordLabel = ''; Change handleChartSelectionChange() as follows, and add setValuesForRecord() : private handleChartSelectionChange: chart.SelectionListener = (selection) => { const record = selection.records.firstOrDefault(undefined); this.setValuesForRecord(record); } private setValuesForRecord(record: records.IChartRecord | undefined) { if (record) { this.recordLabel = record.labelOrFallback; } else { this.recordLabel = 'No records selected.'; } }; The firstOrDefault function returns the first record from the selection, falling back to the specified undefined if there isn't a first record. The labelOrFallback property reads the label of the record, falling back to a standard string if empty. Now we'll display the extracted record label. Replace the contents of src/app/tool-view1/tool-view1.component.html with: <div> <h1 class=\"record-header\">{{ recordLabel }}</h1> </div> Note: This and later HTML code uses CSS classes to apply styling to the tool view. To add the classes to your project, replace the file that Angular generated at src/app/tool-view1/tool-view1.component.css with its equivalent from Github . Reload the i2 Notebook web client, open the tool view, and select something on the chart. The tool view does not display the label, because the selection change event occurred outside Angular's change detection. We need to alert Angular that the state of our component has changed. Within tool-view1.component.ts : Add ChangeDetectorRef to the import from @angular/core : import { Component, OnInit, ChangeDetectorRef } from '@angular/core'; Inject the class into our component via the constructor: constructor(service: ToolViewApiService, private readonly changeDetectorRef: ChangeDetectorRef) { this.toolViewApi = service.getApi(); } After setting the recordLabel in setValuesForRecord() , alert Angular to the changes: this.changeDetectorRef.detectChanges(); Try the tool view again. Click around on the chart, selecting different items. It does now display the label of the first record in the chart selection, but there's still a problem. Close the tool view, select an item on the chart, and then open the tool view again. Notice that when the tool view opens , it's not displaying the record label. After you change the selection, the tool view does display the label correctly, but it's not displaying correctly at startup. The problem is that we're only setting the recordLabel field after a chartselectionchange event is received. Adding the dispatchNow option to the addEventListener subscription arranges for the chartselectionchange handler to be called immediately. In tool-view1.component.ts , inside the ngOnInit() method addEventListener call, add a dispatchNow: true option: ngOnInit(): void { this.toolViewApi.addEventListener( 'chartselectionchange', this.handleChartSelectionChange, { dispatchNow: true } ); } Reload the web client again, select an item, and open the tool view. This time, it immediately displays the label of the first selected record (or our \"No records selected.\" message) without waiting for a selection change. Display property data We have the record label, but we can build up our tool view to display data from more record properties. In tool-view1.component.ts , add data to the import from @i2analyze/notebook-sdk : import type { toolview, chart, records, data } from '@i2analyze/notebook-sdk'; Declare an interface that represents how we'll display the properties that we're going to retrieve: interface IProperty { label: string; value: string; } Next, add a property to the ToolView1Component that will store the record property information: public properties: IProperty[] = []; And edit setValuesForRecord() to extract property as well as label information from the record: private setValuesForRecord(record: records.IChartRecord | undefined) { const formatter = this.toolViewApi.formatter; if (record) { this.recordLabel = record.labelOrFallback; const properties: IProperty[] = []; for (const propertyType of record.itemType.propertyTypes) { const label = propertyType.displayName; const value = record.getProperty(propertyType); if (value !== undefined && !record.isValueUnfetched(value)) { const formattedValue = formatter.formatValue(value); properties.push({ label, value: formattedValue }); } } this.properties = properties; } else { this.recordLabel = 'No records selected.'; this.properties = []; } this.changeDetectorRef.detectChanges(); }; The record.getProperty() method can return values of type undefined , data.IValueNotFetched , or data.PropertyValue : An undefined value indicates that the record has no value for the specified property type. A not-fetched property value ( data.IValueNotFetched ) indicates that the record does have a value for the property, but we don't have that value in the client at the moment. Note: You can ensure that the property is fetched by using the chart.ensurePropertiesFetched() method. A property value ( data.PropertyValue ) can be an object representing any of the legal data types in the schema. It might be a string, or a number, or a more complicated object such as a date, time, date-time, decimal, or geospatial structure. Angular cannot directly render any of these structures, so we use the formatter.formatValue() method to produce standard i2 Notebook string representations of them. When we have a record, we filter out the undefined and not-fetched properties before displaying the remainder in our tool view. When we have no record at all, we set the properties to be an empty array. In tool-view1.component.html , add some elements to display the property data after the record label: <div> <h1 class=\"record-header\">{{ recordLabel }}</h1> <div class=\"record-properties\"> <div *ngFor=\"let property of properties\" class=\"property\"> <div class=\"property-label\">{{ property.label }}</div> <div class=\"property-value\">{{ property.value }}</div> </div> </div> </div> Reload the i2 Notebook web client and try out the tool view. Property values are now displayed, and numbers, dates, and times are formatted the same as in the rest of the application. Display an image and a link to more information So far, our tool view displays the label of a selected record and its property values. In this section, we'll go further by displaying an image to represent the record, and by linking to its 360 view (if it has one). First, in tool-view1.component.ts , add properties on the ToolView1Component class to store the image and the URL: public threeSixtyUrl?: string; public image?: data.IImage; In the setValuesForRecord() method, set these properties if we have a record, and clear them if we don't: if (record) { this.recordLabel = record.labelOrFallback; this.threeSixtyUrl = record.get360ViewUrl(); this.image = record.image || (record.isEntity() ? record.itemType.image : undefined); ... } else { this.recordLabel = 'No records selected.'; this.threeSixtyUrl = undefined; this.image = undefined; ... } This code uses the record image if one exists, and falls back to the image associated with the record's item type if it does not. In tool-view1.component.html , edit the heading to display the image and the link (if it exists): <h1 class=\"record-header\"> <img *ngIf=\"image\" [src]=\"image.href\" [alt]=\"image.description\" class=\"record-image\" /> <span class=\"record-label\"> <a *ngIf=\"threeSixtyUrl; else elseblock\" [href]=\"threeSixtyUrl\" target=\"_blank\"> {{ recordLabel }} </a> <ng-template #elseblock> {{ recordLabel }} </ng-template> </span> </h1> The target=\"_blank\" attribute on the <a> element is so that the view opens in a new browser tab or window, rather than in the tool view! Reload the i2 Notebook web client once again, and watch the behavior of the tool view: For entity records that came from the Information Store, the label is now also a hyperlink. For all records that have images, the tool view displays that image. Support globalization Not all users speak English, and not all languages are read from left to right. If your tool view is aimed internationally, it should flow and display its contents correctly in all locales. The i2 Notebook Web API includes support for dealing with localization. First, let's demonstrate one of the problems by simulating an Arabic locale. In your browser address bar, after the contextpath part of the address, add the query parameter ?translationLocale=ar-sa and reload the page. (For example, http://localhost:4000/opal/?translationLocale=ar-sa#charts ) The i2 Notebook web client responds by simulating the locale of Arabic (Saudi Arabia). Note: The web client actually provides two locales: the translationLocale , which is used for the translation of the text; and the formattingLocale , which is used for formatting data for display. The ?translationLocale query parameter simulates both the translation and the formatting locale. If you display the built-in Record Inspector tool (using the R keyboard shortcut), you'll see how its user interface now flows from right to left. When you open your tool view, however, it still flows from left to right. The API can provide the information that we need. We just have to use it in the right place! In src/app/app.component.ts , inside the AppComponent class: Add a property for the flowDirection : public readonly flowDirection: string; Use the tool view API to set flowDirection in the constructor of AppComponent : this.flowDirection = toolViewApi.locale.flowDirection; The flowDirection property has either the value ltr or rtl , which is perfect for use with the dir HTML attribute. In app.component.html , use flowDirection to set the dir attribute on the container: <div [ngClass]=\"{ 'light-theme': !isDarkTheme, 'dark-theme': isDarkTheme }\" [dir]=\"flowDirection\" > <app-tool-view1></app-tool-view1> </div> Reload the i2 Notebook web client and display the tool view again. It's laid out correctly according to the locale. When you add and remove the ?translationLocale=ar-sa query parameter, the flow alternates between left-to-right and right-to-left behavior. Note: By using the built-in formatter for property values, we get date, time, and numeric formatting for the Arabic (Saudi Arabia) locale automatically. Select items on your chart that have date, time, or numeric properties to see this in action. Another globalization issue is the text in the tool view. When simulating the Arabic (Saudi Arabia) locale, the \"No records selected.\" text doesn't display correctly - it actually displays as \".No records selected\". This problem occurs because the browser is trying to lay out the text from right to left, but it doesn't realize that the \".\" is meant to flow with the text, and shouldn't be considered by itself. (This issue affects most punctuation characters and numbers that aren't considered to be \"left-to-right\" or \"right-to-left\", but instead take their directionality from the context around them.) To get the text to behave correctly, we need to mark it up with bidirectional characters. Once again, we can use the formatter from the tool view API. Inside src/app/tool-view1/tool-view1.component.ts , find the implementation of ToolView1Component . When we set the record label, we'll use the formatter to wrap it with bidirectional characters: ... this.recordLabel = formatter.wrapForBidi(record.labelOrFallback, 'raw'); ... this.recordLabel = formatter.wrapForBidi('No records selected.', 'raw'); Reload the i2 Notebook web client, and continue to simulate the Arabic (Saudi Arabia) locale. The text is now wrapped correctly, and displays with the period at the end of the text as \"No records selected.\" In general, you should use wrapForBidi() for all read-only text that you display to the user. It's particularly important for text whose contents you don't know in advance because it comes from record data. Update the plug-in code to use wrapForBidi() throughout ToolView1Component . In tool-view1.component.ts , the setValuesForRecord() function becomes: private setValuesForRecord(record: records.IChartRecord | undefined) { const formatter = this.toolViewApi.formatter; if (record) { this.recordLabel = formatter.wrapForBidi(record.labelOrFallback, 'raw'); this.threeSixtyUrl = record.get360ViewUrl(); this.image = record.image || (record.isEntity() ? record.itemType.image : undefined); const properties: IProperty[] = []; for (const propertyType of record.itemType.propertyTypes) { const label = formatter.wrapForBidi(propertyType.displayName, 'raw'); const value = record.getProperty(propertyType); if (value !== undefined && !record.isValueUnfetched(value)) { const formattedValue = formatter.formatValue(value); properties.push({ label, value: formatter.wrapForBidi(formattedValue, 'raw'), }); } } this.properties = properties; } else { this.recordLabel = formatter.wrapForBidi('No records selected.', 'raw'); this.threeSixtyUrl = undefined; this.image = undefined; this.properties = []; } this.changeDetectorRef.detectChanges(); }; A further consideration for good globalization is that some images and icons should be reversed in right-to-left locales, while others should not. For example, back and forward navigation buttons should always be mirrored. For more information on this and other topics, consult a resource such as https://material.io/design/usability/bidirectionality.html#mirroring-elements . Before you continue with this tutorial, remove the ?translationLocale=ar-sa query parameter to stop simulating the Arabic (Saudi Arabia) locale. Add record navigation to the tool view So far, we have looked only at the first record in the selection, which is useful in an example but not realistic. Now let's look at all the records in the selection, and provide the user with a pair of buttons to page through those records and inspect their properties. As part of this work, we'll demonstrate what errors can occur if you access the data incorrectly, and then show you how to access the data correctly. In tool-view1.component.ts , add properties for the index of the current record, the total number of records, and the current selection to the ToolView1Component class: public currentRecordIndex = 0; public totalRecords = 0; private selection?: chart.ISelection; We'll store the selection and choose a record based on currentRecordIndex . Replace the implementation of handleChartSelectionChange() with the following code: private handleChartSelectionChange: chart.SelectionListener = (selection) => { this.selection = selection; this.currentRecordIndex = 0; this.totalRecords = selection.records.size; this.readDataForCurrentRecord(); }; private readDataForCurrentRecord() { const record = this.totalRecords && this.selection ? Array.from(this.selection.records)[this.currentRecordIndex] : undefined; this.setValuesForRecord(record); } Here, we've extracted the code that reads the record data and saves it in our component to a separate method named readDataForCurrentRecord() . We are now saving the selection and resetting the currentRecordIndex on every chart selection change. Next, we're going to move the responsibility for reporting a lack of records from the record display to a title area. In the setValuesForRecord() method, replace this code: this.recordLabel = formatter.wrapForBidi('No records selected.', 'raw'); with: this.recordLabel = ''; Add handler methods to update the currentRecordIndex and set the new record data; properties to indicate when the \"previous\" and \"next\" buttons are disabled; and a property named currentRecord that formats the current record index for display. Still in ToolView1Component , add: public onPreviousButtonClick = () => { this.currentRecordIndex--; this.readDataForCurrentRecord(); }; public onNextButtonClick = () => { this.currentRecordIndex++; this.readDataForCurrentRecord(); }; public get disablePreviousButton(): boolean { return this.currentRecordIndex === 0; } public get disableNextButton(): boolean { return this.currentRecordIndex === this.totalRecords - 1; } public get currentRecord(): number { return this.currentRecordIndex + 1; } In the same class, add a computed navigationTitle property: public get navigationTitle() { const formatter = this.toolViewApi.formatter; if (this.totalRecords === 0) { return formatter.wrapForBidi('No records selected.', 'raw'); } const currentRecord = formatter.formatValue(this.currentRecord); const totalRecords = formatter.formatValue(this.totalRecords); return formatter.wrapForBidi( `Record ${currentRecord} of ${totalRecords}`, 'raw' ); } This code creates a title with formatted numbers for the selected record and the total record count. In tool-view1.component.html , above the <h1> element, add the title and our navigation buttons: <div class=\"record-navigation\"> <div>{{ navigationTitle }}</div> <div class=\"navigation-buttons\" *ngIf=\"totalRecords\"> <button class=\"navigation-button\" (click)=\"onPreviousButtonClick()\" title=\"Previous record\" [disabled]=\"disablePreviousButton\" > &lt; </button> <button class=\"navigation-button\" (click)=\"onNextButtonClick()\" title=\"Next record\" [disabled]=\"disableNextButton\" > &gt; </button> </div> </div> This gives users a pair of buttons for changing the current record, and a title displaying which record they're viewing out of the total. It hides the buttons if there are no records selected. Reload the i2 Notebook web client and open the plug-in. You'll see the title and the buttons that we added. As you change the selection on the chart, the plug-in reflects the contents of the whole selection, not just its first record. Now, try changing the current record in the tool view by clicking the Next button. It doesn't work. If you look in the console, you'll see an error message: Application and chart data MUST only be accessed during event listener or transaction listener callbacks. It is not safe to access data at any other time. We are trying to access data outside an event or transaction listener. We store the selection data in our component, and attempt to read it when the user clicks Next . Let's see what happens if we store the records , instead of the whole selection. In tool-view1.component.ts : Remove the selection property from the ToolView1Component class, and replace it with a records property: private records?: data.IKeyedReadOnlyCollection<records.AnalyzeRecordId, records.IChartRecord>; Inside handleChartSelectionChange() , store the records instead of the selection: this.records = selection.records; Inside readDataForCurrentRecord() , change the declaration of the record variable to: const record = this.totalRecords && this.records ? Array.from(this.records)[this.currentRecordIndex] : undefined; Reload the i2 Notebook web client and try again. It still doesn't work. It doesn't matter if you're storing the selection or the records. You cannot access i2 Notebook chart data outside an event, mutation, or transaction listener. This rule ensures that API consumers always see a consistent view of the application data. Whenever you want to read data outside an event handler, you must request access to it from the application through a transaction or a mutation. Remove the records property from the ToolView1Component class. Instead of storing them, we'll use the current record index to request the record that we want from the application. Change the handleChartSelectionChange() implementation to: private handleChartSelectionChange: chart.SelectionListener = () => { this.currentRecordIndex = 0; this.readDataForCurrentRecord(); }; Change the readDataForCurrentRecord() function so that it requests the record data from the tool view API in a transaction handler: private readDataForCurrentRecord() { this.toolViewApi.runTransaction((application) => { const records = application.chart.selection.records; const recordIds = Array.from(records.map((r) => r.id)); this.totalRecords = records.size; const currentRecordId = recordIds[this.currentRecordIndex]; const record = records.get(currentRecordId); this.setValuesForRecord(record); }); } It's safe to access chart data during the callback, and we take advantage by populating the component fields with data from the current record. Reload the i2 Notebook web client, select multiple items on the chart, and try using the buttons in our tool view to navigate among their records. Now, it works! Extension: Ensure fetched properties While viewing record properties, eventually a property will be shown as Exists but not fetched . You can ensure that the property is fetched. Change the readDataForCurrentRecord() function so that it ensures all properties are fetched before setting the values for records: private readDataForCurrentRecord() { this.toolViewApi.runTransaction(async(application) => { const records = application.chart.selection.records; const recordIds = Array.from(records.map((r) => r.id)); this.totalRecords = records.size; const currentRecordId = recordIds[this.currentRecordIndex]; const record = records.get(currentRecordId); if (record) { const propertyTypes = record.itemType.propertyTypes; await application.chart.ensurePropertiesFetched(record, propertyTypes); } this.setValuesForRecord(record); }); } Store and restore state when the tool view is floated and docked Our tool view is almost complete, but for now there are still problems to solve. For example, you can select multiple items on the chart surface, and navigate to the second record in the selection by clicking Next . But if you then float the tool view, it returns to showing the first record again. When a tool view is docked or floated, its user interface is completely recreated in a different browser window, causing all of its temporary state to be lost. To address this, we can make use of the volatile store that's available from the tool view API. This store allows us to store state so that it survives tool view re-creation. (It's called the \"volatile\" store because its state does not persist across application reloads.) In tool-view1.component.ts , at the end of the ngOnInit() method, just after we subscribe to the chartselectionchange event, add some state persistence logic: ngOnInit(): void { ... this.toolViewApi.addEventListener('unload', () => { this.toolViewApi.volatileStore.set( 'currentRecordIndex', this.currentRecordIndex ); }); this.currentRecordIndex = this.toolViewApi.volatileStore.get('currentRecordIndex') || 0; this.readDataForCurrentRecord(); } This code means that we store currentRecordIndex when the tool view is unloaded, and retrieve it from the volatile store when the tool view is initialized. Because we're now fetching data immediately when the tool view starts up, we no longer need to use the dispatchNow option for the chartselectionchange event handler in ngOnInit() . Remove it, leaving the event subscription as follows: this.toolViewApi.addEventListener('chartselectionchange', this.handleChartSelectionChange); The tool view now correctly maintains its state across docking and floating operations. Clear state when the tool view is closed We're now preserving the tool view state across floating and docking operations. However, we're also preserving that state if the user explicitly closes the tool view, which isn't appropriate. When the user closes the tool view, we should reset the state. The unload event can tell us whether the tool view is being unloaded because of an explicit close operation. In tool-view1.component.ts , inside the ngOnInit() method, change the unload event handler to: this.toolViewApi.addEventListener('unload', (isClosing) => { if (isClosing) { this.toolViewApi.volatileStore.clear(); } else { this.toolViewApi.volatileStore.set('currentRecordIndex', this.currentRecordIndex); } }); Now, if the tool view is being closed, we'll discard our state. Otherwise, we'll persist it. Reload the i2 Notebook web client to test the changes we've made. Closing the tool view will reset the record index. Replace the built-in Record Inspector with our tool view We now have a functional tool view that allows users to view some of the details of a record. We can even use it to replace the web client's built-in Record Inspector! Removing the Record Inspector is easy. Edit src/entrypoint.js to insert the following command-removal code just before the call to initializationComplete() : api.commands.removeCommand(api.commands.systemCommands.toggleRecordInspector); Change the tool view toggle command name to \"Record inspector plug-in\", and add a keyboardHelp section so that the tool can be opened using a keyboard shortcut: const toggle = api.commands.createToolViewToggleCommand( { id: '00000000-0000-0000-0000-000000000003', name: 'Record inspector plug-in', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><circle cx=\"8\" cy=\"8\" r=\"4\" /></svg>', }, keyboardHelp: { category: 'discover', label: 'Toggle record inspector plug-in', keys: ['shift+r'], }, }, toolView ); Reload the i2 Notebook web client, and you should see that: The built-in \"Record Inspector\" tool has been removed. The keyboard help dialog (displayed by pressing \"h\") lists the keyboard shortcut Shift+R for our tool view. Using the keyboard shortcut shift+r also toggles our tool view. Deploy the plug-in To deploy our plug-in on the server, we first need to build it by running: npm run build from the plugin-ng directory. This creates a production build of our tutorial plug-in inside dist/plugin-ng . For the actual deployment, we need to add the built plug-in to the server configuration, and then redeploy the server. Note: If you follow this procedure in a deployment that provides high availability, you must complete each step on every Liberty server in your environment before you move to the next step. On the server that hosts the i2 Analyze deployment, find the toolkit/configuration directory, and then navigate to the fragments/opal-services directory that it contains. If the opal-services directory does not already contain a plugins subdirectory, create one. Copy the dist/plugin-ng directory into the plugins directory, to create plugins/plugin-ng . Run the following toolkit commands to update the deployed i2 Analyze server: setup -t stopLiberty setup -t deployLiberty setup -t startLiberty Stop the development proxy, and use the browser to navigate to your real server address. You'll find that your plug-in was successfully deployed. Next steps In this tutorial, we've: Created a command to show a record's position on a map, and added that command to the application ribbon and the chart pop-up menu Created a tool view to display record data, and replaced the built-in Record Inspector with this new tool view Considered data access, formatting, and globalization Deployed our plug-in on the i2 Analyze server This is just a flavor of what you can do with the @i2analyze/notebook-sdk package. To understand more about the capabilities of the i2 Notebook Web API, see the rest of the SDK documentation."
  },
  "guide/tutorials/basic-plugin.html": {
    "href": "guide/tutorials/basic-plugin.html",
    "title": "Creating a basic plug-in for the i2 Notebook web client",
    "keywords": "Creating a basic plug-in for the i2 Notebook web client This tutorial takes you through creating a basic plug-in for the i2 Notebook web client that can take geospatial data from records on a chart and visualize it on a map outside of the application. Note: The external mapping functionality that the plug-in provides is completely separate from the i2 Notebook web client's built-in Maps feature. The plug-in adds commands to the user interface for users to interact with, but unlike the more complex plug-ins that you might create later, it does not display a user interface of its own. Other tutorials in the SDK describe how to create a plug-in with a user interface, using a number of popular frameworks: Angular React Vue This tutorial is not a prerequisite for any of the three that are listed above. You can find a full version of the source code for this tutorial in the samples/basic-plugin folder. Prerequisites This tutorial requires a running instance of i2 Analyze on which you have permission to use the i2 Notebook web client. To follow the tutorial, you must install at least version 12 of Node.js on your development machine. For downloads and more information about Node.js, visit the project website at https://nodejs.org . The tutorial also requires you to create GUIDs for a number of its elements. The project files use some sample fixed GUIDs ( 00000000-0000-0000-0000-000000000001 , 00000000-0000-0000-0000-000000000002 , and so on), but you should always create real GUIDs for real projects. Note: A suitable GUID generator is available online at https://www.guidgenerator.com . Create a basic plug-in A basic i2 Notebook plug-in has the same requirements as a more complex one: in the plug-in directory, you must create the manifest and the entry point that enable the i2 Notebook web client to load and integrate your plug-in. The first part of this tutorial covers those requirements, and also explains how to set up both your development environment and a local Node.js server. Create a directory for your plug-in. For example, plugin . In the new directory, use an IDE such as VSCode to create a package.json file that describes the plug-in project: { \"name\": \"plugin\", \"version\": \"1.0.0\", \"scripts\": {} } On the command line, navigate to the project directory and add the i2 Notebook SDK package to the project: npm install @i2analyze/notebook-sdk The package contains a type library that enables inline assistance in your IDE. To set up auto-completion and other assistance, create and populate a file named jsconfig.json in the same directory: { \"compilerOptions\": { \"checkJs\": true, \"lib\": [\"es2020\", \"dom\"], \"target\": \"es2018\", \"types\": [\"@i2analyze/notebook-sdk\"], \"moduleResolution\": \"node\", \"strict\": true }, \"exclude\": [\"node_modules\", \"**/node_modules\"] } Note: For more information about the jsconfig.json file, see the Microsoft Visual Studio Code documentation . Now you're in position to write the plug-in itself, starting with the manifest. Create a file named plugin.json , with the following contents: { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/plugin-manifest.json\" } The schema enforces the structure and content of the file. For more information, see the plug-in manifest documentation. Continue to populate the manifest with values for \"name\" , \"pluginId\" , and \"pluginVersion\" ; and set \"entryPointUrl\" to \"./entrypoint.js\" . For example: \"name\": \"My plug-in\", \"pluginId\": \"00000000-0000-0000-0000-000000000001\", \"pluginVersion\": \"1.0.0\", \"entryPointUrl\": \"./entrypoint.js\" Next, we can create the entry point. Add a file named entrypoint.js to the plug-in directory, and populate it: async function main() { const api = await notebook.getEntryPointApi('00000000-0000-0000-0000-000000000001', '1.1'); api.logger.info('Plug-in running'); api.initializationComplete(); } void main(); Through this code, the plug-in retrieves the version of the entry point API that it wants to use, and uses it to declare that it has finished initializing. The GUID here must match the one in the plug-in manifest. If you enter the code by hand, you'll see how the type library provides auto-completion as you go. Back on the command line, add the serve package as a development dependency: npm install -D serve Add a script to the package.json file to serve the project. For example: \"scripts\": { \"start\": \"serve -l 5001\" } Start the project by running npm start . Finally, navigate to the URL where the project is being hosted ( http://localhost:5001/ , if you used the example) and confirm that plugin.json and entrypoint.js are served correctly. Test the plug-in in the i2 Notebook web client As we're developing and testing a plug-in, we won't deploy the plug-in directly to the i2 Analyze server. Instead, we'll use the i2 Notebook SDK plug-in development proxy to add our plug-in to an existing i2 Notebook deployment without needing to modify it. Anywhere on your workstation, create and populate a file named devproxy.json : { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/devproxy.json\" } This forms the basis of the configuration file for the development proxy. Add a value for \"server\" that is the URL of an existing i2 Analyze deployment. For example, \"http://localhost:9082/opal/\" . Add a value for \"port\" to specify the port that the development proxy should listen on. For example, 4000 . Add a value for \"plugins\" that contains the root URL of your plug-in. For example, [\"http://localhost:5001/\"] for the server that we configured above. On the command line, navigate to the folder that contains the configuration file, and run the i2 Notebook plug-in development proxy (no installation is required): npx @i2analyze/notebook-sdk-plugin-proxy --config devproxy.json Open the proxy URL in a browser and log in to the i2 Notebook web client. For example, http://localhost:4000/opal/ . Open the browser's developer console and check for our plug-in's message being logged: My plug-in Plug-in running If you see this message, then the plug-in is working correctly. Add a ribbon command to the plug-in So far, you have a plug-in that's being loaded into the i2 Notebook web client - but it doesn't do anything. Next, we'll make the plug-in add a command to the application ribbon that opens geospatial locations in Google Maps. In entrypoint.js , just before the call to initializationComplete() , create a command: const viewOnMap = api.commands.createCommand({ id: '00000000-0000-0000-0000-000000000002', name: 'View on map', type: 'records', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><rect width=\"8\" height=\"8\" x=\"4\" y=\"4\"/></svg>', }, onExecute(payload) {}, }); Straight afterward, surface the command on the ribbon's Home tab, just after the Information Store group: api.commands.applicationRibbon.homeTab .after(api.commands.applicationRibbon.homeTab.systemGroups.searchInfoStore) .surfaceCommands(viewOnMap); Reload i2 Notebook and check that the action is visible in the application ribbon. Clicking the button won't do anything yet because we haven't implemented onExecute() , so let's do that now. Create this helper function at the top level of the entrypoint.js file: /** * @param {import(\"@i2analyze/notebook-sdk\").data.IReadOnlyCollection<import(\"@i2analyze/notebook-sdk\").records.IChartRecord>} records */ function findGeospatialValue(records) { for (const record of records) { for (const propertyType of record.itemType.propertyTypes) { if (propertyType.logicalType === 'geospatial') { const property = record.getProperty(propertyType); if (property !== undefined && !record.isValueUnfetched(property)) { return /** @type {import(\"@i2analyze/notebook-sdk\").data.IGeoPoint} */ (property); } } } } return undefined; } This function performs a simple scan of the records it receives, looking for a non-empty geospatial property that it returns if it finds one. Note: The /** @type {import...} */ and /** @param {import...} */ code helps the JavaScript type system to understand what we're working with, which enables auto-completion in the rest of the code. If we used TypeScript to create our entrypoint.js file, we'd use import type statements instead. We can now use the helper function in the implementation of onExecute() that we left empty in the call to CreateCommand() . We'll take the latitude and longitude to a new Google Maps window: onExecute(payload) { const property = findGeospatialValue(payload.records); if (!property) { return; } window.open( `https://www.google.com/maps/@${property.latitude},${property.longitude},18z`, \"_blank\" ); }, Reload i2 Notebook again, select an element with a geospatial property, and try the command. Google Maps should open at the relevant location. Make the command sensitive to selection There's a problem with our command: the button is enabled even if the selection doesn't actually contain a geospatial property. That would be misleading for a user, but we can fix it by taking control of the surfacing of the command in the user interface. After the onExecute() parameter to createCommand() , add an onSurface() function definition: onSurface(action, eventApi, signal) { eventApi.addEventListener( \"recordscontextchange\", (context) => { action.setEnabled(!!findGeospatialValue(context.records)); }, { dispatchNow: true, signal } ); }, There are a few things to notice here: i2 Notebook calls our onSurface() function with an action object that represents the user interface control to which the command is bound each time it is surfaced. A single command might be surfaced in several places, and you can use the action object to react differently in each of them. The function also receives an eventApi object through which it can listen to changes in the records to which the action is being applied; and a signal object that indicates when this particular surfacing of the command is being removed. In our implementation, we subscribe to the recordscontextchange event, which tells us when the current records change. When they do change, we set the enabled state of the action to a value based on whether there is a geospatial value in the current records. Event listeners are normally invoked when the event occurs. However, we don't want to wait for a recordscontextchange event before we run our setEnabled() code, so we specify dispatchNow: true to invoke the callback immediately, without waiting for the event. This in turn causes our action to be enabled or disabled correctly, right away. We forward the signal to the event listener so that it unsubscribes automatically from the recordscontextchange event when the action is unsurfaced. Reload i2 Notebook. The button in the application ribbon is now enabled only when a geospatial property exists in the selection. Use the command in more than one place As well as adding it to the ribbon, we can add exactly the same command to the chart pop-up menu with a single line of code. After the existing call to surfaceCommands() , add: api.commands.chartPopupMenu.surfaceCommands(viewOnMap); Reload i2 Notebook. The same command, with the same enablement rules, is now present in the chart's pop-up menu. Deploy the plug-in To deploy our plug-in on the server, we need to add it to the server configuration, and then redeploy the server. Note: If you follow this procedure in a deployment that provides high availability, you must complete each step on every Liberty server in your environment before you move to the next step. On the server that hosts the i2 Analyze deployment, find the toolkit/configuration directory, and then navigate to the fragments/opal-services directory that it contains. If the opal-services directory does not already contain a plugins subdirectory, create one. Create a directory for our plug-in inside the plugins directory (for example, plugins/plugin-basic ), and copy the entrypoint.js and plugin.json files into it. Run the following toolkit commands to update the deployed i2 Analyze server: setup -t stopLiberty setup -t deployLiberty setup -t startLiberty Stop the development proxy, and use the browser to navigate to your real server address. You'll find that your plug-in was successfully deployed. Next steps By following the procedure in this tutorial, you've created an i2 Notebook plug-in that, though basic, is fully integrated with the application. It displays actions in the user interface, it responds to changes in selection, and it sends data from chart records to an external application. Most real plug-ins go further than this one by adding a tool view that presents users with a custom interface for performing more complex tasks. You can see the fundamentals of how tool views work by following one of the examples that use popular UI frameworks to implement a tool view."
  },
  "guide/tutorials/color-plugin.html": {
    "href": "guide/tutorials/color-plugin.html",
    "title": "Creating a plug-in that changes the colors of nodes",
    "keywords": "Creating a plug-in that changes the colors of nodes This tutorial takes you through writing a plug-in for the i2 Notebook web client that can change the color of nodes on a chart. You can find a full version of the source code for this tutorial in the samples/color-plugin folder. Prerequisities This tutorial requires a running instance of i2 Analyze on which you have permission to use the i2 Notebook web client. To follow the tutorial, you must install at least version 12 of Node.js on your development machine. For downloads and more information about Node.js, visit the project website at https://nodejs.org . The tutorial also requires you to create GUIDs for a number of its elements. The project files use some sample fixed GUIDs ( 00000000-0000-0000-0000-000000000001 , 00000000-0000-0000-0000-000000000002 , and so on), but you should always create real GUIDs for real projects. Note: A suitable GUID generator is available online at https://www.guidgenerator.com . Create a basic plug-in To arrive at the starting point for this tutorial, follow the instructions in the basic plug-in tutorial , up to but not including the section named Add a ribbon command to the plug-in . In entrypoint.js , change the requested API version to 1.2 : const api = await notebook.getEntryPointApi('00000000-0000-0000-0000-000000000001', '1.2'); Make sure that you have a working plug-in before you continue. Add a ribbon command Starting from the essentially empty plug-in, we'll add a new command to the ribbon that will eventually change the color of nodes that contain vehicle records to the colors of those vehicles. In entrypoint.js , just before the call to initializationComplete() , create a command and surface it on the Home tab: const colorVehicleNodes = api.commands.createCommand({ id: '00000000-0000-0000-0000-000000000002', name: 'Color vehicle nodes', type: 'application', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><rect width=\"8\" height=\"8\" x=\"4\" y=\"4\"/></svg>', }, onExecute() {}, }); const homeTab = api.commands.applicationRibbon.homeTab; const searchInfoStoreCommand = homeTab.systemGroups.searchInfoStore; homeTab.after(searchInfoStoreCommand).surfaceCommands(colorVehicleNodes); So far, this command is almost identical to the one that you would have added, if you had continued with the basic plug-in tutorial. Reload i2 Notebook and check that the command is visible in the application ribbon. Set node colors To set the color of a node, we'll use a mutation (see Supported mutation operations ) that requires the NodeSpecifier of the node, and the color to change the node to. In the sections that follow, we will: Find all records of the vehicle entity type on the chart. Retrieve the color of the vehicle from each vehicle record. Set each vehicle record's node element to the color of the vehicle. Find all vehicle records on the chart Elements on the chart surface are defined by and contain records that store data (see Record data ). We can gain access to the chart and all the entity records via the argument of type app.IApplicationContents passed to the onExecute() event handler. To determine whether a record has a particular type, we need to specify which type we're looking for! We'll search the item types in the chart's schema object (see Schema data ) for the one that corresponds to vehicle records. Specify the type identifier of the vehicle item type in the i2 Analyze schema. Access the chart schema through the onExecute() application contents parameter, and get the chart item type that corresponds to that type identifier. Access all of the chart entityRecords through the onExecute() application contents parameter. Find the records with the vehicle item type. If there are no vehicle records, just return. const vehicleAnalyzeTypeId = 'ET3'; ... onExecute(applicationContents) { const vehicleItemType = applicationContents.chart.schema.getItemType(vehicleAnalyzeTypeId); const allEntityRecords = applicationContents.chart.entityRecords; const vehicleRecords = allEntityRecords.filter( (record) => record.itemType === vehicleItemType ); }, ... At this point, we now have all the vehicle type entity records, and we're ready to retrieve the color property for each record. Retrieve a color from each vehicle record We will now find the color for each vehicle. Instead of accessing the item types in the schema , we'll need to access the property types in the vehicle item type. Specify the type identifier of the color property type of the vehicle item type. Use the vehicleItemType object to get the property type that corresponds to that type identifier. Gain access to mutations by calling api.runTrackedMutations() and setting a handler function. Inside the mutation handler, loop over every vehicle entity record. Use the color property type to retrieve the color of the vehicle that the record represents. const vehicleColorAnalyzeTypeId = 'VEH9'; ... const colorPropertyType = vehicleItemType.getPropertyType(vehicleColorAnalyzeTypeId); api.runTrackedMutations((_, mutations) => { for (const vehicleRecord of vehicleRecords) { const vehicleColor = vehicleRecord.getProperty(colorPropertyType); ... Set the record's element to the color of the vehicle Finally, for each vehicle record we found, we'll use a mutation to set the color of the node element that contains it to the color of the vehicle. Retrieve the record's containing element using the element property. Use the mutations parameter to call the editNode() method, and then the setColor() method. Return an ITrackedMutationCommit object from the runTrackedMutations() method call. ... api.runTrackedMutations((_, mutations) => { for (const vehicleRecord of vehicleRecords) { const vehicleColor = vehicleRecord.getProperty(colorPropertyType); const vehicleElement = vehicleRecord.element; mutations.editNode(vehicleElement.id).setColor(vehicleColor?.toString()); } return { type: 'commit', actionDisplayName: 'Set vehicle node colors', }; }); ... Note: This implementation assumes that the vehicle color value in the record property is in a format that the setColor() method supports. Now, if a chart contains one or more nodes with a vehicle record, clicking the ribbon button changes the color of all those nodes to their vehicle color."
  },
  "guide/tutorials/create-notebook-plugin.html": {
    "href": "guide/tutorials/create-notebook-plugin.html",
    "title": "Creating a production-ready plug-in with the Create Notebook Plug-in tool",
    "keywords": "Creating a production-ready plug-in with the Create Notebook Plug-in tool This tutorial takes you through creating a production-ready plug-in for the i2 Web Client using a project scaffold created with the create-notebook-plugin tool. Prerequisites To follow the tutorial, you must install at least version 18 of Node.js on your development machine. For downloads and more information about Node.js, visit the project website at https://nodejs.org . This tutorial also requires a running instance of i2 Analyze on which you have permission to use the i2 Web Client. Create a plug-in Run the following command on the command line: npm create @i2analyze/notebook-plugin This command installs and executes @i2analyze/create-notebook-plugin , a tool designed for the purpose of creating plug-in projects for the i2 Web Client. When you run the tool, you'll see a number of options. For now, use the default value for each option by pressing Enter at each prompt. $ create-notebook-plugin Plugin-name: (My plug-in): My plug-in Plugin-description: (My plug-in description): My plug-in description Server URL: (http://localhost:9082/opal): http://localhost:9082/opal Run git init?: (no) No Run npm install?: (no) No $ The tool creates a directory for the plug-in project whose name is derived from the name that you provide. With the default values, the directory is named my-plug-in . When the project is ready, run the following commands to install dependencies and start the development server and the plug-in proxy: cd my-plug-in npm install npm run dev The plug-in project is now running! In your browser, navigate to the Web Client at http://localhost:4000/opal/ and check that the plug-in has loaded correctly. Look for a new button in the application ribbon, and a new message in the developer tools console: My plug-in running If you see this message, then the plug-in is working correctly. The Create Notebook Plug-in tool configures the project folder for TypeScript, ESLint, and prettier. It also creates devproxy.json and plugin.json manifests, and adds scripts to allow for development and production builds. The latter use webpack to create a bundle that's deployable to an i2 Analyze server. Add a ribbon command to the plug-in At this stage, the plug-in sends some basic information to the browser's developer tools console, and adds a button that does nothing to the application ribbon. Next, we'll replace the generated code with some calls to the i2 Web Client API that modify the button to open geospatial locations in Google Maps. In src/entrypoint.ts , make the following changes. Change the first line from: import { NotebookStatic } from '@i2analyze/notebook-sdk'; to: import { commands, data, records, NotebookStatic } from '@i2analyze/notebook-sdk'; Change: name: 'My plug-in'; to: name: 'View on map'; In the createCommand() call, change: type: 'unscoped'; to: type: 'records'; And change: onExecute() { to: onExecute(payload: commands.IRecordsContext) { Create this helper function at the top level of the entrypoint.ts file: function findGeospatialValue(chartRecords: data.IReadOnlyCollection<records.IChartRecord>) { for (const record of chartRecords) { for (const propertyType of record.itemType.propertyTypes) { if (propertyType.logicalType === 'geospatial') { const property = record.getProperty(propertyType); if (property !== undefined && !record.isValueUnfetched(property)) { return property as data.IGeoPoint; } } } } return undefined; } This function performs a simple scan of the records that it receives, and returns the first non-empty geospatial property that it finds. We can now use the helper function in the implementation of onExecute() , replacing the default code that the project was created with. We'll take the latitude and longitude to a new Google Maps window: onExecute(payload: commands.IRecordsContext) { const property = findGeospatialValue(payload.records); if (!property) { return; } window.open( `https://www.google.com/maps/@${property.latitude},${property.longitude},18z`, \"_blank\" ); }, Reload the Web Client, select an element with a geospatial property, and try the command. Google Maps should open at the relevant location. Make the command sensitive to selection There's a problem with our command: The button is enabled even if the selection doesn't actually contain a geospatial property. That would be misleading for a user, but we can fix it by taking control of the surfacing of the command in the user interface. After the onExecute() parameter to createCommand() , replace the onSurface() function definition: onSurface(action, eventApi, signal) { eventApi.addEventListener( \"recordscontextchange\", (context) => { action.setEnabled(!!findGeospatialValue(context.records)); }, { dispatchNow: true, signal } ); }, There are a few things going on here: The Web Client calls our onSurface() function with an action object that represents the user interface control to which the command is bound each time it is surfaced. A single command might be surfaced in several places, and you can use the action object to react differently in each of them. The function also receives an eventApi object through which it can listen to changes in the records to which the action is being applied; and a signal object that indicates when this particular surfacing of the command is being removed. In our implementation, we subscribe to the recordscontextchange event, which tells us when the current records change. When they do change, we set the enabled state of the action to a value based on whether there is a geospatial value in the current records. Event listeners are normally invoked when the event occurs. However, we don't want to wait for a recordscontextchange event before we run our setEnabled() code, so we specify dispatchNow: true to invoke the callback immediately, without waiting for the event. This in turn causes our action to be enabled or disabled correctly, right away. We forward the signal to the event listener so that it unsubscribes automatically from the recordscontextchange event when the action is unsurfaced. Reload the Web Client. The button in the application ribbon is now enabled only when a geospatial property exists in the selection. Use the command in more than one place As well as adding it to the ribbon, we can add exactly the same command to the chart pop-up menu with a single line of code. After the existing call to surfaceCommands() , add: api.commands.chartPopupMenu.surfaceCommands(viewOnMap); Reload the Web Client. The same command, with the same enablement rules, is now present in the chart's pop-up menu. Deploy the plug-in To deploy our plug-in on the server, we should rebuild it ready for deployment using a production build. We then need to add it to the server configuration, and then redeploy the server. Note: If you follow this procedure in a deployment that provides high availability, you must complete each step on every Liberty server in your environment before you move to the next step. Build a production version of the plug-in by executing the following command: npm run build This compiles the plug-in and bundles it into a dist folder in the project. That folder contains everything that you need to copy to the server. On the server that hosts the i2 Analyze deployment, find the toolkit/configuration directory, and then navigate to the fragments/opal-services directory that it contains. If the opal-services directory does not already contain a plugins subdirectory, create one. Create a directory for your plug-in inside the plugins directory (for example, plugins/plugin-basic ), and copy the contents of the dist folder into this folder. Run the following toolkit commands to update the deployed i2 Analyze server: setup -t stopLiberty setup -t deployLiberty setup -t startLiberty Stop the development proxy, and use the browser to navigate to your real server address. You'll find that your plug-in was successfully deployed. Next steps By following the procedure in this tutorial, you've used the create-notebook-plugin tool to create an i2 Web Client plug-in that, though basic, is fully integrated with the application. It displays actions in the user interface, it responds to changes in selection, and it sends data from chart records to an external application. Most real plug-ins go further than this one by adding a tool view that presents users with a custom interface for performing more complex tasks. You can see the fundamentals of how tool views work by following one of the examples that use popular UI frameworks to implement a tool view. You can instruct create-notebook-plugin to create such a plug-in by specifying a template that uses React to implement a skeleton tool view: npm create @i2analyze/notebook-plugin -- --template=plugin-with-toolview"
  },
  "guide/tutorials/item-type-plugin.html": {
    "href": "guide/tutorials/item-type-plugin.html",
    "title": "Adding item types",
    "keywords": "Adding item types When charting items from datasets, you may encounter situations where the item types available in the i2 Analyze server schema do not fully align with your data. The i2 Notebook SDK allows you to create custom item types and define properties tailored to your specific needs. This tutorial demonstrates how to add custom item types to the chart schema and listen for schema change events. It focuses on the core SDK APIs rather than UI implementation. The complete sample includes a simple interface (a textarea pre-populated with sample JSON data and a button) for demonstration purposes, but the tutorial concentrates on the key API usage. In practice, you would adapt these APIs to work with your own data sources and schema structures. You can find a full version of the source code for this tutorial in the samples/item-type-plugin folder. Prerequisites This tutorial requires: A running instance of i2 Analyze version 4.4.4.5 or later i2 Notebook SDK version 1.6 or later These versions introduced the functionalities discussed in this tutorial. Create a plug-in To get started, we'll use the @i2analyze/create-notebook-plugin package to quickly scaffold the plug-in structure. For a detailed walkthrough on creating a plug-in, refer to the Creating a production-ready plug-in with the Create Notebook Plug-in tool tutorial. Run the following command to create a plug-in with a tool view: npx @i2analyze/create-notebook-plugin --template=plugin-with-toolview This command initializes the plug-in and tool view, providing a foundation for development. Follow the prompts to configure your plug-in. Once the setup is complete, you will have a basic structure ready for further customization. Set up the SDK version Ensure that your project has the correct version of the SDK installed. In package.json , verify or update the dependency: { \"dependencies\": { \"@i2analyze/notebook-sdk\": \"^1.6.0\" } } After updating your dependencies, modify the entrypoint.ts file to request the correct API version: const api = await notebook.getEntryPointApi('ac7bcb47-f3d5-45c8-8d41-8ca30cf8ec06', '1.6'); Before proceeding, ensure that your plug-in is functioning correctly. Add item types To demonstrate how to add item types, we'll use example JSON data based on a wildlife crime seizure shipment scenario. This example shows the complete workflow: Define custom item types (entity and link types) with their properties Add these types to the chart schema Create records using the newly defined types The process requires two separate mutation operations: first adding the item types to the schema, then adding the actual records. Example JSON data { \"data\": [ { \"shipmentId\": \"S1-DEP\", \"typeId\": \"departure\", \"name\": \"Departure\", \"icon\": \"Cargo Plane (Rotary Wing)\", \"properties\": [ { \"type\": \"date\", \"name\": \"Departure Date\", \"value\": \"2023-10-01\" }, { \"type\": \"singleLineString\", \"name\": \"Country\", \"value\": \"Congo\" } ] }, { \"shipmentId\": \"S1-DES\", \"typeId\": \"destination\", \"name\": \"Destination\", \"icon\": \"Place\", \"properties\": [ { \"type\": \"date\", \"name\": \"Expected Arrival\", \"value\": \"2023-10-04\" }, { \"type\": \"singleLineString\", \"name\": \"Country\", \"value\": \"Vietnam\" } ] }, { \"typeId\": \"seizure\", \"name\": \"Seizure\", \"fromId\": \"S1-DEP\", \"toId\": \"S1-DES\", \"properties\": [ { \"type\": \"date\", \"name\": \"Seizure Date\", \"value\": \"2023-10-03\" }, { \"type\": \"singleLineString\", \"name\": \"Seizure Country\", \"value\": \"Singapore\" } ] } ] } To add item types, we'll create a function that iterates through each record and determines whether to add an entity or a link. A link type is identified by the presence of fromId and toId fields in the JSON data. The sample's ToolView.tsx contains an addItemTypes function that demonstrates this process, filtering out items whose types already exist in the schema to avoid duplicates: The helper function isLinkData() checks for the presence of fromId and toId fields. See the complete implementation in the sample code. const addItemTypes = (items: (IEntity | ILink)[]) => { toolViewApi.runTrackedMutations((application, mutations) => { // Filter items whose types are not already in the schema const filteredItems = items.filter((item) => { const foundItemType = application.chart.schema.itemTypes.find( (itemType) => itemType.displayName === item.name ); return !foundItemType; }); if (filteredItems.length === 0) { return { type: 'rollback' }; } for (const item of filteredItems) { if (isLinkData(item)) { mutations.addLinkType({ displayName: item.name, propertyTypes: item.properties.map((property) => ({ displayName: property.name, logicalType: property.type, isLabelPart: true, })), }); } else { mutations.addEntityType({ displayName: item.name, icon: item.icon, propertyTypes: item.properties.map((property) => ({ displayName: property.name, logicalType: property.type, isLabelPart: true, })), }); } } return { type: 'commit', actionDisplayName: 'Add item types', }; }); }; For adding an entity type, we use addEntityType() , which requires a displayName , an icon , and optional propertyTypes . For a link type, we use addLinkType() , which requires a displayName and optional propertyTypes . Each property type includes: displayName : The name shown in the UI logicalType : The data type (e.g., 'date' , 'singleLineString' ) isLabelPart : Whether this property appears in the record's label (only applicable for string-based types), non-string properties will throw an error. After running this function, you now have two entity types ( Departure and Destination ) and one link type ( Seizure ) added to the chart schema. Add records Once the item types are added, you can create new records using these item types. The following simplified example demonstrates the key concepts for creating both entity and link records: const addRecords = (items: (IEntity | ILink)[]) => { toolViewApi.runTrackedMutations((application, mutations) => { const pendingRecordMap = new Map<string, sdk.app.IPendingRecord>(); for (const item of items) { // Find the item type from the schema const itemType = application.chart.schema.itemTypes.find( (type) => type.displayName === item.name ); // Build properties array const properties: [sdk.schema.PropertyTypeSpecifier, sdk.data.PropertyValue][] = []; item.properties.forEach((property) => { const propertyType = itemType.propertyTypes.find((pt) => pt.displayName === property.name); if (propertyType) { let value: sdk.data.PropertyValue = property.value; // Convert date strings to LocalDate if (propertyType.logicalType === 'date') { const date = new Date(property.value); value = mutations.valueFactory.createLocalDate( date.getFullYear(), date.getMonth() + 1, date.getDate() ); } properties.push([propertyType, value]); } }); if (isLinkData(item)) { // Create a link record mutations.addLinkRecord({ itemType, fromEnd: pendingRecordMap.get(item.fromId).recordId, toEnd: pendingRecordMap.get(item.toId).recordId, linkDirection: 'none', properties, }); } else { // Create an entity record const pendingRecord = mutations.addEntityRecord({ itemType, properties, }); // Store for link record creation pendingRecordMap.set(item.shipmentId, pendingRecord); } } return { type: 'commit', actionDisplayName: 'Add records', }; }); }; This example focuses on the core SDK APIs: addEntityRecord() for creating entities and addLinkRecord() for creating links between them. For a complete implementation with proper error handling and validation, refer to ToolView.tsx in the sample code. Based on the example data, three records will be added to the chart: a Departure entity record, a Destination entity record, and a Seizure link record that connects them. Note: In this example, the item type is looked up from the schema by its name. However, it's recommended to use the typeId for lookups, as item types may share the same name. The typeId is always unique. When you add an item type, the API returns a schema.IPendingItemType object, which provides access to the typeId . Using this unique identifier ensures reliable and consistent lookups, even if item names are duplicated. Listen for chart schema change events When using runTrackedMutations() , if the mutation alters the schema, you can listen for chart schema changes in the mutation response handler. toolViewApi.runTrackedMutations( (application, mutations) => { // Perform mutations here }, (_, result) => { if (result.chartSchemaChange) { // Handle the chart schema change if needed } } ); Alternatively, you can set up an event listener in entrypoint.ts or in any other tool views where you want to track chart schema changes. When you set up an event listener like this, schema changes can be triggered by any part of the application, not just your plug-in. The callback provides the source ID of the triggering plug-in, allowing you to check it against your plug-in ID to determine whether the event originated from your plug-in or another source. Here's an example of how to set up a callback to listen for chartschemachange events: api.addEventListener('chartschemachange', (chartSchemaChange) => { if (chartSchemaChange.pluginId === myPluginId) { // Handle changes caused by this plug-in } else { // Handle changes caused by other plug-ins } }); myPluginId is your plug-in's unique identifier from the manifest This callback allows you to differentiate between schema changes made by your plug-in and those made by other plug-ins, enabling appropriate handling of each scenario."
  },
  "guide/tutorials/mutation-plugin.html": {
    "href": "guide/tutorials/mutation-plugin.html",
    "title": "Creating a plug-in that writes to a chart in the i2 Notebook web client",
    "keywords": "Creating a plug-in that writes to a chart in the i2 Notebook web client This tutorial takes you through writing a plug-in for the i2 Notebook web client that can write new records to a chart, arrange the elements that contain those records, and update the view to contain those elements. In doing so, the tutorial demonstrates many aspects of the support in the i2 Notebook API for mutations . In particular, it contains examples of running mutations from plug-in code, and of committing and rolling back mutations in appropriate circumstances. You can find a full version of the source code for this tutorial in the samples/mutation-plugin folder. Prerequisities This tutorial requires a running instance of i2 Analyze on which you have permission to use the i2 Notebook web client. To follow the tutorial, you must install at least version 12 of Node.js on your development machine. For downloads and more information about Node.js, visit the project website at https://nodejs.org . The tutorial also requires you to create GUIDs for a number of its elements. The project files use some sample fixed GUIDs ( 00000000-0000-0000-0000-000000000001 , 00000000-0000-0000-0000-000000000002 , and so on), but you should always create real GUIDs for real projects. Note: A suitable GUID generator is available online at https://www.guidgenerator.com . Create a basic plug-in To arrive at the starting point for this tutorial, follow the instructions in the basic plug-in tutorial , up to but not including the section named Add a ribbon command to the plug-in . Make sure that you have a working plug-in before you continue. Add a ribbon command Starting from the essentially empty plug-in, we'll add a new command to the ribbon that will eventually add some Person records to the current chart. In entrypoint.js , just before the call to initializationComplete() , create a command and surface it on the Home tab: const addRecords = api.commands.createCommand({ id: '00000000-0000-0000-0000-000000000002', name: 'Add items', type: 'application', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><rect width=\"8\" height=\"8\" x=\"4\" y=\"4\"/></svg>', }, onExecute() {}, }); api.commands.applicationRibbon.homeTab .after(api.commands.applicationRibbon.homeTab.systemGroups.searchInfoStore) .surfaceCommands(addRecords); So far, this command is almost identical to the one that you would have added, if you had continued with the basic plug-in tutorial. Reload i2 Notebook and check that the action is visible in the application ribbon. Add entity records Next, we're going to do something different from the basic tutorial. The command will add records to the chart, so we need to provide the data for those records, and identify the schema types that it conforms to. At the top of the entrypoint.js file, add some dummy data to serve as the source for the records: const personData = [ { firstName: 'Lou', familyName: 'Tuft', }, { firstName: 'Jessy', familyName: 'Roberts', }, { firstName: 'Jayme', familyName: 'Timberson', }, ]; Also define the entity type and property types from the schema that will apply to the entity records. Place this code at the top of the file, next to the dummy data: const personEntityTypeId = 'ET5'; const firstNamePropertyTypeId = 'PER4'; const familyNamePropertyTypeId = 'PER6'; Inside the implementation of onExecute() , add the following code to get the entity and property type objects that you need for the dummy data: const { getItemType } = application.chart.schema; const personEntityType = getItemType(personEntityTypeId); const firstNamePropertyType = personEntityType.getPropertyType(firstNamePropertyTypeId); const familyNamePropertyType = personEntityType.getPropertyType(familyNamePropertyTypeId); At this point, you have the data, and you've identified the entity and property types in the i2 Analyze schema that model that data. Now we can start to do something with it. Immediately after the previous code, add a call to runTrackedMutations() and start the mutation handler that will add records to the chart: api.runTrackedMutations((_application, mutations) => { // Mutations go here }); The changes that we want to make to the chart must take place in the function that we pass to runTrackedMutations() . Start the handler by looping over the contents of the personData object, and using the entity type and property types that we retrieved earlier to add entity records to the chart: for (const person of personData) { mutations.addEntityRecord({ itemType: personEntityType, properties: { [firstNamePropertyType.id]: person.firstName, [familyNamePropertyType.id]: person.familyName, }, }); } Note: Alternatively, you might decide to add an \"empty\" entity record first, and then edit it: for (const person of personData) { const newPerson = mutations.addEntityRecord({ itemType: personEntityType, }); newPerson.setProperties({ [firstNamePropertyType.id]: person.firstName, [familyNamePropertyType.id]: person.familyName, }); } To complete the mutation handler, you must return an object that tells the application whether to commit the mutation. Since this is a tracked mutation, you must also supply the name of the entry to add to the undo stack. Add this code, just after the for loop: return { type: 'commit', actionDisplayName: 'Add records', }; Note: A tracked mutation adds an entry to the undo stack. If the user executes the undo action, all the mutation commands that were added are reversed, putting the chart back into its state before the runTrackedMutations() call. An untracked mutation does not add an entry to the undo stack, but is limited to mutation commands that affect selection and the viewport. Reload i2 Notebook and run the command. The Person records that you created are added to new node elements on the chart. Add linked records Next, we'll put some more entity records on the chart, and create links between the new records and the Person records that you already created. Add another set of data, which we'll use to define some events: const eventEntityTypeId = 'ET2'; const eventTypePropertyTypeId = 'EVE3'; const startDateTimePropertyTypeId = 'EVE4'; const observedLinkTypeId = 'LOB1'; const eventData = [ { type: 'Theft', dateTime: '2022-03-01T12:31', timeZoneId: 'Europe/London', wasSeen: 'Tuft', }, { type: 'Arson', location: 'New York', dateTime: '2021-11-23T10:33', timeZoneId: 'America/New_York', wasSeen: 'Roberts', }, { type: 'Assault', dateTime: '2022-05-07T17:14', timeZoneId: 'America/Los_Angeles', wasSeen: 'Timberson', }, ]; Notice how each event has a wasSeen property that determines which Person record the event should be linked to. Add the following code to get the entity, property, and link type objects for the new data, just after the similar code that you added to onExecute() earlier: const { getItemType } = application.chart.schema; const eventEntityType = getItemType(eventEntityTypeId); const eventTypePropertyType = getItemType.getPropertyType(eventTypePropertyTypeId); const startDateTimePropertyType = eventEntityType.getPropertyType( eventEntityType, startDateTimePropertyTypeId ); const observedLinkType = getItemType(observedLinkTypeId); To populate the events' time zone properties, we'll add another helper function that looks up time zones by their identifiers. Add this code after the other helper functions at the top of the file: /** * @param {import(\"@i2analyze/notebook-sdk\").data.IKeyedReadOnlyCollection<string,import(\"@i2analyze/notebook-sdk\").data.ITimeZone>} timeZones * @param {string} timeZoneId */ function getTimeZone(timeZones, timeZoneId) { const timeZone = timeZones.get(timeZoneId); if (timeZone === undefined) { throw new Error('No time zone matches ${timeZoneId}'); } return timeZone; } Note: The /** @param {import...} */ and /** @type {import...} */ code helps the JavaScript type system to understand what we're working with, which enables auto-completion in the rest of the code. If we used TypeScript to create the entrypoint.js file, we'd use import type statements instead. To make it easier to find the Person to whom a particular Event is related, we'll add a Map object that contains our Person records, keyed by their familyName property values. /** * @type {Map<string,import(\"@i2analyze/notebook-sdk\").app.IPendingRecord>} */ const personLookup = new Map(); Note: We need the map because we can't just look up the records on the chart, even after the call to addEntityRecord() . They're not actually on the chart, because the mutation is yet to be committed. Amend the for loop that queues the Person records for addition to the chart so that it matches this code, which also adds the new records to the Map . for (const person of personData) { const personRecord = mutations.addEntityRecord({ itemType: personEntityType, properties: { [firstNamePropertyType.id]: person.firstName, [familyNamePropertyType.id]: person.familyName, }, }); personLookup.set(person.familyName, personRecord); } Once again, you have the data and the appropriate item and property types. Now we can use the new data to create some more records, starting with events. In the tracked mutation handler, just after the for loop above, insert the following code: for (const event of eventData) { const startDateTime = mutations.valueFactory.createZonedDateTime( event.dateTime, getTimeZone(api.allTimeZones, event.timeZoneId), false ); const eventRecord = mutations.addEntityRecord({ itemType: eventEntityType, properties: { [eventTypePropertyType.id]: event.type, [startDateTimePropertyType.id]: startDateTime, }, }); } The mutations object provides a number of factory methods that you can use to create valid values for record properties. This code uses createZonedDateTime() to set the event's date-and-time property. Next, add the link records that connect the Event entities to the Person entities, using the lookup map to do so. Put this code inside the for loop, just after the call to addEntityRecord() : const personSeenRecord = personLookup.get(event.wasSeen); if (personSeenRecord === undefined) { throw new Error(`Person matching ${event.wasSeen} is missing`); } mutations.addLinkRecord({ itemType: observedLinkType, fromEnd: eventRecord, toEnd: personSeenRecord, linkDirection: 'with', }); Reload i2 Notebook, create a chart so that you're starting from fresh, and run the command. This time, the Person and Event records are added to the chart, and they are connected through Observed link records. Changing chart selection We've added the events to the chart, but we can also add them to the current selection, which is a common operation in real plug-ins. Add this code after the call to addEntityRecord() : mutations.selection.add(eventRecord); Reload i2 Notebook again and run the command. This time, the Event records are selected on the chart. Mutating elements, and mutation rollback We can use mutations to affect the elements on the chart as well as the records that they contain. Let's try arranging the elements that contain Events into a left-to-right time sequence. In entrypoint.js , before the call to initializationComplete() , create another command and surface it in the ribbon: const arrangeEvents = api.commands.createCommand({ id: '00000000-0000-0000-0000-000000000003', name: 'Arrange events', type: 'unscoped', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><rect width=\"8\" height=\"8\" x=\"4\" y=\"4\"/></svg>', }, onExecute(application) { // Execute code goes here }, }); api.commands.applicationRibbon.homeTab.after(addRecords).surfaceCommands(arrangeEvents); Before we arrange the elements, we should first validate that the current selection contains only Event records. If it does not, we'll roll back the mutation and display a description of the problem to the user. Start implementing the new onExecute() method like this: api.runTrackedMutations((application, mutations) => { const selection = application.chart.selection; if ( !selection.entityRecords.every((record) => record.itemType.analyzeId === eventEntityTypeId) ) { return { type: 'rollback', report: { details: 'Selection must contain only Event record types', title: 'Cannot arrange items', type: 'error', }, }; } return { type: 'commit', actionDisplayName: 'Arrange events', }; }); Reload i2 Notebook, start a new chart, and run the two commands in sequence. Running the second command results in a system error. The selected records are all Events, but the mutation handler involves no operations, and committing a mutation that contains no operations is not valid. We'll address that in a moment. Select all the elements on the chart, and run the Arrange Events command again. This time, your error notification appears, because the selection contains more than just Event records. Rolling back a mutation that contains no operations does not result in a system error, and is valid in a scenario like this when you want to display a notification. With the type check in place, we can inspect the date-and-time properties of the selected Event records, sort the records according to the values of those properties, add finally perform the mutation that arranges the elements into that sort order. Add the following code after the selection check. It sorts the selected records and uses setCenter() to move them into their new positions. const { getItemType } = application.chart.schema; const eventEntityType = getItemType(eventEntityTypeId); const startDateTimePropertyType = eventEntityType.getPropertyType(startDateTimePropertyTypeId); /** * @param {import(\"@i2analyze/notebook-sdk\").visual.INode} node */ function getEventDate(node) { const eventRecord = node.records.firstOrDefault(undefined); if (eventRecord === undefined) { throw new Error('Unexpected missing record'); } const eventDateTime = eventRecord.getProperty(startDateTimePropertyType); if (eventDateTime !== undefined && !eventRecord.isValueUnfetched(eventDateTime)) { return /** @type {import(\"@i2analyze/notebook-sdk\").data.IZonedDateTime} */ (eventDateTime); } } /** * @param {import(\"@i2analyze/notebook-sdk\").visual.INode} nodeA * @param {import(\"@i2analyze/notebook-sdk\").visual.INode} nodeB */ function compareEvents(nodeA, nodeB) { const eventADate = getEventDate(nodeA); const eventBDate = getEventDate(nodeB); if (eventADate !== undefined && eventBDate !== undefined) { const dateA = eventADate.dateTime.toJSDate().getTime(); const dateB = eventBDate.dateTime.toJSDate().getTime(); return dateA - dateB; } else { return 0; } } const firstEvent = selection.affectedNodes.firstOrDefault(undefined); if (!firstEvent) { return { type: 'rollback', report: { title: 'Nothing selected', details: 'Nothing was selected, so no events were arranged.', type: 'information', }, }; } const sortedEvents = Array.from(selection.affectedNodes).sort(compareEvents); const targetLocation = firstEvent.center; let targetX = targetLocation.x; for (const event of sortedEvents) { mutations.editNode(event).setCenter(event, { x: targetX, y: targetLocation.y }); targetX += 200; } Finally, mutate the view so that the newly rearranged elements fit inside it. Add this code just before we return from the mutation handler: mutations.view.fitToSelection(); Reload i2 Notebook, start another new chart, and run the commands in sequence. The selected elements are rearranged into a left-to-right temporal layout. Next steps By following the procedure in this tutorial, you've created an i2 Notebook plug-in that demonstrates some of the fundamental techniques for changing the information on an i2 Notebook chart. You've seen how to construct tracked and untracked mutations, how to commit them or roll them back, and how to use them for operations including creating and editing records and moving elements on the chart surface. Many real plug-ins that you write for the i2 Notebook web client will use mutations as the means to achieving their purpose. But no matter how complicated the behavior of your plug-in becomes, the basic principles of interacting with the API do not change."
  },
  "guide/tutorials/react-plugin.html": {
    "href": "guide/tutorials/react-plugin.html",
    "title": "Creating a React plug-in",
    "keywords": "Creating a React plug-in This is a long tutorial that will take a couple of hours to work through. It's designed to function more like a complete hands-on workshop than a simple 'Hello World' example, and takes you from nothing to creating a working (but simplified) replacement for the Record Inspector, using React. The tutorial covers the following concepts: Configuring React correctly Starting a plug-in project Running the i2 Notebook plug-in development proxy Creating and surfacing commands in the application ribbon and the pop-up menu Subscribing to change and selection events, and using them to control the state of commands Creating a tool view Accessing chart data Accessing user data, such as theme choice and locale Formatting, localization, and right-to-left language support Common mistakes when writing plug-ins, with solutions for fixing them And it does so as you build the example through these stages: Create the simplest possible plug-in, without a custom user interface. We'll get it working in a development environment, and then add a ribbon command that accesses chart data and sends some of it to an external website for viewing. Create a custom tool view, and learn about configuring React paths and working with a Content Security Policy. Do some basic styling and theming. Access property data, learn about the facilities that the API provides to assist with consistent formatting, and display images and links to 360 views. (Briefly) cover issues with right-to-left and bidirectional text. Add record-navigation support to the tool view, and learn about restrictions on when you can access i2 Notebook data and best practices for working within those constraints. Learn about persisting tool view state, so that the user interface doesn't reset itself when being docked or floated. Remove the built-in Record Inspector and replace it with our own. Deploy our completed plug-in onto an i2 Analyze server. You can find a full version of the source code for this tutorial in the samples/react-plugin folder. Prerequisites This tutorial requires a running instance of i2 Analyze on which you have permission to use the i2 Notebook web client. To follow the tutorial, you must install at least version 12 of Node.js on your development machine. For downloads and more information about Node.js, visit the project website at https://nodejs.org . The tutorial also requires you to create GUIDs for a number of its elements. The project files use some sample fixed GUIDs ( 00000000-0000-0000-0000-000000000001 , 00000000-0000-0000-0000-000000000002 , and so on), but you should always create real GUIDs for real projects. Note: A suitable GUID generator is available online at https://www.guidgenerator.com . Create a basic UI-free plug-in A basic i2 Notebook plug-in has the same requirements as a more complex one: in the plug-in directory, you must create the manifest and the entry point that enable the i2 Notebook web client to load and integrate your plug-in. The first part of this tutorial covers those requirements, and also explains how to set up both your development environment and a local Node.js server. Create an empty React TypeScript application. For example: npm create vite@latest plugin-react -- --template react-ts Note: The Vite build tool comprises a development server and a build command for creating and testing modern web applications. For more information, see https://vitejs.dev . You don't have to use TypeScript to develop a plug-in for i2 Notebook, but the extra type information makes lots of things more robust, and so we do use it in this tutorial. Change directory to the new plug-in and install the dependencies. For example: cd plugin-react And then: npm install It will likely take several minutes to configure and install the dependencies. Add the i2 Notebook SDK package: npm install @i2analyze/notebook-sdk The package contains a type library that enables inline assistance in your IDE. Now you're in position to write the plug-in itself, starting with the manifest. Using an IDE such as VSCode, create a file named plugin.json in public , with the following contents: { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/plugin-manifest.json\" } The schema enforces the structure and content of the file. For more information, see the plug-in manifest documentation. Continue to populate the manifest with values for \"name\" , \"pluginId\" , and \"pluginVersion\" ; and set \"entryPointUrl\" to \"./entrypoint.js\" . For example: \"name\": \"My i2 Notebook plug-in\", \"pluginId\": \"00000000-0000-0000-0000-000000000001\", \"pluginVersion\": \"1.0.0\", \"entryPointUrl\": \"./entrypoint.js\" Next, we can create the entry point. Add a file named entrypoint.js to the public directory, and populate it: // @ts-check /* global notebook */ /// <reference types=\"@i2analyze/notebook-sdk\" /> async function main() { const api = await notebook.getEntryPointApi('00000000-0000-0000-0000-000000000001', '1.1'); api.logger.info('plug-in running'); api.initializationComplete(); } void main(); Through this code, the plug-in retrieves the version of the entry point API that it wants to use, and uses it to declare that it has finished initializing. The GUID here must match the one in the plug-in manifest. If you enter the code by hand, you'll see how the type library provides auto-completion as you go. Modify tsconfig.json to configure the environment to use \"downlevelIteration\" . In \"compilerOptions\" , add \"downlevelIteration\": true . Back on the command line, start the React project in development mode: npm run dev Make a note of the connection address. For example, http://localhost:5173 . We'll need that to connect to, and reference, our plug-in. Navigate to the project in a web browser. You should see a React demonstration page. Confirm that plugin.json and entrypoint.js are served correctly from their respective paths (for example, http://localhost:5173/plugin.json and http://localhost:5173/entrypoint.js ). Test the plug-in in the i2 Notebook web client While we're developing and testing a plug-in, we won't deploy the plug-in directly to the i2 Analyze server. Instead, we'll use the i2 Notebook SDK plug-in development proxy to add our plug-in to an existing i2 Notebook deployment without needing to modify it. Anywhere on your workstation, create and populate a file named devproxy.json : { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/devproxy.json\" } This forms the basis of the configuration file for the development proxy. Add a value for \"server\" that is the URL of an existing i2 Analyze deployment. For example, \"http://localhost:9082/opal/\" . Add a value for \"port\" to specify the port that the development proxy should listen on. For example, 4000 . Add a value for \"plugins\" that contains the root URL of your plug-in. For example, [\"http://localhost:5173/\"] for the server that we configured above. On the command line, navigate to the folder that contains the configuration file, and start the i2 Notebook plug-in development proxy (no installation is required): npx @i2analyze/notebook-sdk-plugin-proxy --config devproxy.json Open the proxy URL in a browser, log in to the i2 Notebook web client and open a new chart. For example, http://localhost:4000/opal/ . Open the browser's developer console and check for our plug-in's message being logged: If you see this message, then the plug-in is working correctly. Add a ribbon command to the plug-in So far, you have a plug-in that's being loaded into the i2 Notebook web client - but it doesn't do anything. Next, we'll make the plug-in add a command that opens geospatial locations in Google Maps to the application ribbon. In entrypoint.js , just before the call to initializationComplete() , create a command: const viewOnMap = api.commands.createCommand({ id: '00000000-0000-0000-0000-000000000002', name: 'View on map', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><rect width=\"8\" height=\"8\" x=\"4\" y=\"4\"/></svg>', }, type: 'records', onExecute(payload) {}, }); Straight afterward, surface the command on the ribbon's Home tab, just after the Information Store group: api.commands.applicationRibbon.homeTab .after(api.commands.applicationRibbon.homeTab.systemGroups.searchInfoStore) .surfaceCommands(viewOnMap); Reload the i2 Notebook web client, and check that the action is visible in the application ribbon. Clicking the button won't do anything yet because we haven't implemented onExecute() , so let's do that now. Create this helper function at the top level of the entrypoint.js file: /** * @param {import(\"@i2analyze/notebook-sdk\").data.IReadOnlyCollection<import(\"@i2analyze/notebook-sdk\").records.IChartRecord>} records */ function findGeospatialValue(records) { for (const record of records) { for (const propertyType of record.itemType.propertyTypes) { if (propertyType.logicalType === 'geospatial') { const property = record.getProperty(propertyType); if (property !== undefined && !record.isValueUnfetched(property)) { return /** @type {import(\"@i2analyze/notebook-sdk\").data.IGeoPoint} */ (property); } } } } return undefined; } This function performs a simple scan of the records it receives, looking for a non-empty geospatial property that it returns if it finds one. Note: The /** @type {import...} */ and /** @param {import...} */ code helps the JavaScript type system to understand what we're working with, which enables auto-completion in the rest of the code. If we used TypeScript to create our entrypoint.js file, we'd use import type statements instead. We can now use the helper function in the implementation of onExecute() that we left empty in the call to CreateCommand() . We'll take the latitude and longitude to a new Google Maps window: onExecute(payload) { const property = findGeospatialValue(payload.records); if (!property) { return; } window.open( `https://www.google.com/maps/@${property.latitude},${property.longitude},18z`, \"_blank\" ); }, Reload the web client again, select an element with a geospatial property, and try the command. Google Maps should open at the relevant location. Make the command sensitive to selection There's a problem with our command: the button is enabled even if the selection doesn't actually contain a geospatial property. That would be misleading for a user, but we can fix it by taking control of the surfacing of the command in the user interface. After the onExecute() parameter to createCommand() , add an onSurface() function definition: onSurface(action, eventApi, signal) { eventApi.addEventListener( \"recordscontextchange\", (context) => { action.setEnabled(!!findGeospatialValue(context.records)); }, { dispatchNow: true, signal } ); }, There are a few things to notice here: i2 Notebook calls our onSurface() function with an action object that represents the user interface control to which the command is bound each time it is surfaced. A single command might be surfaced in several places, and you can use the action object to react differently in each of them. The function also receives an eventApi object through which it can listen to changes in the records to which the action is being applied; and a signal object that indicates when this particular surfacing of the command is being removed. In our implementation, we subscribe to the recordscontextchange event, which tells us when the current records change. When they do change, we set the enabled state of the action to a value based on whether there is a geospatial value in the current records. Event listeners are normally invoked when the event occurs. However, we don't want to wait for a recordscontextchange event before we run our setEnabled() code, so we specify dispatchNow: true to invoke the callback immediately, without waiting for the event. This in turn causes our action to be enabled or disabled correctly, right away. We forward the signal to the event listener so that it unsubscribes automatically from the recordscontextchange event when the action is unsurfaced. Reload the i2 Notebook web client. The button in the application ribbon is now enabled only when a geospatial property exists in the selection. Use the command in more than one place As well as adding it to the ribbon, we can add exactly the same command to the chart pop-up menu with a single line of code. After the existing call to surfaceCommands() , add: api.commands.chartItemPopupMenu.surfaceCommands(viewOnMap); Reload the web client. The same command, with the same enablement rules, is now present in the chart's pop-up menu. Create a tool view The first part of this tutorial didn't use any features from the React framework! That changes now, as we use React to create a custom user interface for our plug-in: Navigate to the src folder inside the project directory, and create a React component in a new file named ToolView.tsx : export default function ToolView() { return <div>tool-view1 works!</div>; } In the same folder, replace the contents of the generated App.tsx file with: import ToolView from './ToolView'; export default function App() { return ( <div> <ToolView /> </div> ); } In a web browser, load the root page ( / ) from your React development environment ( http://localhost:5173/ ). You should see the message: \"tool-view1 works!\". We'll now turn the React component into an i2 Notebook tool view. In public/entrypoint.js , insert a line before the call to initializationComplete() : const toolView = api.createToolView({ name: 'My tool view', path: './', }); This line declares a tool view by specifying its display name ('My tool view') and its location relative to the entry point , which is ' ./ '. Still in the entry point code, tell i2 Notebook to create a command that opens and closes the tool view: const toggle = api.commands.createToolViewToggleCommand( { id: '00000000-0000-0000-0000-000000000003', name: 'My tool', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><circle cx=\"8\" cy=\"8\" r=\"4\" /></svg>', }, }, toolView ); createToolViewToggleCommand() is a helper function that removes the need to write repetitive code to create a button that will hide or show a tool view. If you want to add additional functionality to the command (for example, disable the button under certain conditions), then you will need to create a normal command (using createCommand() ). Finally, surface the command in the application ribbon's Home tab. This code places it after the View on map command that we developed above: api.commands.applicationRibbon.homeTab.after(viewOnMap.id).surfaceCommands(toggle); Reload the i2 Notebook web client, and you'll see the new button in the ribbon. Click it to display the tool view in the user interface; click it a second time to hide it again. However, while the tool view pane is correctly opening and closing, there's a problem: we don't see the contents of our tool view in the pane. To see what's happening, open up the developer tools in your browser, and look at the network diagnostics. When you click to display the tool view, you'll see that requests to load resources are failing due to Content Security Policy restrictions. We'll fix those problems in the next section. Configure React to serve content from the correct place New React applications are hard-wired to serve their content from the root ( / ) of the server they're running on. i2 Notebook plug-ins, on the other hand, are served from <context root>/plugins/<some directory> on the i2 Analyze server, and our plug-in development proxy is simulating that for us. When you display the React tool view, the .html file loads correctly, but the .tsx file fail to load because the .html file refers to them relative to the root - for example, /src/main.tsx . This would work if the plug-in were served from / , but as it won't be, we need to make React generate the paths differently. We'll adjust the Vite configuration to serve the content from an explicit, hard-coded path. Find the context path that your Liberty server is using. This is the path part of the server URL in your development proxy configuration file. For example, if your server is http://someserver:1234/contextpath , then it's /contextpath that we need. Pick a short plug-in folder name, such as myplugin . The name needs to be different from every other plug-in in your deployment, but remember that you won't have to use it at deployment time; only during development. The path to your plug-in will be /<contextpath>/plugins/<shortname> . For example, /opal/plugins/myplugin . Modify the path to your plug-in in the development proxy configuration file, adding the plug-in path. For example, replace http://localhost:5173/ with http://localhost:5173/opal/plugins/myplugin . Open the vite.config.ts file in the project root, and add base: '/opal/plugins/myplugin' to the defineConfig object: export default defineConfig({ plugins: [react()], base: '/opal/plugins/myplugin', }); Stop the development proxy, and then start it again with the same command as before. Reload the i2 Notebook web client and try the tool view again. There's still no message. Look in the browser console, and you'll see some errors about the browser refusing to load the script within the .html file because of a violation of a content security policy (CSP) directive. We must fix that before we'll be able to apply any styling successfully. Configure the content security policy i2 Notebook runs with a heavily locked-down content security policy (CSP) to limit the attack surface. Vite, however, loads the main.tsx file through a <script> element. It also uses inline styling. Both of these features require a looser CSP. We can use the plug-in manifest to loosen the CSP for our tool view. Edit the public/plugin.json file and add a \"toolViewCsp\" section: \"toolViewCsp\": { \"script-src\": \"'unsafe-inline'\", \"style-src\": \"'unsafe-inline'\" } Once again, reload the i2 Notebook web client and display the tool view. The 'tool-view1 works!' text should now be displayed in the tool view panel. The browser console will now be free of CSP errors associated with styling and scripting for our plug-in, so we can proceed with some styling. Note: If you open the developer tools at this point and look at the console, you will still see other CSP errors where Vite is trying to connect to ws://... . These violations are due to the Vite application developer environment, and you can safely ignore them. Create a hook that provides the tool view API We'll need to access the i2 Notebook tool view API from multiple components in our React application. Also, because fetching the API is asynchronous, we'll want to prevent the React application from loading until it is ready and available to use. To address both of these requirements, we can make the tool view API available through a React hook. In the src folder, create a React context and helper hook in a new file named useToolViewApi.ts : import type { toolview } from '@i2analyze/notebook-sdk'; import { createContext, useContext } from 'react'; export const ToolViewApiContext = createContext<toolview.IToolViewApi | undefined>(undefined); export function useToolViewApi() { return useContext(ToolViewApiContext)!; } In the same folder, replace the contents of App.tsx with the following: import { getToolViewApi } from '@i2analyze/notebook-sdk'; import type { toolview } from '@i2analyze/notebook-sdk'; import { useEffect, useState } from 'react'; import ToolView from './ToolView'; import { ToolViewApiContext } from './useToolViewApi'; export default function App() { const [toolViewApi, setToolViewApi] = useState<toolview.IToolViewApi | undefined>(); useEffect(() => { getToolViewApi().then((api) => { setToolViewApi(api); }); }, []); if (toolViewApi) { return ( <ToolViewApiContext.Provider value={toolViewApi}> <ToolView /> </ToolViewApiContext.Provider> ); } else { return null; } } Let's walk through that code: The App component imports the getToolViewApi() function from the @i2analyze/notebook-sdk package. It calls that function inside a useEffect() , so that getToolViewApi() is called when the App component renders for the first time. After getToolViewApi() returns its value asynchronously, that value is put into the toolViewApi state variable. Until toolViewApi has a value, App renders nothing (via null ). When toolViewApi is available (in practice this will be almost immediately), it renders <ToolView /> inside a custom React context, which makes the API value available to every component in the sub-tree. Configure the tool view for i2 Notebook web client themes The i2 Notebook web client supports a number of visual themes. If you're using a light theme, the \"tool-view1 works!\" text should have been clear in your tool view. But if you're using a dark theme, the text was probably harder to read. We haven't yet configured the tool view to respect and respond to themes. Note: To change the theme in the i2 Notebook web client, go to the user menu and select Settings to open the Settings dialog. To style our tool view correctly, we need to access the theme information and use it to change the appearance of the text. First, in src/main.tsx , remove the import './index.css' . Create a file named src/ToolView.css that contains: .dark-theme { color: white; } .light-theme { color: black; } In other words, we want to set the font color to white in dark themes, and to black in light themes. In src/ToolView.tsx , import useToolViewApi and use it to apply a different CSS class from ToolView.css , based on the current theme: import { useToolViewApi } from './useToolViewApi'; import './ToolView.css'; export default function ToolView() { const toolViewApi = useToolViewApi(); const themeClass = toolViewApi.theme.appearance === 'dark' ? 'dark-theme' : 'light-theme'; return <div className={themeClass}>tool-view1 works!</div>; } Now, our tool view will apply the light-theme or dark-theme class based on theme information from the i2 Notebook web client. Reload the i2 Notebook web client and display the tool view again. Change the theme by swapping between light and dark, and notice how the tool view automatically adjusts its text coloring to match. Access record data We've done a lot of work to make our tool view integrate nicely with the i2 Notebook web client. Now it needs to do something useful. Let's enable it to access the data in selected records, which starts by working out what the current selection is : At the top of the ToolView.tsx file, import the chart namespace from @i2analyze/notebook-sdk and several helpers from React: import { useCallback, useEffect, useState } from 'react'; import type { chart, records } from '@i2analyze/notebook-sdk'; Inside the ToolView() component function, after themeClass calculation, set up an initially empty piece of recordLabel state with: const [recordLabel, setRecordLabel] = useState(''); When the chart selection changes, we'll set our label state to be the label of the first record in the selection. Continue in the same file, defining a selection change handler and a helper function: const setValuesForRecord = useCallback((record: records.IChartRecord | undefined) => { if (record) { setRecordLabel(record.labelOrFallback); } else { setRecordLabel('No records selected.'); } }, []); const handleChartSelectionChange = useCallback<chart.SelectionListener>( (selection) => { const record = selection.records.firstOrDefault(undefined); setValuesForRecord(record); }, [setValuesForRecord] ); The firstOrDefault function returns the first record from the selection, falling back to the specified undefined if there isn't a first record. The labelOrFallback property reads the label of the record, falling back to a standard string if empty. We can use the handler to subscribe to the chartselectionchange event. We must also clean up the event subscription when the ToolView component is unmounted. Just before the return statement, add: useEffect(() => { const unsubscribe = toolViewApi.addEventListener( 'chartselectionchange', handleChartSelectionChange ); return unsubscribe; }, [handleChartSelectionChange, toolViewApi]); Note: This code isn't quite right, but we'll explain why (and come back and fix it) shortly. Now we'll display the extracted record label. Replace the existing return statement with: return ( <div className={themeClass}> <h1 className=\"record-header\">{recordLabel}</h1> </div> ); Note: This and later HTML code uses CSS classes to apply styling to the tool view. To add the classes to your project, replace the existing file at src/ToolView.css with its equivalent from Github . Try the tool view again. Click around on the chart, selecting different items. It does now display the label of the first record in the chart selection, but there's still a problem. Close the tool view, select an item on the chart, and then open the tool view again. Notice that when the tool view opens , it's not displaying the record label. After you change the selection, the tool view does display the label correctly, but it's not displaying correctly at startup. The problem is that we're only setting the recordLabel field after a chartselectionchange event is received. Adding the dispatchNow option to the addEventListener subscription arranges for the chartselectionchange handler to be called immediately. In src/ToolView.tsx , inside the useEffect() addEventListener() call, add a dispatchNow: true option: const unsubscribe = toolViewApi.addEventListener( 'chartselectionchange', handleChartSelectionChange, { dispatchNow: true } ); return unsubscribe; Reload the web client again, select an item, and open the tool view. This time, it immediately displays the label of the first selected record (or our \"No records selected.\" message) without waiting for a selection change. Display property data We have the record label, but we can build up our tool view to display data from more record properties. In ToolView.tsx , modify the existing import to add the data and schema namespaces: import { chart, data, records, schema } from '@i2analyze/notebook-sdk'; Declare an interface that represents how we'll display the properties that we're going to retrieve: interface IProperty { id: schema.ChartPropertyTypeId; label: string; value: data.PropertyValue; } Next, after the recordLabel useState() call, add a state value to store the record property information: const [properties, setProperties] = useState<IProperty[]>([]); And edit setValuesForRecord() to extract property as well as label information from the record: const setValuesForRecord = useCallback((record: records.IChartRecord | undefined) => { if (record) { setRecordLabel(record.labelOrFallback); const properties: IProperty[] = []; for (const propertyType of record.itemType.propertyTypes) { const property = record.getProperty(propertyType); if (property !== undefined && !record.isValueUnfetched(property)) { properties.push({ id: propertyType.id, label: propertyType.displayName, value: property, }); } } setProperties(properties); } else { setRecordLabel('No records selected.'); setProperties([]); } }, []); The record.getProperty() method can return values of type undefined , data.IValueNotFetched , or data.PropertyValue : An undefined value indicates that the record has no value for the specified property type. A not-fetched property value ( data.IValueNotFetched ) indicates that the record does have a value for the property, but we don't have that value in the client at the moment. Note: You can ensure the property is fetched by using the chart.ensurePropertiesFetched() method. A property value ( data.PropertyValue ) can be an object representing any of the legal data types in the schema. It might be a string, or a number, or a more complicated object such as a date, time, date-time, decimal, or geospatial structure. When we have a record, we filter out the undefined and not-fetched properties before displaying the remainder in our tool view. When we have no record at all, we set the properties to be an empty array. Modify the rendering code (the return statement) to display the property data after the record label: return ( <div className={themeClass}> <h1 className=\"record-header\">{recordLabel}</h1> <div className=\"record-properties\"> {properties.map((property) => ( <div key={property.id} className=\"property\"> <div className=\"property-label\">{property.label}</div> <div className=\"property-value\">{property.value}</div> </div> ))} </div> </div> ); Reload the i2 Notebook web client and try out the tool view. Depending on what data you have in your chart, it might or might not work! If you have only string data, it'll work just fine. However, if you have date, time, date-time, or geospatial objects in your selected records, you'll get errors from React along the lines of: Objects are not valid as a React child (found: object with keys {dateTime timeZone, isDst}) . We've attempted to render property values without considering what they are or how to format them. Take a closer look at the typing for data.PropertyValue . It can represent any of the legal data types in the schema! These values might be objects, and in displaying them we should respect the user's locale and formatting settings. Extract the formatter so that it's easy for us to use it in multiple places. In ToolView.tsx , just after the useState() calls, add: const formatter = toolViewApi.formatter; And add a call to formatter.formatValue() in the property value rendering code: <div className=\"property-value\">{formatter.formatValue(property.value)}</div> Reload the i2 Notebook web client and try out the tool view. Property values are now displayed, and numbers, dates, and times are formatted the same as in the rest of the application. Display an image, and a link to more information So far, our tool view displays the label of a selected record and its property values. In this section, we'll go further by displaying an image to represent the record, and by linking to its 360 view (if it has one). First, add state variables in the ToolView component to store the image and the URL, just after the existing useState() calls: const [threeSixtyUrl, setThreeSixtyUrl] = useState<string | undefined>(); const [image, setImage] = useState<data.IImage | undefined>(); In the setValuesForRecord() function, set these properties if we have a record, and clear them if we don't: if (record) { setRecordLabel(record.labelOrFallback); setThreeSixtyUrl(record.get360ViewUrl()); setImage(record.image ?? (record.isEntity() ? record.itemType.image : undefined)); ... } else { setRecordLabel(\"No records selected.\"); setThreeSixtyUrl(undefined); setImage(undefined); ... } This code uses the record image if one exists, and falls back to the image associated with the record's item type if it does not. Still in ToolView.tsx , edit the <h1> rendering code to display the image and the link (if it exists): <h1 className=\"record-header\"> {image ? <img className=\"record-image\" src={image.href} alt={image.description} /> : null} {threeSixtyUrl ? ( <a className=\"record-label\" href={threeSixtyUrl} target=\"_blank\" rel=\"noreferrer\"> {recordLabel} </a> ) : ( <span className=\"record-label\">{recordLabel}</span> )} </h1> The target=\"_blank\" attribute on the <a> element is so that the view opens in a new browser tab or window, rather than in the tool view! React's linting tool recommends rel=\"noreferrer\" . Reload the i2 Notebook web client once again, and watch the behavior of the tool view: For entity records that came from the Information Store, the label is now also a hyperlink. For all records that have images, the tool view displays that image. Support globalization Not all users speak English, and not all languages are read from left to right. If your tool view is aimed internationally, it should flow and display its contents correctly in all locales. The i2 Notebook Web API includes support for dealing with localization. First, let's demonstrate one of the problems by simulating an Arabic locale. In your browser address bar, after the contextpath part of the address, add the query parameter ?translationLocale=ar-sa and reload the page. (For example, http://localhost:4000/opal/?translationLocale=ar-sa#charts ) The i2 Notebook web client responds by simulating the locale of Arabic (Saudi Arabia). Note: The web client actually provides two locales: the translationLocale , which is used for the translation of the text; and the formattingLocale , which is used for formatting data for display. The ?translationLocale query parameter simulates both the translation and the formatting locale. If you display the built-in Record Inspector tool (using the R keyboard shortcut), you'll see how its user interface now flows from right to left. When you open your tool view, however, it still flows from left to right. The API can provide the information that we need. We just have to use it in the right place! In ToolView.tsx , change the top-level <div> element in the return statement to add a dir attribute: <div dir={toolViewApi.locale.flowDirection} className={themeClass}> The flowDirection property has either the value ltr or rtl , which is perfect for use with the dir HTML attribute. Reload the i2 Notebook web client and display the tool view again. It's laid out correctly according to the locale. When you add and remove the ?translationLocale=ar-sa query parameter, the flow alternates between left-to-right and right-to-left behavior. Note: By using the built-in formatter for property values, we get date, time, and numeric formatting for the Arabic (Saudi Arabia) locale automatically. Select items on your chart that have date, time, or numeric properties to see this in action. Another globalization issue is the text in the tool view. When simulating the Arabic (Saudi Arabia) locale, the \"No records selected.\" text doesn't display correctly - it actually displays as \".No records selected\". This problem occurs because the browser is trying to lay out the text from right to left, but it doesn't realize that the \".\" is meant to flow with the text, and shouldn't be considered by itself. (This issue affects most punctuation characters and numbers that aren't considered to be \"left-to-right\" or \"right-to-left\", but instead take their directionality from the context around them.) To get the text to behave correctly, we need to mark it up with bidirectional characters. Once again, we can use the formatter from the tool view API. In ToolView.tsx , use formatter.wrapForBidi() on both renderings of recordLabel . Replace both instances of: <!-- N.B. Don't mark these examples with ```typescript or ```javascript: the prettier formatter will do unwanted things --> { recordLabel; } with: { formatter.wrapForBidi(recordLabel, 'raw'); } Reload the i2 Notebook web client, and continue to simulate the Arabic (Saudi Arabia) locale. The text is now wrapped correctly, and displays with the period at the end of the text as \"No records selected.\" In general, you should use wrapForBidi() for all read-only text that you display to the user. It's particularly important for text whose contents you don't know in advance because it comes from record data. Update the plug-in code to use wrapForBidi() throughout ToolView.tsx . Specifically, the rendering for property-label and property-value becomes: <div className=\"property-label\"> {formatter.wrapForBidi(property.label, \"raw\")} </div> <div className=\"property-value\"> {formatter.wrapForBidi(formatter.formatValue(property.value), \"raw\")} </div> A further consideration for good globalization is that some images and icons should be reversed in right-to-left locales, while others should not. For example, back and forward navigation buttons should always be mirrored. For more information on this and other topics, consult a resource such as https://material.io/design/usability/bidirectionality.html#mirroring-elements . Before you continue with this tutorial, remove the ?translationLocale=ar-sa query parameter to stop simulating the Arabic (Saudi Arabia) locale. Add record navigation to the tool view So far, we have looked only at the first record in the selection, which is useful in an example but not realistic. Now let's look at all the records in the selection, and provide the user with a pair of buttons to page through those records and inspect their properties. As part of this work, we'll demonstrate what errors can occur if you access the data incorrectly, and then show you how to access the data correctly. Add properties for the index of the current record, the total number of records, and the current selection to ToolView , just after the existing useState() calls: const [currentRecordIndex, setCurrentRecordIndex] = useState(0); const [totalRecords, setTotalRecords] = useState(0); const [selection, setSelection] = useState<chart.ISelection | undefined>(); We'll store the selection and choose a record based on currentRecordIndex . Replace the implementation of handleChartSelectionChange() with the following code: const handleChartSelectionChange = useCallback<chart.SelectionListener>((selection) => { setCurrentRecordIndex(0); setTotalRecords(selection.records.size); setSelection(selection); }, []); useEffect(() => { const records = Array.from(selection?.records || []); setValuesForRecord(records[currentRecordIndex]); }, [selection, setValuesForRecord, currentRecordIndex]); Note: This code isn't quite right, but we'll explain why (and come back and fix it) shortly. Also, ignore any lint warnings you see about the last line for now. They're actually the least of our worries! This stores the selection each time it changes, and uses a useEffect() to update the values for the component each time the current record index changes. Next, we're going to move the responsibility for reporting a lack of records from the record display to a title area. In the setValuesForRecord() function, replace this code: setRecordLabel('No records selected.'); with: setRecordLabel(''); Add handler functions to update the currentRecordIndex , just above handleChartSelectionChange() : const handlePreviousButtonClick = () => { setCurrentRecordIndex((r) => r - 1); }; const handleNextButtonClick = () => { setCurrentRecordIndex((r) => r + 1); }; And just before the return statement, compute a navigationTitle value: const navigationTitle = formatter.wrapForBidi( totalRecords > 0 ? `Record ${formatter.formatValue(currentRecordIndex + 1)} of ${formatter.formatValue( totalRecords )}` : 'No records selected.', 'raw' ); This code creates a title with formatted numbers for the selected record and the total record count. Inside the return statement, just above the <h1> element, add the title and our navigation buttons: <div className=\"record-navigation\"> <div>{navigationTitle}</div> {totalRecords > 0 ? ( <div className=\"navigation-buttons\"> <button className=\"navigation-button\" onClick={handlePreviousButtonClick} title=\"Previous record\" disabled={currentRecordIndex === 0} > &lt; </button> <button className=\"navigation-button\" onClick={handleNextButtonClick} title=\"Next record\" disabled={currentRecordIndex === totalRecords - 1} > &gt; </button> </div> ) : null} </div> This gives users a pair of buttons for changing the current record, and a title displaying which record they're viewing out of the total. It hides the buttons if there are no records selected. Reload the i2 Notebook web client and open the plug-in. It doesn't work. If you look in the console, you'll see an error message: Application and chart data MUST only be accessed during event listener or transaction listener callbacks. It is not safe to access data at any other time. We are trying to access data outside an event or transaction listener. We store the selection data in our component, and attempt to read it when the user clicks Next . It doesn't matter if you're storing the selection or the records. You cannot access i2 Notebook chart data outside an event, mutation, or transaction listener. This rule ensures that API consumers always see a consistent view of the application data. Whenever you want to read data outside an event handler, you must request access to it from the application through a transaction or a mutation. Remove the selection useState() line from ToolView.tsx . Instead of storing the records, we'll use the current record index to request the record that we want from the application. Replace the handleChartSelectionChange() function and the useEffect() after it (which read the selection state variable) with this code: const handleChartSelectionChange = useCallback<chart.SelectionListener>( (selection) => { setCurrentRecordIndex(0); setTotalRecords(selection.records.size); setValuesForRecord(selection.records.firstOrDefault(undefined)); }, [setValuesForRecord] ); useEffect(() => { toolViewApi.runTransaction((application) => { const selection = application.chart.selection; const records = Array.from(selection.records); setTotalRecords(selection.records.size); const record = records[currentRecordIndex]; setValuesForRecord(record); }); }, [toolViewApi, setValuesForRecord, currentRecordIndex]); Working through this new code in detail: The i2 Notebook web client calls the handleChartSelectionChange() function when the chart selection changes. As such, the function is permitted to access as much application data as it likes. As before, it resets the currently selected record index to 0, stores the total number of selected records, and then invokes setValuesForRecord() to set the component state for the record. The useEffect() listens for changes in the currentRecordIndex , and in response to these changes schedules an i2 Notebook application transaction. The callback that runs under that transaction accesses the chart selection and retrieves the currently indexed record, calling setValuesForRecord() . This provides safe access for all of our data. Reload the i2 Notebook web client, select multiple items on the chart, and try using the buttons in our tool view to navigate among their records. Now, it works! Extension: Ensure fetched properties While viewing record properties, eventually a property will be shown as Exists but not fetched . You can ensure that the property is fetched. Change the useEffect() function so that it ensures all properties are fetched before setting the values for records: useEffect(() => { toolViewApi.runTransaction(async (application) => { const selection = application.chart.selection; const records = Array.from(selection.records); setTotalRecords(selection.records.size); const record = records[currentRecordIndex]; if (record) { const propertyTypes = record.itemType.propertyTypes; await application.chart.ensurePropertiesFetched(record, propertyTypes); } setValuesForRecord(record); }); }, [toolViewApi, setValuesForRecord, currentRecordIndex]); Store and restore state when the tool view is floated and docked Our tool view is almost complete, but for now there are still problems to solve. For example, you can select multiple items on the chart surface, and navigate to the second record in the selection by clicking Next . But if you then float the tool view, it returns to showing the first record again. When a tool view is docked or floated, its user interface is completely recreated in a different browser window, causing all of its temporary state to be lost. To address this, we can make use of the volatile store that's available from the tool view API. This store allows us to store state so that it survives tool view re-creation. (It's called the \"volatile\" store because its state does not persist across application reloads.) In ToolView.tsx , add toolview to the @i2analyze/notebook-sdk import: import { chart, data, records, schema, toolview } from '@i2analyze/notebook-sdk'; In ToolView.tsx , just before the computation of navigationTitle , add this code to save the current record index when the tool view is unloading: const handleUnload = useCallback<toolview.ToolViewUnloadListener>(() => { toolViewApi.volatileStore.set('currentRecordIndex', currentRecordIndex); }, [toolViewApi, currentRecordIndex]); useEffect(() => { return toolViewApi.addEventListener('unload', handleUnload); }, [toolViewApi, handleUnload]); This code means that we store currentRecordIndex when the tool view is unloaded. Modify the existing useEffect() function that subscribes to chartselectionchange to retrieve the value of currentRecordIndex from the volatile store when the tool view is loaded. Add the following code before the return unsubscribe line: const initialIndex = toolViewApi.volatileStore.get<number>('currentRecordIndex') || 0; setCurrentRecordIndex(initialIndex); Because we're now fetching data immediately when the tool view starts up, we no longer need to use the dispatchNow option for the chartselectionchange event handler in the above useEffect() . Remove it, leaving the event subscription as follows: const unsubscribe = toolViewApi.addEventListener( 'chartselectionchange', handleChartSelectionChange ); The tool view now correctly maintains its state across docking and floating operations. Clear state when the tool view is closed We're now preserving the tool view state across floating and docking operations. However, we're also preserving that state if the user explicitly closes the tool view, which isn't appropriate. When the user closes the tool view, we should reset the state. The unload event can tell us whether the tool view is being unloaded because of an explicit close operation. In ToolView.tsx , change the handleUnload() function to: const handleUnload = useCallback<toolview.ToolViewUnloadListener>( (isClosing) => { if (isClosing) { toolViewApi.volatileStore.clear(); } else { toolViewApi.volatileStore.set('currentRecordIndex', currentRecordIndex); } }, [toolViewApi, currentRecordIndex] ); Now, if the tool view is being closed, we'll discard our state. Otherwise, we'll persist it. Reload the i2 Notebook web client to test the changes we've made. Closing the tool view will reset the record index. Replace the built-in Record Inspector with our tool view We now have a functional tool view that allows users to view some of the details of a record. We can even use it to replace the web client's built-in Record Inspector! Removing the Record Inspector is easy. Edit public/entrypoint.js to insert the following command-removal code just before the call to initializationComplete() : api.commands.removeCommand(api.commands.systemCommands.toggleRecordInspector); Change the tool view toggle command name to \"Record inspector plug-in\", and add a keyboardHelp section so that the tool can be opened using a keyboard shortcut: const toggle = api.commands.createToolViewToggleCommand( { id: '00000000-0000-0000-0000-000000000003', name: 'Record inspector plug-in', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><circle cx=\"8\" cy=\"8\" r=\"4\" /></svg>', }, keyboardHelp: { category: 'discover', label: 'Toggle record inspector plug-in', keys: ['shift+r'], }, }, toolView ); Reload the i2 Notebook web client, and you should see that: The built-in \"Record Inspector\" tool has been removed. The keyboard help dialog (displayed by pressing \"h\") lists the keyboard shortcut Shift+R for our tool view. Using the keyboard shortcut shift+r also toggles our tool view. Deploy the plug-in Before we can deploy our React plug-in to a real server, we need to make a production build. Run the following command from the plugin-react directory: npm run build This creates a production build of the plug-in inside build . For the actual deployment, we need to add the built plug-in to the server configuration, and then redeploy the server. Note: If you follow this procedure in a deployment that provides high availability, you must complete each step on every Liberty server in your environment before you move to the next step. On the server that hosts the i2 Analyze deployment, find the toolkit/configuration directory, and then navigate to the fragments/opal-services directory that it contains. If the opal-services directory does not already contain a plugins subdirectory, create one. Copy the build directory so that it becomes a subdirectory of plugins , and rename it as you like. For example, plugins/plugin-react . Run the following toolkit commands to update the deployed i2 Analyze server: setup -t stopLiberty setup -t deployLiberty setup -t startLiberty Stop the development proxy, and use the browser to navigate to your real server address. You'll find that your plug-in was successfully deployed. Next steps In this tutorial, we've: Created a command to show a record's position on a map, and added that command to the application ribbon and the chart pop-up menu Created a tool view to display record data, and replaced the built-in Record Inspector with this new tool view Considered data access, formatting, and globalization Deployed our plug-in on the i2 Analyze server This is just a flavor of what you can do with the @i2analyze/notebook-sdk package. To understand more about the capabilities of the i2 Notebook Web API, see the rest of the SDK documentation."
  },
  "guide/tutorials/tutorials.html": {
    "href": "guide/tutorials/tutorials.html",
    "title": "Tutorials",
    "keywords": "Tutorials The i2 Notebook SDK provides detailed tutorials that illustrate creating plug-ins of varying complexity, using a number of popular frameworks. At present, the list is as follows: Creating a basic plug-in This tutorial takes you through creating a basic plug-in for the i2 Web Client that can take geospatial data from records on a chart and visualize it on a map outside the application. Creating a production-ready plug-in with create-notebook-plugin This tutorial takes you through creating a production-ready plug-in for the i2 Web Client using the create-notebook-plugin tool. Creating a plug-in with the Angular framework This tutorial takes you from nothing to creating a working (but simplified) replacement for the Record Inspector, using Angular. Creating a plug-in with the React framework This tutorial takes you from nothing to creating a working (but simplified) replacement for the Record Inspector, using React. Creating a plug-in with the Vue framework This tutorial takes you from nothing to creating a working (but simplified) replacement for the Record Inspector, using Vue. Creating a plug-in that writes to a chart This tutorial builds on the create-notebook-plugin tutorial to demonstrate adding records to a web chart, and then changing the layout and appearance of that chart. Creating a plug-in that changes the colors of nodes This tutorial builds on the create-notebook-plugin tutorial to demonstrate discovering and changing the colors of particular nodes on a web chart. You can always find the latest version of the source code for each tutorial in the samples folder."
  },
  "guide/tutorials/vue-plugin.html": {
    "href": "guide/tutorials/vue-plugin.html",
    "title": "Creating a Vue plug-in",
    "keywords": "Creating a Vue plug-in This is a long tutorial that will take a couple of hours to work through. It's designed to function more like a complete hands-on workshop than a simple 'Hello World' example, and takes you from nothing to creating a working (but simplified) replacement for the Record Inspector, using Vue. The tutorial covers the following concepts: Configuring Vue correctly Starting a plug-in project Running the i2 Notebook plug-in development proxy Creating and surfacing commands in the application ribbon and the pop-up menu Subscribing to change and selection events, and using them to control the state of commands Creating a tool view Accessing chart data Accessing user data, such as theme choice and locale Formatting, localization, and right-to-left language support Common mistakes when writing plug-ins, with solutions for fixing them And it does so as you build the example through these stages: Create the simplest possible plug-in, without a custom user interface. We'll get it working in a development environment, and then add a ribbon command that accesses chart data and sends some of it to an external website for viewing. Create a custom tool view, and learn about configuring Vue paths and working with a Content Security Policy. Do some basic styling and theming. Access property data, learn about the facilities that the API provides to assist with consistent formatting, and display images and links to 360 views. (Briefly) cover issues with right-to-left and bidirectional text. Add record-navigation support to the tool view, and learn about restrictions on when you can access i2 Notebook data and best practices for working within those constraints. Learn about persisting tool view state, so that the user interface doesn't reset itself when being docked or floated. Remove the built-in Record Inspector and replace it with our own. Deploy our completed plug-in onto an i2 Analyze server. You can find a full version of the source code for this tutorial in the samples/vue-plugin folder. Prerequisites This tutorial requires a running instance of i2 Analyze on which you have permission to use the i2 Notebook web client. To follow the tutorial, you must install at least version 12 of Node.js on your development machine. For downloads and more information about Node.js, visit the project website at https://nodejs.org . The tutorial also requires you to create GUIDs for a number of its elements. The project files use some sample fixed GUIDs ( 00000000-0000-0000-0000-000000000001 , 00000000-0000-0000-0000-000000000002 , and so on), but you should always create real GUIDs for real projects. Note: A suitable GUID generator is available online at https://www.guidgenerator.com . Create a basic UI-free plug-in A basic i2 Notebook plug-in has the same requirements as a more complex one: in the plug-in directory, you must create the manifest and the entry point that enable the i2 Notebook web client to load and integrate your plug-in. The first part of this tutorial covers those requirements, and also explains how to set up both your development environment and a local Node.js server. Create an empty Vue TypeScript application. For example: npm create vite@latest plugin-vue -- --template vue-ts Note: The Vite build tool comprises a development server and a build command for creating and testing modern web applications. For more information, see https://vitejs.dev . You don't have to use TypeScript to develop a plug-in for i2 Notebook, but the extra type information makes lots of things more robust, and so we do use it in this tutorial. Change directory to the new plug-in and install the dependencies. For example: cd plugin-vue And then: npm install It will likely take several minutes to configure and install the dependencies. Add the i2 Notebook SDK package: npm install @i2analyze/notebook-sdk The package contains a type library that enables inline assistance in your IDE. Now you're in position to write the plug-in itself, starting with the manifest. Using an IDE such as VSCode, create a file named plugin.json in public , with the following contents: { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/plugin-manifest.json\" } The schema enforces the structure and content of the file. For more information, see the plug-in manifest documentation. Continue to populate the manifest with values for \"name\" , \"pluginId\" , and \"pluginVersion\" ; and set \"entryPointUrl\" to \"./entrypoint.js\" . For example: \"name\": \"My i2 Notebook plug-in\", \"pluginId\": \"00000000-0000-0000-0000-000000000001\", \"pluginVersion\": \"1.0.0\", \"entryPointUrl\": \"./entrypoint.js\" Next, we can create the entry point. Add a file named entrypoint.js to the public directory, and populate it: // @ts-check /* global notebook */ /// <reference types=\"@i2analyze/notebook-sdk\" /> async function main() { const api = await notebook.getEntryPointApi('00000000-0000-0000-0000-000000000001', '1.1'); api.logger.info('plug-in running'); api.initializationComplete(); } void main(); Through this code, the plug-in retrieves the version of the entry point API that it wants to use, and uses it to declare that it has finished initializing. The GUID here must match the one in the plug-in manifest. If you enter the code by hand, you'll see how the type library provides auto-completion as you go. Back on the command line, start the Vue project in development mode: npm run dev Make a note of the connection address. For example, http://localhost:5173 . We'll need that to connect to, and reference, our plug-in. Navigate to the project in a web browser. You should see a Vue demonstration page. Confirm that plugin.json and entrypoint.js are served correctly from their respective paths (for example, http://localhost:5173/plugin.json and http://localhost:5173/entrypoint.js ). Test the plug-in in the i2 Notebook web client While we're developing and testing a plug-in, we won't deploy the plug-in directly to the i2 Analyze server. Instead, we'll use the i2 Notebook SDK plug-in development proxy to add our plug-in to an existing i2 Analyze deployment without needing to modify it. Anywhere on your workstation, create and populate a file named devproxy.json : { \"$schema\": \"https://i2group.github.io/notebook-sdk/schemas/devproxy.json\" } This forms the basis of the configuration file for the development proxy. Add a value for \"server\" that is the URL of an existing i2 Analyze deployment. For example, \"http://localhost:9082/opal/\" . Add a value for \"port\" to specify the port that the development proxy should listen on. For example, 4000 . Add a value for \"plugins\" that contains the root URL of your plug-in. For example, [\"http://localhost:5173/\"] for the server that we configured above. On the command line, navigate to the folder that contains the configuration file, and start the i2 Notebook plug-in development proxy (no installation is required): npx @i2analyze/notebook-sdk-plugin-proxy --config devproxy.json Open the proxy URL in a browser (for example, http://localhost:4000/opal/ ), log in to the i2 Notebook web client, and open a new chart. Open the browser's developer console and check for our plug-in's message being logged: If you see this message, then the plug-in is working correctly. Add a ribbon command to the plug-in So far, you have a plug-in that's being loaded into the i2 Notebook web client - but it doesn't do anything. Next, we'll make the plug-in add a command that opens geospatial locations in Google Maps to the application ribbon. In entrypoint.js , just before the call to initializationComplete() , create a command: const viewOnMap = api.commands.createCommand({ id: '00000000-0000-0000-0000-000000000002', name: 'View on map', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><rect width=\"8\" height=\"8\" x=\"4\" y=\"4\"/></svg>', }, type: 'records', onExecute(payload) {}, }); Straight afterward, surface the command on the ribbon's Home tab, just after the Information Store group: api.commands.applicationRibbon.homeTab .after(api.commands.applicationRibbon.homeTab.systemGroups.searchInfoStore) .surfaceCommands(viewOnMap); Reload the i2 Notebook web client, and check that the action is visible in the application ribbon. Clicking the button won't do anything yet because we haven't implemented onExecute() , so let's do that now. Create this helper function at the top level of the entrypoint.js file: /** * @param {import(\"@i2analyze/notebook-sdk\").data.IReadOnlyCollection<import(\"@i2analyze/notebook-sdk\").records.IChartRecord>} records */ function findGeospatialValue(records) { for (const record of records) { for (const propertyType of record.itemType.propertyTypes) { if (propertyType.logicalType === 'geospatial') { const property = record.getProperty(propertyType); if (property !== undefined && !record.isValueUnfetched(property)) { return /** @type {import(\"@i2analyze/notebook-sdk\").data.IGeoPoint} */ (property); } } } } return undefined; } This function performs a simple scan of the records it receives, looking for a non-empty geospatial property that it returns if it finds one. Note: The /** @type {import...} */ and /** @param {import...} */ code helps the JavaScript type system to understand what we're working with, which enables auto-completion in the rest of the code. If we used TypeScript to create our entrypoint.js file, we'd use import type statements instead. We can now use the helper function in the implementation of onExecute() that we left empty in the call to CreateCommand() . We'll take the latitude and longitude to a new Google Maps window: onExecute(payload) { const property = findGeospatialValue(payload.records); if (!property) { return; } window.open( `https://www.google.com/maps/@${property.latitude},${property.longitude},18z`, \"_blank\" ); }, Reload the web client again, select an element with a geospatial property, and try the command. Google Maps should open at the relevant location. Make the command sensitive to selection There's a problem with our command: the button is enabled even if the selection doesn't actually contain a geospatial property. That would be misleading for a user, but we can fix it by taking control of the surfacing of the command in the user interface. After the onExecute() parameter to createCommand() , add an onSurface() function definition: onSurface(action, eventApi, signal) { eventApi.addEventListener( \"recordscontextchange\", (context) => { action.setEnabled(!!findGeospatialValue(context.records)); }, { dispatchNow: true, signal } ); }, There are a few things to notice here: i2 Notebook calls our onSurface() function with an action object that represents the user interface control to which the command is bound each time it is surfaced. A single command might be surfaced in several places, and you can use the action object to react differently in each of them. The function also receives an eventApi object through which it can listen to changes in the records to which the action is being applied; and a signal object that indicates when this particular surfacing of the command is being removed. In our implementation, we subscribe to the recordscontextchange event, which tells us when the current records change. When they do change, we set the enabled state of the action to a value based on whether there is a geospatial value in the current records. Event listeners are normally invoked when the event occurs. However, we don't want to wait for a recordscontextchange event before we run our setEnabled() code, so we specify dispatchNow: true to invoke the callback immediately, without waiting for the event. This in turn causes our action to be enabled or disabled correctly, right away. We forward the signal to the event listener so that it unsubscribes automatically from the recordscontextchange event when the action is unsurfaced. Reload the i2 Notebook web client. The button in the application ribbon is now enabled only when a geospatial property exists in the selection. Use the command in more than one place As well as adding it to the ribbon, we can add exactly the same command to the chart pop-up menu with a single line of code. After the existing call to surfaceCommands() , add: api.commands.chartItemPopupMenu.surfaceCommands(viewOnMap); Reload the web client. The same command, with the same enablement rules, is now present in the chart's pop-up menu. Create a tool view The first part of this tutorial didn't use any features from the Vue framework! That changes now, as we use Vue to create a custom user interface for our plug-in. Navigate to the src/components folder inside the project directory, and create a Vue component in a new file named ToolView.vue : <template> <div>tool-view1 works!</div> </template> <script lang=\"ts\"> import { defineComponent } from 'vue'; export default defineComponent({ name: 'ToolView', }); </script> <style scoped></style> In the parent src folder, replace the contents of the generated App.vue file with: <template> <div><ToolView /></div> </template> <script lang=\"ts\"> import { defineComponent } from 'vue'; import ToolView from './components/ToolView.vue'; export default defineComponent({ name: 'App', components: { ToolView, }, }); </script> <style></style> In a web browser, load the root page ( / ) from your Vue development environment ( http://localhost:5173/ ). You should see the message: \"tool-view1 works!\". We'll now turn the Vue component into an i2 Notebook tool view. In public/entrypoint.js , insert a line before the call to initializationComplete() : const toolView = api.createToolView('My tool view', './'); This line declares a tool view by specifying its display name ('My tool view') and its location relative to the entry point , which is ' ./ '. Still in the entry point code, tell i2 Notebook to create a command that opens and closes the tool view: const toggle = api.commands.createToolViewToggleCommand( { id: '00000000-0000-0000-0000-000000000003', name: 'My tool', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><circle cx=\"8\" cy=\"8\" r=\"4\" /></svg>', }, }, toolView ); Finally, surface the command in the application ribbon's Home tab. This code places it after the View on map command that we developed above: api.commands.applicationRibbon.homeTab.after(viewOnMap.id).surfaceCommands(toggle); Reload the i2 Notebook web client, and you'll see the new button in the ribbon. Click it to display the tool view in the user interface; click it a second time to hide it again. However, while the tool view pane is correctly opening and closing, there's a problem: we don't see the contents of our tool view in the pane. There are actually several reasons why the tool view isn't working yet. We'll take them one at a time. To see what's happening, open up the developer tools in your browser, and look at the network diagnostics. When you click to display the tool view, you'll see that requests to load resources are failing due to content security policy restrictions. We'll fix those problems in the next section. Configure Vue to serve content from the correct place New Vue applications are hard-wired to serve their content from the root ( / ) of the server they're running on. i2 Notebook plug-ins, on the other hand, are served from <context root>/plugins/<some directory> on the i2 Analyze server, and our plug-in development proxy is simulating that for us. When you display the Vue tool view, the .html file loads correctly, but the .ts file fails to load because the .html file refers to it relative to the root - for example, /src/main.ts . This would work if the plug-in were served from / , but as it won't be, we need to make Vue generate the path differently. We'll adjust the Vite configuration to serve the content from an explicit, hard-coded path. Find the context path that your Liberty server is using. This is the path part of the server URL in your development proxy configuration file. For example, if your server is http://someserver:1234/contextpath , then it's /contextpath that we need. Pick a short plug-in folder name, such as myplugin . The name needs to be different from every other plug-in in your deployment, but remember that you won't have to use it at deployment time; only during development. The path to your plug-in will be /<contextpath>/plugins/<shortname> . For example, /opal/plugins/myplugin . Modify the path to your plug-in in the development proxy configuration file, adding the plug-in path. For example, replace http://localhost:5173/ with http://localhost:5173/opal/plugins/myplugin . Open the vite.config.ts file in the project root, and add base: '/opal/plugins/myplugin' to the defineConfig object: export default defineConfig({ plugins: [vue()], base: '/opal/plugins/myplugin', }); Stop the development proxy, and then start it again with the same command as before. Reload the i2 Notebook web client and try the tool view again. The 'tool-view1 works!' text should now be displayed in the tool view panel. However, if you're using a dark theme in the application, it might be hard to see the black text on a dark background. We'll fix that by adding some simple theming support, but before we can do so, we must fix another problem. Look in the browser console, and you'll see some warnings about the browser refusing to apply inline styles because of a violation of another content security policy (CSP) directive. We must fix that before we'll be able to apply any styling successfully. Configure the Content Security Policy i2 Notebook runs with a heavily locked-down Content Security Policy (CSP) to limit the attack surface. Vue, however, uses features (specifically, inline styling) that require a looser CSP. We can use the plug-in manifest to loosen the CSP for our tool view. Edit the public/plugin.json file and add a \"toolViewCsp\" section: \"toolViewCsp\": { \"style-src\": \"'unsafe-inline'\" } Once again, reload the i2 Notebook web client and display the tool view. The browser console will now be free of styling CSP errors, so we can proceed with some styling. Note: If you open the developer tools at this point and look at the console, you will still see other CSP errors where Vite is trying to connect to ws://... . These violations are due to the Vite application developer environment, and you can safely ignore them. Create a component that provides the tool view API We'll need to access the i2 Notebook tool view API from multiple components in our Vue application. Also, because fetching the API is asynchronous, we'll want to prevent the Vue application from loading until it is ready and available to use. To address both of these requirements, we can make the tool view API available through a Vue component. In the src folder, replace the contents of App.vue with the following: <template> <div v-if=\"toolViewApi\"> <ToolView :toolViewApi=\"toolViewApi\" /> </div> </template> <script lang=\"ts\"> import { getToolViewApi, toolview } from '@i2analyze/notebook-sdk'; import { defineComponent } from 'vue'; import ToolView from './components/ToolView.vue'; export default defineComponent({ name: 'App', components: { ToolView, }, data() { return { toolViewApi: undefined as toolview.IToolViewApi | undefined, }; }, async mounted() { this.toolViewApi = await getToolViewApi(); }, }); </script> <style></style> Let's walk through that code: The App component imports the getToolViewApi() function from the @i2analyze/notebook-sdk package. It calls that function inside a mounted() method, so that getToolViewApi() is called when the App instance is mounted. After getToolViewApi() returns its value asynchronously, that value is put into the toolViewApi data property. Until toolViewApi has a value, App renders nothing. When toolViewApi is available (in practice this will be almost immediately), it renders <ToolView :toolViewApi=\"toolViewApi\" /> , which makes the API value available via a prop in the child component ( ToolView ). Configure the tool view for i2 Notebook web client themes The i2 Notebook web client supports a number of visual themes. If you're using a light theme, the \"tool-view1 works!\" text should have been clear in your tool view. But if you're using a dark theme, the text was probably harder to read. We haven't yet configured the tool view to respect and respond to themes. Note: To change the theme in the i2 Notebook web client, go to the user menu and select Settings to open the Settings dialog. To style our tool view correctly, we need to access the theme information and use it to change the appearance of the text. First, in src/main.ts , remove the import './style.css' . In src/components/ToolView.vue , add the following CSS to the <style> element: .dark-theme { color: white; } .light-theme { color: black; } In other words, we want to set the font color to white in dark themes, and to black in light themes. In the same file, modify the component so that it accepts the toolViewApi property and uses it to set the component styling: <template> <div :class=\"themeClass\">tool-view1 works!</div> </template> <script lang=\"ts\"> import { toolview } from '@i2analyze/notebook-sdk'; import { defineComponent, PropType } from 'vue'; export default defineComponent({ name: 'ToolView', props: { toolViewApi: { type: Object as PropType<toolview.IToolViewApi>, required: true, }, }, computed: { themeClass(): string { return this.toolViewApi.theme.appearance === 'dark' ? 'dark-theme' : 'light-theme'; }, }, }); </script> Now, our tool view will apply the light-theme or dark-theme class based on theme information from the i2 Notebook web client. Reload the i2 Notebook web client and display the tool view again. Change the theme by swapping between light and dark, and notice how the tool view automatically adjusts its text coloring to match. Access record data We've done a lot of work to make our tool view integrate nicely with the i2 Notebook web client. Now it needs to do something useful. Let's enable it to access the data in selected records, which starts by working out what the current selection is : In src/components/ToolView.vue , add the mounted() method to the ToolView component, and subscribe to the chartselectionchange event. Also add the unmounted() method to clean up the subscription when the ToolView component is unmounted: mounted() { this.toolViewApi.addEventListener( \"chartselectionchange\", this.handleChartSelectionChange ); }, unmounted() { this.toolViewApi.removeEventListener( \"chartselectionchange\", this.handleChartSelectionChange ); } And then add the selection change handler to the methods object: methods: { handleChartSelectionChange() { this.toolViewApi.logger.info(\"Chart selection has changed\"); } } Reload the i2 Notebook web client and open the browser console. As you change the selection on the chart, you should see messages from your tool view: \" My i2 Notebook plug-in Chart selection has changed\". The chartselectionchange event provides the current selection in its payload. Change the implementation of handleChartSelectionChange() to take the label from the first record in the selection and display it in the tool view: Still in ToolView.vue , add the chart and records namespaces from the @i2analyze/notebook-sdk package to the existing import statement: import { toolview, chart, records } from '@i2analyze/notebook-sdk'; In the ToolView component, add a data() function with a recordLabel property: data() { return { recordLabel: \"\" } } Change handleChartSelectionChange() as follows, and add setValuesForRecord() to the methods object: methods: { handleChartSelectionChange(selection: chart.ISelection) { const record = selection.records.firstOrDefault(undefined); this.setValuesForRecord(record); }, setValuesForRecord(record: records.IChartRecord | undefined) { if (record) { this.recordLabel = record.labelOrFallback; } else { this.recordLabel = \"No records selected.\"; } } } The firstOrDefault function returns the first record from the selection, falling back to the specified undefined if there isn't a first record. The labelOrFallback property reads the label of the record, falling back to a standard string if empty. Now we'll display the extracted record label. Replace the existing <template> element with: <template> <div :class=\"themeClass\"> <h1 class=\"record-header\">{{ recordLabel }}</h1> </div> </template> Note: This and later HTML code uses CSS classes to apply styling to the tool view. To add the classes to your project, replace the <style> element in this file with its equivalent from the ToolView.vue file on Github . Try the tool view again. Click around on the chart, selecting different items. It does now display the label of the first record in the chart selection, but there's still a problem. Close the tool view, select an item on the chart, and then open the tool view again. Notice that when the tool view opens , it's not displaying the record label. After you change the selection, the tool view does display the label correctly, but it's not displaying correctly at startup. The problem is that we're only setting the recordLabel field after a chartselectionchange event is received. Adding the dispatchNow option to the addEventListener subscription arranges for the chartselectionchange handler to be called immediately. In ToolView.vue , inside the mounted() method addEventListener call, add a dispatchNow: true option: mounted() { this.toolViewApi.addEventListener( \"chartselectionchange\", this.handleChartSelectionChange, { dispatchNow: true } ); } Reload the web client again, select an item, and open the tool view. This time, it immediately displays the label of the first selected record (or our \"No records selected.\" message) without waiting for a selection change. Display property data We have the record label, but we can build up our tool view to display data from more record properties. In ToolView.vue , modify the existing import to add the schema namespace: import { chart, records, schema, toolview } from '@i2analyze/notebook-sdk'; Declare an interface that represents how we'll display the properties that we're going to retrieve: interface IProperty { id: schema.ChartPropertyTypeId; label: string; value: string; } Next, after the recordLabel , add a property to the data() function that will store the record property information: data() { return { recordLabel: \"\", properties: [] as IProperty[] }; } And edit setValuesForRecord() to extract property as well as label information from the record: setValuesForRecord(record: records.IChartRecord | undefined) { const formatter = this.toolViewApi.formatter; if (record) { this.recordLabel = record.labelOrFallback; const properties: IProperty[] = []; for (const propertyType of record.itemType.propertyTypes) { const label = propertyType.displayName; const value = record.getProperty(propertyType); if (value !== undefined && !record.isValueUnfetched(value)) { const formattedValue = formatter.formatValue(value); properties.push({ id: propertyType.id, label, value: formattedValue, }); } } this.properties = properties; } else { this.recordLabel = \"No records selected.\"; this.properties = []; } } The record.getProperty() method can return values of type undefined , data.IValueNotFetched , or data.PropertyValue : An undefined value indicates that the record has no value for the specified property type. A not-fetched property value ( data.IValueNotFetched ) indicates that the record does have a value for the property, but we don't have that value in the client at the moment. Note: You can ensure the property is fetched by using the chart.ensurePropertiesFetched() method. A property value ( data.PropertyValue ) can be an object representing any of the legal data types in the schema. It might be a string, or a number, or a more complicated object such as a date, time, date-time, decimal, or geospatial structure. Vue cannot directly render any of these structures, so we use the formatter.formatValue() method to produce standard i2 Notebook string representations of them. When we have a record, we filter out the undefined and not-fetched properties before displaying the remainder in our tool view. When we have no record at all, we set the properties to be an empty array. In ToolView.vue , add some elements to the <template> to display the property data after the record label: <template> <div :class=\"themeClass\"> <h1 class=\"record-header\">{{ recordLabel }}</h1> <div class=\"record-properties\"> <div class=\"property\" v-for=\"property in properties\" :key=\"property.id\"> <div class=\"property-label\">{{ property.label }}</div> <div class=\"property-value\">{{ property.value }}</div> </div> </div> </div> </template> Reload the i2 Notebook web client and try out the tool view. Property values are now displayed, and numbers, dates, and times are formatted the same as in the rest of the application. Display an image and a link to more information So far, our tool view displays the label of a selected record and its property values. In this section, we'll go further by displaying an image to represent the record, and by linking to its 360 view (if it has one). First, add data to the existing import from @i2analyze/notebook-sdk : import { chart, data, records, schema, toolview } from '@i2analyze/notebook-sdk'; Add properties in the data() function inside the ToolView component to store the image and the URL: data() { ..., threeSixtyUrl: undefined as string | undefined, image: undefined as data.IImage | undefined } In the setValuesForRecord() method, set these properties if we have a record, and clear them if we don't: if (record) { this.recordLabel = record.labelOrFallback; this.threeSixtyUrl = record.get360ViewUrl(); this.image = record.image || (record.isEntity() ? record.itemType.image : undefined); ... } else { this.recordLabel = 'No records selected.'; this.threeSixtyUrl = undefined; this.image = undefined; ... } This code uses the record image if one exists, and falls back to the image associated with the record's item type if it does not. In ToolView.vue 's <template> element, edit the heading to display the image and the link (if it exists): <h1 class=\"record-header\"> <img v-if=\"image\" :src=\"image.href\" :alt=\"image.description\" class=\"record-image\" /> <a v-if=\"threeSixtyUrl\" :href=\"threeSixtyUrl\" target=\"_blank\" class=\"record-label\"> {{ recordLabel }} </a> <span v-else class=\"record-label\">{{ recordLabel }}</span> </h1> The target=\"_blank\" attribute on the <a> element is so that the view opens in a new browser tab or window, rather than in the tool view! Reload the i2 Notebook web client once again, and watch the behavior of the tool view: For entity records that came from the Information Store, the label is now also a hyperlink. For all records that have images, the tool view displays that image. Support globalization Not all users speak English, and not all languages are read from left to right. If your tool view is aimed internationally, it should flow and display its contents correctly in all locales. The i2 Notebook Web API includes support for dealing with localization. First, let's demonstrate one of the problems by simulating an Arabic locale. In your browser address bar, after the contextpath part of the address, add the query parameter ?translationLocale=ar-sa and reload the page. (For example, http://localhost:4000/opal/?translationLocale=ar-sa#charts ) The i2 Notebook web client responds by simulating the locale of Arabic (Saudi Arabia). Note: The web client actually provides two locales: the translationLocale , which is used for the translation of the text; and the formattingLocale , which is used for formatting data for display. The ?translationLocale query parameter simulates both the translation and the formatting locale. If you display the built-in Record Inspector tool (using the R keyboard shortcut), you'll see how its user interface now flows from right to left. When you open your tool view, however, it still flows from left to right. The API can provide the information that we need. We just have to use it in the right place! In the <template> element inside ToolView.vue , add a dir attribute to the top-level <div> element: <div :dir=\"toolViewApi.locale.flowDirection\" :class=\"themeClass\"></div> The flowDirection property has either the value ltr or rtl , which is perfect for use with the dir HTML attribute. Reload the i2 Notebook web client and display the tool view again. It's laid out correctly according to the locale. When you add and remove the ?translationLocale=ar-sa query parameter, the flow alternates between left-to-right and right-to-left behavior. Note: By using the built-in formatter for property values, we get date, time, and numeric formatting for the Arabic (Saudi Arabia) locale automatically. Select items on your chart that have date, time, or numeric properties to see this in action. Another globalization issue is the text in the tool view. When simulating the Arabic (Saudi Arabia) locale, the \"No records selected.\" text doesn't display correctly - it actually displays as \".No records selected\". This problem occurs because the browser is trying to lay out the text from right to left, but it doesn't realize that the \".\" is meant to flow with the text, and shouldn't be considered by itself. (This issue affects most punctuation characters and numbers that aren't considered to be \"left-to-right\" or \"right-to-left\", but instead take their directionality from the context around them.) To get the text to behave correctly, we need to mark it up with bidirectional characters. Once again, we can use the formatter from the tool view API. Inside ToolView.vue , find the implementation of setValuesForRecord() . When we set the record label, we'll use the formatter to wrap it with bidirectional characters: ... this.recordLabel = formatter.wrapForBidi(record.labelOrFallback, 'raw'); ... this.recordLabel = formatter.wrapForBidi('No records selected.', 'raw'); Reload the i2 Notebook web client, and continue to simulate the Arabic (Saudi Arabia) locale. The text is now wrapped correctly, and displays with the period at the end of the text as \"No records selected.\" In general, you should use wrapForBidi() for all read-only text that you display to the user. It's particularly important for text whose contents you don't know in advance because it comes from record data. Update the plug-in code to use wrapForBidi() throughout ToolView.vue . In methods , the setValuesForRecord() function becomes: setValuesForRecord(record: records.IChartRecord | undefined) { const formatter = this.toolViewApi.formatter; if (record) { this.recordLabel = formatter.wrapForBidi(record.labelOrFallback, \"raw\"); this.threeSixtyUrl = record.get360ViewUrl(); this.image = record.image || (record.isEntity() ? record.itemType.image : undefined); const properties: IProperty[] = []; for (const propertyType of record.itemType.propertyTypes) { const label = formatter.wrapForBidi(propertyType.displayName, 'raw'); const value = record.getProperty(propertyType); if (value !== undefined && !record.isValueUnfetched(value)) { const formattedValue = formatter.formatValue(value); properties.push({ id: propertyType.id, label, value: formatter.wrapForBidi(formattedValue, 'raw'), }); } } this.properties = properties; } else { this.recordLabel = formatter.wrapForBidi(\"No records selected.\", \"raw\"); this.threeSixtyUrl = undefined; this.image = undefined; this.properties = []; } } A further consideration for good globalization is that some images and icons should be reversed in right-to-left locales, while others should not. For example, back and forward navigation buttons should always be mirrored. For more information on this and other topics, consult a resource such as https://material.io/design/usability/bidirectionality.html#mirroring-elements . Before you continue with this tutorial, remove the ?translationLocale=ar-sa query parameter to stop simulating the Arabic (Saudi Arabia) locale. Add record navigation to the tool view So far, we have looked only at the first record in the selection, which is useful in an example but not realistic. Now let's look at all the records in the selection, and provide the user with a pair of buttons to page through those records and inspect their properties. As part of this work, we'll demonstrate what errors can occur if you access the data incorrectly, and then show you how to access the data correctly. In the ToolView component, add properties for the index of the current record, the total number of records, and the current selection to the data() function: data() { ..., currentRecordIndex: 0, totalRecords: 0, selection: undefined as chart.ISelection | undefined } We'll store the selection and choose a record based on currentRecordIndex . Replace the implementation of handleChartSelectionChange() with the following code: methods: { handleChartSelectionChange(selection: chart.ISelection) { this.selection = selection; this.currentRecordIndex = 0; this.totalRecords = selection.records.size; this.readDataForCurrentRecord(); }, readDataForCurrentRecord() { const record = this.totalRecords && this.selection ? Array.from(this.selection.records)[this.currentRecordIndex] : undefined; this.setValuesForRecord(record); } } Note: This code isn't quite right, but we'll explain why (and come back and fix it) shortly. Here, we've extracted the code that reads the record data and saves it in our component to a separate method named readDataForCurrentRecord() . We are now saving the selection and resetting the currentRecordIndex on every chart selection change. Next, we're going to move the responsibility for reporting a lack of records from the record display to a title area. In the setValuesForRecord() method, replace this code: this.recordLabel = formatter.wrapForBidi('No records selected.', 'raw'); with: this.recordLabel = ''; Add handler methods to update the currentRecordIndex and set the new record data; properties to indicate when the \"previous\" and \"next\" buttons are disabled; and a property named currentRecord that formats the current record index for display. Still in the ToolView component, add: computed: { ..., disablePreviousButton(): boolean { return this.currentRecordIndex === 0; }, disableNextButton(): boolean { return this.currentRecordIndex === this.totalRecords - 1; }, currentRecord(): number { return this.currentRecordIndex + 1; } }, methods: { ..., onPreviousButtonClick() { this.currentRecordIndex--; this.readDataForCurrentRecord(); }, onNextButtonClick() { this.currentRecordIndex++; this.readDataForCurrentRecord(); } } In the same component, add a computed navigationTitle property: computed: { ..., navigationTitle(): string { const formatter = this.toolViewApi.formatter; if (this.totalRecords === 0) { return formatter.wrapForBidi(\"No records selected.\", \"raw\"); } const currentRecord = formatter.formatValue(this.currentRecord); const totalRecords = formatter.formatValue(this.totalRecords); return formatter.wrapForBidi( `Record ${currentRecord} of ${totalRecords}`, \"raw\" ); } } This code creates a title with formatted numbers for the selected record and the total record count. In <template> , above the <h1> element, add the title and our navigation buttons: <div class=\"record-navigation\"> <div>{{ navigationTitle }}</div> <div class=\"navigation-buttons\" v-if=\"totalRecords\"> <button class=\"navigation-button\" @click=\"onPreviousButtonClick\" title=\"Previous record\" :disabled=\"disablePreviousButton\" > &lt; </button> <button class=\"navigation-button\" @click=\"onNextButtonClick\" title=\"Next record\" :disabled=\"disableNextButton\" > &gt; </button> </div> </div> This gives users a pair of buttons for changing the current record, and a title displaying which record they're viewing out of the total. It hides the buttons if there are no records selected. Reload the i2 Notebook web client and open the plug-in. It doesn't work. If you look in the console, you'll see two types of error message. Here's the first: TypeError: 'get' on proxy: property '_properties' is a read-only and non-configurable data property on the proxy target but the proxy did not return its actual value. Vue reports an error here because of the way we're storing the selection inside data() . However, it's safe to ignore it for now, because of what we're going to do next. The more serious problem arises when you try to change the current record in the tool view by selecting multiple items on the chart and clicking the Next button. You'll see this: Application and chart data MUST only be accessed during event listener or transaction listener callbacks. It is not safe to access data at any other time. We are trying to access data outside an event or transaction listener. We store the selection data in our component, and attempt to read it when the user clicks Next . It doesn't matter if you're storing the selection or the records. You cannot access i2 Notebook chart data outside an event, mutation, or transaction listener. This rule ensures that API consumers always see a consistent view of the application data. Whenever you want to read data outside an event handler, you must request access to it from the application through a transaction or a mutation. Remove the selection property from the data() function. Instead of storing the records, we'll use the current record index to request the record that we want from the application. Change the handleChartSelectionChange() implementation to: handleChartSelectionChange() { this.currentRecordIndex = 0; this.readDataForCurrentRecord(); }, Change the readDataForCurrentRecord() method so that it requests the record data from the tool view API in a transaction handler: readDataForCurrentRecord() { this.toolViewApi.runTransaction((application) => { const records = application.chart.selection.records; const recordIds = Array.from(records.map((r) => r.id)); this.totalRecords = records.size; const currentRecordId = recordIds[this.currentRecordIndex]; const record = records.get(currentRecordId); this.setValuesForRecord(record); }); } It's safe to access chart data during the callback, and we take advantage by populating the component fields with data from the current record. Reload the i2 Notebook web client, select multiple items on the chart, and try using the buttons in our tool view to navigate among their records. Now, it works! Extension: Ensure fetched properties While viewing record properties, eventually a property will be shown as Exists but not fetched . You can ensure that the property is fetched. Change the readDataForCurrentRecord() method so that it ensures all properties are fetched before setting the values for records: readDataForCurrentRecord() { this.toolViewApi.runTransaction((application) => { const records = application.chart.selection.records; const recordIds = Array.from(records.map((r) => r.id)); this.totalRecords = records.size; const currentRecordId = recordIds[this.currentRecordIndex]; const record = records.get(currentRecordId); if (record) { const propertyTypes = record.itemType.propertyTypes; application.chart.ensurePropertiesFetched(record, propertyTypes); } this.setValuesForRecord(record); }); }, Store and restore state when the tool view is floated and docked Our tool view is almost complete, but for now there are still problems to solve. For example, you can select multiple items on the chart surface, and navigate to the second record in the selection by clicking Next . But if you then float the tool view, it returns to showing the first record again. When a tool view is docked or floated, its user interface is completely recreated in a different browser window, causing all of its temporary state to be lost. To address this, we can make use of the volatile store that's available from the tool view API. This store allows us to store state so that it survives tool view re-creation. (It's called the \"volatile\" store because its state does not persist across application reloads.) In ToolView.vue , at the end of the mounted() method, just after we subscribe to the chartselectionchange event, add some state persistence logic: mounted() { ... this.toolViewApi.addEventListener(\"unload\", () => { this.toolViewApi.volatileStore.set( \"currentRecordIndex\", this.currentRecordIndex ); }); this.currentRecordIndex = this.toolViewApi.volatileStore.get(\"currentRecordIndex\") || 0; this.readDataForCurrentRecord(); } This code means that we store currentRecordIndex when the tool view is unloaded, and retrieve it from the volatile store when the tool view is mounted. Because we're now fetching data immediately when the tool view starts up, we no longer need to use the dispatchNow option for the chartselectionchange event handler in mounted() . Remove it, leaving the event subscription as follows: this.toolViewApi.addEventListener('chartselectionchange', this.handleChartSelectionChange); The tool view now correctly maintains its state across docking and floating operations. Clear state when the tool view is closed We're now preserving the tool view state across floating and docking operations. However, we're also preserving that state if the user explicitly closes the tool view, which isn't appropriate. When the user closes the tool view, we should reset the state. The unload event can tell us whether the tool view is being unloaded because of an explicit close operation. In the ToolView component, inside mounted() , change the unload event handler to: this.toolViewApi.addEventListener('unload', (isClosing) => { if (isClosing) { this.toolViewApi.volatileStore.clear(); } else { this.toolViewApi.volatileStore.set('currentRecordIndex', this.currentRecordIndex); } }); Now, if the tool view is being closed, we'll discard our state. Otherwise, we'll persist it. Reload the i2 Notebook web client to test the changes we've made. Closing the tool view will reset the record index. Replace the built-in Record Inspector with our tool view We now have a functional tool view that allows users to view some of the details of a record. We can even use it to replace the web client's built-in Record Inspector! Removing the Record Inspector is easy. Edit public/entrypoint.js to insert the following command-removal code just before the call to initializationComplete() : api.commands.removeCommand(api.commands.systemCommands.toggleRecordInspector); Change the tool view toggle command name to \"Record inspector plug-in\", and add a keyboardHelp section so that the tool can be opened using a keyboard shortcut: const toggle = api.commands.createToolViewToggleCommand( { id: '00000000-0000-0000-0000-000000000003', name: 'Record inspector plug-in', icon: { type: 'inlineSvg', svg: '<svg viewBox=\"0 0 16 16\"><circle cx=\"8\" cy=\"8\" r=\"4\" /></svg>', }, keyboardHelp: { category: 'discover', label: 'Toggle record inspector plug-in', keys: ['shift+r'], }, }, toolView ); Reload the i2 Notebook web client, and you should see that: The built-in \"Record Inspector\" tool has been removed. The keyboard help dialog (displayed by pressing \"h\") lists the keyboard shortcut Shift+R for our tool view. Using the keyboard shortcut shift+r also toggles our tool view. Deploy the plug-in To deploy our plug-in on the server, we need to build it by running: npm run build from the plugin-vue directory. This creates a production build of our tutorial plug-in inside dist . For the actual deployment, we need to add the built plug-in to the server configuration, and then redeploy the server. Note: If you follow this procedure in a deployment that provides high availability, you must complete each step on every Liberty server in your environment before you move to the next step. On the server that hosts the i2 Analyze deployment, find the toolkit/configuration directory, and then navigate to the fragments/opal-services directory that it contains. If the opal-services directory does not already contain a plugins subdirectory, create one. Copy the dist directory so that it becomes a subdirectory of plugins , and rename it as you like. For example, plugins/plugin-vue . Run the following toolkit commands to update the deployed i2 Analyze server: setup -t stopLiberty setup -t deployLiberty setup -t startLiberty Stop the development proxy, and use the browser to navigate to your real server address. You'll find that your plug-in was successfully deployed. Next steps In this tutorial, we've: Created a command to show a record's position on a map, and added that command to the application ribbon and the chart pop-up menu Created a tool view to display record data, and replaced the built-in Record Inspector with this new tool view Considered data access, formatting, and globalization Deployed our plug-in on the i2 Analyze server This is just a flavor of what you can do with the @i2analyze/notebook-sdk package. To understand more about the capabilities of the i2 Notebook Web API, see the rest of the SDK documentation."
  },
  "guide/unfetched-data.html": {
    "href": "guide/unfetched-data.html",
    "title": "Unfetched property values",
    "keywords": "Unfetched property values The values of properties with logical types such as multipleLineString can be large. To reduce memory and bandwidth consumption, the i2 Notebook web client does not always fetch these values when it fetches records that contain them from the server. In code that manipulates property values, you must take the possibility of unfetched values into account. With a record in hand, you can distinguish between a property that actually has no value, and a property whose value has not yet been fetched, in two different ways: Call the isValueUnfetched() method on the value of an individual property. Test hasUnfetchedProperties on the record, and then call getUnfetchedPropertyTypes() . Requesting unfetched property values You can request unfetched property values from within a transaction or a mutation by calling IChart.ensurePropertiesFetched() . This asynchronous method fetches values from the server for the specified properties of the specified records. For example: getToolViewApi().runTransaction(async (application) => { const record = application.chart.records.get(myRecordId); const propertyType = record.itemType.propertyTypes.get(myPropertyTypeId); // Check if the value of the property with type 'propertyType' has been // fetched for 'record'. If not, request the value from the server. await application.chart.ensurePropertiesFetched([record], propertyType); }); For performance reasons, ensurePropertiesFetched() actually takes an array of records. It can fetch properties for many records efficiently in a small number of server round-trips. Calling it repeatedly for one record at a time results in much poorer performance and increased network use. Fetching property values is not itself a mutation operation, and does not form part of the undo action that a tracked mutation constructs. Note: The i2 Notebook web client is at liberty to dispose of property values that you fetch through ensurePropertiesFetched() . Do not rely on fetched values remaining fetched for all time."
  },
  "guide/versioning.html": {
    "href": "guide/versioning.html",
    "title": "SDK and API versioning",
    "keywords": "SDK and API versioning The i2 Notebook SDK and the i2 Notebook API have separate but related version numbers: i2 Notebook SDK The SDK version number is the version of the SDK package that you install when you start to create i2 Notebook plug-ins . You can find out the SDK version number from the installed package.json file: \"@i2analyze/notebook-sdk\": \"Major.Minor.Patch\" The following table shows the relationship between a version of the SDK and the first version of i2 Analyze in which its new features are available: i2 Notebook SDK version i2 Analyze version 1.7.* 4.4.5.0 1.6.* 4.4.4.5 1.5.* 4.4.4.0 1.4.* 4.4.3.0 1.3.* 4.4.2.0 1.2.* 4.4.1.0 1.1.* 4.4.0.0 1.0.* 4.3.4.0 i2 Notebook API The API version number is the version of the types contained in the SDK package, in the format \"Major.Minor\" . The API version number is based on the SDK version number, but does not include a Patch component. In general, version M . N of the Notebook SDK package contains the types for version M . N of the API. For example, Notebook SDK package v1.4. x contains the types for v1.4 of the API. An increment to the major version number of the SDK (or the API) indicates that the new version is not backward-compatible with older versions. In other words, this is a breaking change, and you will need to update your plug-in code to use it with new versions of the i2 Notebook web client. A increment to the minor or patch version number of the SDK (or the API) indicates a non-breaking change that introduces new functionality or provides non-critical bug fixes and improvements. Any plug-in code that you wrote for an earlier minor version is unaffected by non-breaking changes. To learn more about standard versioning principles, see the documentation at semver.org ."
  },
  "guide/whats-new-1-1.html": {
    "href": "guide/whats-new-1-1.html",
    "title": "What's new in version 1.1",
    "keywords": "What's new in version 1.1 Version 1.1 of the i2 Notebook API contains new functionality that allows you to create, edit, and remove records on charts in the i2 Notebook web client. There are also additions to the existing functionality for integrating your plug-ins into the application user interface. The following sections list the new and modified elements in the API, organized by namespace. app namespace IApplication runTrackedMutations() runUntrackedMutations() ICancelation IDetailedReport IMutationResult IMutationRollback IPendingRecord IRecordEditor IServerComponents baseUrl ISelectionEditor IStatus ISuccessReport ITrackedMutationCommit ITrackedMutations IUntrackedMutationCommit IUntrackedMutations IValueFactory IViewEditor chart namespace IChart ensurePropertiesFetched() IFitConstraints IViewportData commands namespace HelpCategory manage IActionArea after() before() IHomeTabSystemGroups chartManagement ISystemCommands addToMap expand saveChart toggleMap data namespace IGeoPointData records namespace IChartEntityRecord linkRecords INoteData ISecuritySettingData ISourceIdentifierData ISourceReferenceData schema namespace IChartItemTypeBase isEntityType() isInfoStore isLinkType() ISecuritySchema defaultSecurity ISourceIdentifiersSchema maxKeyStringLength maxTypeStringLength reservedTypes visual namespace INode edges"
  },
  "guide/whats-new-1-2.html": {
    "href": "guide/whats-new-1-2.html",
    "title": "What's new in version 1.2",
    "keywords": "What's new in version 1.2 Version 1.2 of the i2 Notebook API contains new functionality that allows you to style the elements on charts in the i2 Notebook web client. There are also additions in the areas of pop-up menu layout and interactions with tool view windows. The documentation has been updated with information about each of the following features: Styling nodes and edges Discovering the source of an event Accessing the element to which a record belongs Grouping pop-up menu commands Looking up item and property types by i2 Analyze schema ID Discovering when a tool view is \"minimized\" The following sections list all the new and modified elements in the API, organized by namespace. app namespace IChangeSource IEdgeEditor IElementEditorBase INodeEditor ISelectionEditor invert() ITrackedMutations editEdge() edgeNode() commands namespace IChartPopupMenuSystemGroups IGroupBase IMenuGroup ISystemCommands selectInvert openThreeSixtyView records namespace IChartRecordBase element schema namespace IChartItemTypeBase getPropertyType IChartSchema getItemType toolview namespace IToolView isMinimized ToolViewEventMap minimized ToolViewEventOptionsMap minimized visual namespace IEdgeStyle IElementSetting IElementStyleBase INodeStyle size Deprecated in version 1.2 The following elements in the API are deprecated in version 1.2, and might be removed in a future release. app namespace ITrackedMutations setNodeCenter() This method is replaced by INodeEditor.setCenter() ."
  },
  "guide/whats-new-1-3.html": {
    "href": "guide/whats-new-1-3.html",
    "title": "What's new in version 1.3",
    "keywords": "What's new in version 1.3 Version 1.3 of the i2 Notebook API contains new functionality to retrieve in-use item types from the chart and provide control over the default size and position of tool views. The documentation has been updated with information about each of the following features: Looking up records by item type Accessing the item types in a chart Specifying the default size and position when creating tool views The following sections list all the new and modified elements in the API, organized by namespace. chart namespace IChart entityTypes linkTypes getRecordsOfType() commands namespace ISystemCommands exportPdf shareRecords toggleLists data namespace IKeyedReadOnlyCollection entries() root namespace IEntryPointAPI createToolView(IToolViewConfig) Deprecated in version 1.3 The following elements in the API are deprecated in version 1.3, and might be removed in a future release. root namespace IEntryPointAPI createToolView(string, string) This method is replaced by IEntryPointAPI.createToolView(IToolViewConfig) ."
  },
  "guide/whats-new-1-4.html": {
    "href": "guide/whats-new-1-4.html",
    "title": "What's new in version 1.4",
    "keywords": "What's new in version 1.4 Version 1.4 of the i2 Notebook API contains new functionality that allows a plug-in to display a modal dialog, so that it can block interactions with the rest of the application while it presents information or questions to a user. The new version also contains updates that cover functional changes to the i2 Notebook application, including clipboard operations and new chart popup menus. The following sections list all the new and modified elements in the API, organized by namespace. Root namespace getDialogApi IEntryPointApi showDialog dialog namespace DialogEventMap action DialogEventOptionsMap action IDialogAction id IDialogActionConfig enabled label DialogActionListener IDialogApi updateAction submitAndClose close getInitialValue addEventListener removeEventListener IDialogConfig name path size initialValue actions ISystemDialogActions submit cancel close commands namespace IChartItemPopupMenuSystemGroups select discover clipboard IChartSurfacePopupMenuSystemGroups select clipboard ICommandApi chartItemPopupMenu chartSurfacePopupMenu IHomeTabSystemGroups clipboard ISystemCommands copy cut paste toolview namespace IToolViewApi showDialog Deprecated in version 1.4 The following elements in the API are deprecated in version 1.4, and might be removed in a future release. commands namespace ICommandApi chartPopupMenu This property is replaced by commands.ICommandApi.chartItemPopupMenu IChartPopupMenuSystemGroups This interface is replaced by commands.IChartItemPopupMenuSystemGroups"
  },
  "guide/whats-new-1-5.html": {
    "href": "guide/whats-new-1-5.html",
    "title": "What's new in version 1.5",
    "keywords": "What's new in version 1.5 Version 1.5 of the i2 Notebook API contains new functionality for modifying element labels and node images. The new version also extends the API for command surfacing to allow group nesting behavior to be controlled and commands to be hidden and their icon dynamically updated. Finally, chart schema updates events have been added, together with additional schema properties for schema origin information and link end type constraints. app namespace IElementEditorBase setLabel INodeEditor setImage chart namespace ChartEventMap chartschemachange commands namespace IGroupBase isCollapsed IAction setIcon setHidden ISystemCommands openImporter chartSettings IChartItemPopupMenuSystemGroups linkDirection data namespace ILabelDetailsBase records namespace IRecordLabelDetails schema namespace IChartSchemaChange IChartItemTypeBase origin IChartLinkType fromEntityTypes toEntityTypes visual namespace IElementLabelDetails IImageSetting Deprecated in 1.5 The following elements in the API are deprecated in version 1.5, and might be removed in a future release. app namespace IMutationResult change This property is replaced by the optional commands.IMutationResult.chartChange commands namespace IMenuGroup This interface is replaced by commands.IGroup data namespace ILabelDetails This interface is replaced by data.ILabelDetailsBase"
  },
  "guide/whats-new-1-6.html": {
    "href": "guide/whats-new-1-6.html",
    "title": "What's new in version 1.6",
    "keywords": "What's new in version 1.6 Version 1.6 of the i2 Notebook API adds the ability to create and edit custom types in the chart's schema. The new version also allows plugins to extend the application ribbon with new ribbon tabs as a place to surface commands. Finally, charts in i2 Notebook now support edge summarization, including the ability to set the labels of edge summaries to customize their appearance. app namespace IEdgeSummaryEditor setLabel ITrackedMutations addEntityType addLinkType editItemType IUntrackedMutations editEdgeSummary chart namespace IChart edgeSummaries IChartChangeMinor edgeSummaries commands namespace IApplicationRibbon addTab getTab IChartItemPopupMenuSystemGroups publish IHomeTabActionArea IRibbonTabActionArea IRibbonTabConfig ISystemCommands toggleChartingPreferences toggleExplore togglePalette downloadRecords schema namespace IChartEntityTypeData IChartItemTypeBase isCustom IChartItemTypeDataBase IChartLinkTypeData IChartPropertyType isCustom IChartSchema maxCustomTypeNameLength IChartSchemaChange removedTypes IItemTypeEditor IPropertyTypeData IPendingItemType IPendingPropertyType IPropertyTypesEditor IPropertyTypeEditor visual namespace IEdgeSummary"
  },
  "guide/whats-new-1-7.html": {
    "href": "guide/whats-new-1-7.html",
    "title": "What's new in version 1.7",
    "keywords": "What's new in version 1.7 Version 1.7 of the i2 Notebook API enhances the customization options for the application ribbon, allowing the removal of existing ribbon tabs. This allows the application ribbon UI to be fully customized, replacing the standard ribbon tabs with your own arrangement of tools and commands to fit your specific requirements. The new version also adds a flag to the security dimension values of records to show when a value has been \"suspended\" due its removal from the current security schema. commands namespace IApplicationRibbon removeTab schema namespace ISecurityDimensionValue suspended"
  },
  "guide/whats-new-1-8.html": {
    "href": "guide/whats-new-1-8.html",
    "title": "What's new in version 1.8",
    "keywords": "What's new in version 1.8 Version 1.8 of the i2 Notebook API adds support for node groups (grouping nodes together on a chart), expanded editing capabilities for node groups and edges, new system commands and ribbon areas for grouping and layouts, and several small improvements to collection APIs and source-reference metadata. The documentation has been updated with information about each of the following features: app namespace NodeGroupSpecifier common specifier type for node groups ( visual.ElementId | visual.INodeGroup ) INodeGroupEditor setLabel setBorderColor setBorderWidth setColor setImage setIsMinimized addNodes removeNodes IEdgeEditor setWidth IPendingNodeGroup pending node-group type returned by mutations when creating node groups ITrackedMutations addNodeGroup editNodeGroup removeNodeGroups removeFromNodeGroup chart namespace IChart nodeGroups IChartChangeMinor nodeGroups visual namespace INodeGroup id label style isMinimized nodes INodeGroupStyle image color borderColor borderWidth IEdgeStyle width commands namespace ICollectTabActionArea , IAnalyzeTabActionArea , IDisseminateTabActionArea New typed action areas for the Collect, Analyze and Disseminate tabs in the application ribbon. IApplicationRibbon collectTab analyzeTab disseminateTab ISystemCommands editElementLabel editGroupLabel groupNodes layoutCircular layoutOrganization layoutMinimizeCrossedLinks maximizeGroups minimizeGroups resetElementLabel resetGroupLabel selectUnitedItems ungroupNodes IHomeTabSystemGroups , ICollectTabSystemGroups , IAnalyzeTabSystemGroups , IDisseminateTabSystemGroups New system groups for layouts and groups have been added to the Home tab and split into Collect/Analyze tabs where appropriate. data namespace IReadOnlyCollection / IKeyedReadOnlyCollection isEmpty added to quickly test emptiness of collections. records namespace ISourceReference isReadOnly indicates whether a source reference is read-only."
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to the i2 Notebook SDK",
    "keywords": "Welcome to the i2 Notebook SDK The i2 Notebook SDK enables you to write plug-ins that enhance and extend the functionality of the i2 Notebook web client. For example, you might use a plug-in to add a new command to the application ribbon, or to provide a new tool for analyzing or displaying data in a way that's integrated with the rest of the i2 Notebook user interface. The i2 Notebook web client exposes a JavaScript API that i2 Notebook plug-ins can target with JavaScript or TypeScript code. For a plug-in that has a visual representation, you can write user interface code in HTML/CSS, or by using a framework such as Angular, React, or Vue. Note: During development, if you want to use a third-party framework or our plug-in proxy, Node.js is required. When development is complete, plug-ins do not require Node.js in order to run. The table of contents on the left includes conceptual and tutorial documentation for the i2 Notebook SDK: The topics that follow this introduction describe the structure of plug-ins for the i2 Notebook web client, and introduce some features of the SDK. The Tutorials section contains worked examples of using the SDK to create i2 Notebook plug-ins. You don't need to read the conceptual documentation before you follow the tutorials. The conceptual documentation provides more information about subjects that the tutorials mention in passing. You can return to those topics when you create plug-ins of your own. For an overview of what i2 Notebook plug-ins can do, see the Capabilities overview . For a more detailed account, use the Notebook API tab at the top of the page to read the i2 Notebook API documentation."
  }
}